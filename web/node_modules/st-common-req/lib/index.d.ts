export declare const reqByFetch: ({ url, jsonParse, config }: {
    url: string | URL | Request;
    jsonParse?: boolean;
    config?: RequestInit;
}) => Promise<any>;
import * as _resErrResCodeDescConst from './res/consts/err-res-code-desc-const.ts';
export declare const ErrResCodeDescConst: {
    readonly 400: "错误请求";
    readonly 401: "未授权，请登录";
    readonly 403: "禁止访问";
    readonly 404: "请求地址出错，未找到该资源";
    readonly 405: "请求方法未允许";
    readonly 408: "请求超时";
    readonly 500: "服务器端出错";
    readonly 501: "网络未实现";
    readonly 502: "网络错误";
    readonly 503: "服务不可用";
    readonly 504: "网络超时";
    readonly 505: "HTTP 版本不支持该请求";
};
export type ErrResCodeDescKey = _resErrResCodeDescConst.ErrResCodeDescKey;
import * as _resErrResTipConst from './res/consts/err-res-tip-const.ts';
export declare const ErrResTipConst: {
    readonly TIMEOUT: "请求超时，请重新尝试";
    readonly CONNECT_FAILED: "连接服务器失败，请稍后再试";
};
export type ErrResTipKey = _resErrResTipConst.ErrResTipKey;
export * from './axios/types/axios-namespace.ts';
export declare const addAxiosReqInterceptor: (axios: import('axios').AxiosInstance, preSendReqHandler?: (config: import('axios').InternalAxiosRequestConfig<any>) => void, rejectedHandler?: (error: import('axios').AxiosError) => any) => import('axios').AxiosInstance;
import * as _axiosResInterceptorUtil from './axios/utils/res-interceptor-util.ts';
export declare const addAxiosRespInterceptor: (axios: import('axios').AxiosInstance, fulfilledHandler?: (data: any, headers: _axiosResInterceptorUtil.FulfilledHandlerHeadersPropType, status: number) => any, rejectedHandler?: (message: string, error: import('axios').AxiosError) => any) => import('axios').AxiosInstance;
export type AxiosFulfilledHandlerHeadersPropType = _axiosResInterceptorUtil.FulfilledHandlerHeadersPropType;
export declare const setAxiosReqData: (config: import('axios').AxiosRequestConfig, data: any) => void;
import * as _axiosPostUtil from './axios/utils/post-util.ts';
export type AxiosPostFormReturn = _axiosPostUtil.PostFormReturn;
export declare const genAxiosPostForm: (axios: import('axios').AxiosInstance) => _axiosPostUtil.PostFormReturn;
