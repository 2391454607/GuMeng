import { AxiosHeaderValue, AxiosInstance, AxiosResponseHeaders, AxiosHeaders, AxiosError } from 'axios';
/**
 * 请求响应成功处理函数参数列表中 headers 参数的类型
 */
export type FulfilledHandlerHeadersPropType = AxiosResponseHeaders | Partial<AxiosHeaders & {
    Server: AxiosHeaderValue;
    "Content-Type": AxiosHeaderValue;
    "Content-Length": AxiosHeaderValue;
    "Cache-Control": AxiosHeaderValue;
    "Content-Encoding": AxiosHeaderValue;
}>;
/**
 * 为 axios 实例对象添加响应拦截器
 *
 * @param axios axios 实例对象
 * @param fulfilledHandler 请求响应成功的处理函数，参数列表：data-响应数据；status-响应状态；headers-响应头，
 * 默认值 {@link fulfilledHandlerDefault}
 * @param rejectedHandler 请求响应失败的处理函数，参数列表：message-响应错误提示信息；error-axios 响应错误对象，
 * 默认值 {@link rejectedHandlerDefault}
 * @returns {AxiosInstance} 添加了响应拦截器的 axios 实例对象
 */
export declare const addRespInterceptor: (axios: AxiosInstance, fulfilledHandler?: (data: any, headers: FulfilledHandlerHeadersPropType, status: number) => any, rejectedHandler?: (message: string, error: AxiosError) => any) => AxiosInstance;
