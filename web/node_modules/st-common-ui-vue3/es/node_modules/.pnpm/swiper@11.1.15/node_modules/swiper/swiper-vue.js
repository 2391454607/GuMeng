import { ref as r, onUpdated as M, provide as I, watch as z, nextTick as A, onMounted as F, onBeforeUnmount as D, h as y } from "vue";
import { S as L } from "./shared/swiper-core.js";
import { g as N, a as U, u as W, m as H } from "./shared/update-on-virtual-data.js";
import { e as x, u as G, d as V, w as _, n as $, b as q, a as J } from "./shared/update-swiper.js";
function P(a, i, s) {
  a === void 0 && (a = {});
  const f = [], g = {
    "container-start": [],
    "container-end": [],
    "wrapper-start": [],
    "wrapper-end": []
  }, b = (u, o) => {
    Array.isArray(u) && u.forEach((d) => {
      const p = typeof d.type == "symbol";
      o === "default" && (o = "container-end"), p && d.children ? b(d.children, o) : d.type && (d.type.name === "SwiperSlide" || d.type.name === "AsyncComponentWrapper") || d.componentOptions && d.componentOptions.tag === "SwiperSlide" ? f.push(d) : g[o] && g[o].push(d);
    });
  };
  return Object.keys(a).forEach((u) => {
    if (typeof a[u] != "function") return;
    const o = a[u]();
    b(o, u);
  }), s.value = i.value, i.value = f, {
    slides: f,
    slots: g
  };
}
function K(a, i, s) {
  if (!s) return null;
  const f = (e) => {
    let n = e;
    return e < 0 ? n = i.length + e : n >= i.length && (n = n - i.length), n;
  }, g = a.value.isHorizontal() ? {
    [a.value.rtlTranslate ? "right" : "left"]: `${s.offset}px`
  } : {
    top: `${s.offset}px`
  }, {
    from: b,
    to: u
  } = s, o = a.value.params.loop ? -i.length : 0, d = a.value.params.loop ? i.length * 2 : i.length, p = [];
  for (let e = o; e < d; e += 1)
    e >= b && e <= u && p.length < i.length && p.push(i[f(e)]);
  return p.map((e) => {
    if (e.props || (e.props = {}), e.props.style || (e.props.style = {}), e.props.swiperRef = a, e.props.style = g, e.type)
      return y(e.type, {
        ...e.props
      }, e.children);
    if (e.componentOptions)
      return y(e.componentOptions.Ctor, {
        ...e.props
      }, e.componentOptions.children);
  });
}
const ee = {
  name: "Swiper",
  props: {
    tag: {
      type: String,
      default: "div"
    },
    wrapperTag: {
      type: String,
      default: "div"
    },
    modules: {
      type: Array,
      default: void 0
    },
    init: {
      type: Boolean,
      default: void 0
    },
    direction: {
      type: String,
      default: void 0
    },
    oneWayMovement: {
      type: Boolean,
      default: void 0
    },
    swiperElementNodeName: {
      type: String,
      default: "SWIPER-CONTAINER"
    },
    touchEventsTarget: {
      type: String,
      default: void 0
    },
    initialSlide: {
      type: Number,
      default: void 0
    },
    speed: {
      type: Number,
      default: void 0
    },
    cssMode: {
      type: Boolean,
      default: void 0
    },
    updateOnWindowResize: {
      type: Boolean,
      default: void 0
    },
    resizeObserver: {
      type: Boolean,
      default: void 0
    },
    nested: {
      type: Boolean,
      default: void 0
    },
    focusableElements: {
      type: String,
      default: void 0
    },
    width: {
      type: Number,
      default: void 0
    },
    height: {
      type: Number,
      default: void 0
    },
    preventInteractionOnTransition: {
      type: Boolean,
      default: void 0
    },
    userAgent: {
      type: String,
      default: void 0
    },
    url: {
      type: String,
      default: void 0
    },
    edgeSwipeDetection: {
      type: [Boolean, String],
      default: void 0
    },
    edgeSwipeThreshold: {
      type: Number,
      default: void 0
    },
    autoHeight: {
      type: Boolean,
      default: void 0
    },
    setWrapperSize: {
      type: Boolean,
      default: void 0
    },
    virtualTranslate: {
      type: Boolean,
      default: void 0
    },
    effect: {
      type: String,
      default: void 0
    },
    breakpoints: {
      type: Object,
      default: void 0
    },
    breakpointsBase: {
      type: String,
      default: void 0
    },
    spaceBetween: {
      type: [Number, String],
      default: void 0
    },
    slidesPerView: {
      type: [Number, String],
      default: void 0
    },
    maxBackfaceHiddenSlides: {
      type: Number,
      default: void 0
    },
    slidesPerGroup: {
      type: Number,
      default: void 0
    },
    slidesPerGroupSkip: {
      type: Number,
      default: void 0
    },
    slidesPerGroupAuto: {
      type: Boolean,
      default: void 0
    },
    centeredSlides: {
      type: Boolean,
      default: void 0
    },
    centeredSlidesBounds: {
      type: Boolean,
      default: void 0
    },
    slidesOffsetBefore: {
      type: Number,
      default: void 0
    },
    slidesOffsetAfter: {
      type: Number,
      default: void 0
    },
    normalizeSlideIndex: {
      type: Boolean,
      default: void 0
    },
    centerInsufficientSlides: {
      type: Boolean,
      default: void 0
    },
    watchOverflow: {
      type: Boolean,
      default: void 0
    },
    roundLengths: {
      type: Boolean,
      default: void 0
    },
    touchRatio: {
      type: Number,
      default: void 0
    },
    touchAngle: {
      type: Number,
      default: void 0
    },
    simulateTouch: {
      type: Boolean,
      default: void 0
    },
    shortSwipes: {
      type: Boolean,
      default: void 0
    },
    longSwipes: {
      type: Boolean,
      default: void 0
    },
    longSwipesRatio: {
      type: Number,
      default: void 0
    },
    longSwipesMs: {
      type: Number,
      default: void 0
    },
    followFinger: {
      type: Boolean,
      default: void 0
    },
    allowTouchMove: {
      type: Boolean,
      default: void 0
    },
    threshold: {
      type: Number,
      default: void 0
    },
    touchMoveStopPropagation: {
      type: Boolean,
      default: void 0
    },
    touchStartPreventDefault: {
      type: Boolean,
      default: void 0
    },
    touchStartForcePreventDefault: {
      type: Boolean,
      default: void 0
    },
    touchReleaseOnEdges: {
      type: Boolean,
      default: void 0
    },
    uniqueNavElements: {
      type: Boolean,
      default: void 0
    },
    resistance: {
      type: Boolean,
      default: void 0
    },
    resistanceRatio: {
      type: Number,
      default: void 0
    },
    watchSlidesProgress: {
      type: Boolean,
      default: void 0
    },
    grabCursor: {
      type: Boolean,
      default: void 0
    },
    preventClicks: {
      type: Boolean,
      default: void 0
    },
    preventClicksPropagation: {
      type: Boolean,
      default: void 0
    },
    slideToClickedSlide: {
      type: Boolean,
      default: void 0
    },
    loop: {
      type: Boolean,
      default: void 0
    },
    loopedSlides: {
      type: Number,
      default: void 0
    },
    loopPreventsSliding: {
      type: Boolean,
      default: void 0
    },
    rewind: {
      type: Boolean,
      default: void 0
    },
    allowSlidePrev: {
      type: Boolean,
      default: void 0
    },
    allowSlideNext: {
      type: Boolean,
      default: void 0
    },
    swipeHandler: {
      type: Boolean,
      default: void 0
    },
    noSwiping: {
      type: Boolean,
      default: void 0
    },
    noSwipingClass: {
      type: String,
      default: void 0
    },
    noSwipingSelector: {
      type: String,
      default: void 0
    },
    passiveListeners: {
      type: Boolean,
      default: void 0
    },
    containerModifierClass: {
      type: String,
      default: void 0
    },
    slideClass: {
      type: String,
      default: void 0
    },
    slideActiveClass: {
      type: String,
      default: void 0
    },
    slideVisibleClass: {
      type: String,
      default: void 0
    },
    slideFullyVisibleClass: {
      type: String,
      default: void 0
    },
    slideBlankClass: {
      type: String,
      default: void 0
    },
    slideNextClass: {
      type: String,
      default: void 0
    },
    slidePrevClass: {
      type: String,
      default: void 0
    },
    wrapperClass: {
      type: String,
      default: void 0
    },
    lazyPreloaderClass: {
      type: String,
      default: void 0
    },
    lazyPreloadPrevNext: {
      type: Number,
      default: void 0
    },
    runCallbacksOnInit: {
      type: Boolean,
      default: void 0
    },
    observer: {
      type: Boolean,
      default: void 0
    },
    observeParents: {
      type: Boolean,
      default: void 0
    },
    observeSlideChildren: {
      type: Boolean,
      default: void 0
    },
    a11y: {
      type: [Boolean, Object],
      default: void 0
    },
    autoplay: {
      type: [Boolean, Object],
      default: void 0
    },
    controller: {
      type: Object,
      default: void 0
    },
    coverflowEffect: {
      type: Object,
      default: void 0
    },
    cubeEffect: {
      type: Object,
      default: void 0
    },
    fadeEffect: {
      type: Object,
      default: void 0
    },
    flipEffect: {
      type: Object,
      default: void 0
    },
    creativeEffect: {
      type: Object,
      default: void 0
    },
    cardsEffect: {
      type: Object,
      default: void 0
    },
    hashNavigation: {
      type: [Boolean, Object],
      default: void 0
    },
    history: {
      type: [Boolean, Object],
      default: void 0
    },
    keyboard: {
      type: [Boolean, Object],
      default: void 0
    },
    mousewheel: {
      type: [Boolean, Object],
      default: void 0
    },
    navigation: {
      type: [Boolean, Object],
      default: void 0
    },
    pagination: {
      type: [Boolean, Object],
      default: void 0
    },
    parallax: {
      type: [Boolean, Object],
      default: void 0
    },
    scrollbar: {
      type: [Boolean, Object],
      default: void 0
    },
    thumbs: {
      type: Object,
      default: void 0
    },
    virtual: {
      type: [Boolean, Object],
      default: void 0
    },
    zoom: {
      type: [Boolean, Object],
      default: void 0
    },
    grid: {
      type: [Object],
      default: void 0
    },
    freeMode: {
      type: [Boolean, Object],
      default: void 0
    },
    enabled: {
      type: Boolean,
      default: void 0
    }
  },
  emits: ["_beforeBreakpoint", "_containerClasses", "_slideClass", "_slideClasses", "_swiper", "_freeModeNoMomentumRelease", "activeIndexChange", "afterInit", "autoplay", "autoplayStart", "autoplayStop", "autoplayPause", "autoplayResume", "autoplayTimeLeft", "beforeDestroy", "beforeInit", "beforeLoopFix", "beforeResize", "beforeSlideChangeStart", "beforeTransitionStart", "breakpoint", "changeDirection", "click", "disable", "doubleTap", "doubleClick", "destroy", "enable", "fromEdge", "hashChange", "hashSet", "init", "keyPress", "lock", "loopFix", "momentumBounce", "navigationHide", "navigationShow", "navigationPrev", "navigationNext", "observerUpdate", "orientationchange", "paginationHide", "paginationRender", "paginationShow", "paginationUpdate", "progress", "reachBeginning", "reachEnd", "realIndexChange", "resize", "scroll", "scrollbarDragEnd", "scrollbarDragMove", "scrollbarDragStart", "setTransition", "setTranslate", "slidesUpdated", "slideChange", "slideChangeTransitionEnd", "slideChangeTransitionStart", "slideNextTransitionEnd", "slideNextTransitionStart", "slidePrevTransitionEnd", "slidePrevTransitionStart", "slideResetTransitionStart", "slideResetTransitionEnd", "sliderMove", "sliderFirstMove", "slidesLengthChange", "slidesGridLengthChange", "snapGridLengthChange", "snapIndexChange", "swiper", "tap", "toEdge", "touchEnd", "touchMove", "touchMoveOpposite", "touchStart", "transitionEnd", "transitionStart", "unlock", "update", "virtualUpdate", "zoomChange"],
  setup(a, i) {
    let {
      slots: s,
      emit: f
    } = i;
    const {
      tag: g,
      wrapperTag: b
    } = a, u = r("swiper"), o = r(null), d = r(!1), p = r(!1), e = r(null), n = r(null), B = r(null), c = {
      value: []
    }, m = {
      value: []
    }, w = r(null), C = r(null), E = r(null), O = r(null), {
      params: h,
      passedParams: j
    } = N(a);
    P(s, c, m), B.value = j, m.value = c.value;
    const R = () => {
      P(s, c, m), d.value = !0;
    };
    h.onAny = function(l) {
      for (var t = arguments.length, v = new Array(t > 1 ? t - 1 : 0), S = 1; S < t; S++)
        v[S - 1] = arguments[S];
      f(l, ...v);
    }, Object.assign(h.on, {
      _beforeBreakpoint: R,
      _containerClasses(l, t) {
        u.value = t;
      }
    });
    const T = {
      ...h
    };
    if (delete T.wrapperClass, n.value = new L(T), n.value.virtual && n.value.params.virtual.enabled) {
      n.value.virtual.slides = c.value;
      const l = {
        cache: !1,
        slides: c.value,
        renderExternal: (t) => {
          o.value = t;
        },
        renderExternalUpdate: !1
      };
      x(n.value.params.virtual, l), x(n.value.originalParams.virtual, l);
    }
    M(() => {
      !p.value && n.value && (n.value.emitSlidesClasses(), p.value = !0);
      const {
        passedParams: l
      } = N(a), t = U(l, B.value, c.value, m.value, (v) => v.props && v.props.key);
      B.value = l, (t.length || d.value) && n.value && !n.value.destroyed && G({
        swiper: n.value,
        slides: c.value,
        passedParams: l,
        changedParams: t,
        nextEl: w.value,
        prevEl: C.value,
        scrollbarEl: O.value,
        paginationEl: E.value
      }), d.value = !1;
    }), I("swiper", n), z(o, () => {
      A(() => {
        W(n.value);
      });
    }), F(() => {
      e.value && (H({
        el: e.value,
        nextEl: w.value,
        prevEl: C.value,
        paginationEl: E.value,
        scrollbarEl: O.value,
        swiper: n.value
      }, h), f("swiper", n.value));
    }), D(() => {
      n.value && !n.value.destroyed && n.value.destroy(!0, !1);
    });
    function k(l) {
      return h.virtual ? K(n, l, o.value) : (l.forEach((t, v) => {
        t.props || (t.props = {}), t.props.swiperRef = n, t.props.swiperSlideIndex = v;
      }), l);
    }
    return () => {
      const {
        slides: l,
        slots: t
      } = P(s, c, m);
      return y(g, {
        ref: e,
        class: V(u.value)
      }, [t["container-start"], y(b, {
        class: _(h.wrapperClass)
      }, [t["wrapper-start"], k(l), t["wrapper-end"]]), $(a) && [y("div", {
        ref: C,
        class: "swiper-button-prev"
      }), y("div", {
        ref: w,
        class: "swiper-button-next"
      })], q(a) && y("div", {
        ref: O,
        class: "swiper-scrollbar"
      }), J(a) && y("div", {
        ref: E,
        class: "swiper-pagination"
      }), t["container-end"]]);
    };
  }
};
export {
  ee as Swiper
};
