import { Component } from 'vue';
export declare const StLoginPage1: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{
        modelValue?: boolean;
    } & {
        pageMinHeight?: number | string;
        circleMaskDiameter?: number | string;
        circleMaskDiameterSmall?: number | string;
        circleMaskColor?: string;
        panelImgSrc?: string[] | string;
        panelImgWidthSmall?: number | string;
    }> & Readonly<{
        "onUpdate:modelValue"?: ((modelValue: boolean) => any) | undefined;
    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        "update:modelValue": (modelValue: boolean) => any;
    }, import('vue').PublicProps, {
        pageMinHeight: number | string;
        circleMaskDiameter: number | string;
        circleMaskDiameterSmall: number | string;
        circleMaskColor: string;
        panelImgSrc: string[] | string;
        panelImgWidthSmall: number | string;
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<{
        modelValue?: boolean;
    } & {
        pageMinHeight?: number | string;
        circleMaskDiameter?: number | string;
        circleMaskDiameterSmall?: number | string;
        circleMaskColor?: string;
        panelImgSrc?: string[] | string;
        panelImgWidthSmall?: number | string;
    }> & Readonly<{
        "onUpdate:modelValue"?: ((modelValue: boolean) => any) | undefined;
    }>, {}, {}, {}, {}, {
        pageMinHeight: number | string;
        circleMaskDiameter: number | string;
        circleMaskDiameterSmall: number | string;
        circleMaskColor: string;
        panelImgSrc: string[] | string;
        panelImgWidthSmall: number | string;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<{
    modelValue?: boolean;
} & {
    pageMinHeight?: number | string;
    circleMaskDiameter?: number | string;
    circleMaskDiameterSmall?: number | string;
    circleMaskColor?: string;
    panelImgSrc?: string[] | string;
    panelImgWidthSmall?: number | string;
}> & Readonly<{
    "onUpdate:modelValue"?: ((modelValue: boolean) => any) | undefined;
}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    "update:modelValue": (modelValue: boolean) => any;
}, string, {
    pageMinHeight: number | string;
    circleMaskDiameter: number | string;
    circleMaskDiameterSmall: number | string;
    circleMaskColor: string;
    panelImgSrc: string[] | string;
    panelImgWidthSmall: number | string;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        "form-1"?(_: {}): any;
        "form-2"?(_: {}): any;
        "panel-1"?(_: {}): any;
        "panel-1-top"?(_: {}): any;
        "panel-2"?(_: {}): any;
        "panel-2-top"?(_: {}): any;
    };
});
export declare const StLoginPage1Register: import('vue').Plugin;
export declare const StIconIconify: import('vue').DefineComponent<{
    icon: string | import('@iconify/types').IconifyIcon;
    width?: string | number;
    height?: string | number;
    color?: string;
    style?: Partial<CSSStyleDeclaration> | string;
    load?: (name: string) => void;
}, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
    icon: string | import('@iconify/types').IconifyIcon;
    width?: string | number;
    height?: string | number;
    color?: string;
    style?: Partial<CSSStyleDeclaration> | string;
    load?: (name: string) => void;
}> & Readonly<{}>, {
    width: string | number;
    height: string | number;
    load: (name: string) => void;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
export declare const StIconIconifyRegister: import('vue').Plugin;
export declare const StIconIconifyOffline: import('vue').DefineComponent<{
    icon: string | import('@iconify/types').IconifyIcon;
    width?: string | number;
    height?: string | number;
    color?: string;
    style?: Partial<CSSStyleDeclaration> | string;
    load?: (name: string) => void;
}, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
    icon: string | import('@iconify/types').IconifyIcon;
    width?: string | number;
    height?: string | number;
    color?: string;
    style?: Partial<CSSStyleDeclaration> | string;
    load?: (name: string) => void;
}> & Readonly<{}>, {
    width: string | number;
    height: string | number;
    load: (name: string) => void;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
export declare const StIconIconifyOfflineRegister: import('vue').Plugin;
export { IconTypeEnum } from './components/StIcon';
export declare const StIcon: import('vue').DefineComponent<{
    icon?: import('@iconify/types').IconifyIcon | string;
    iconType?: import('./index.ts').IconTypeEnum;
    style?: Partial<CSSStyleDeclaration> | string;
    className?: string | string[];
}, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
    icon?: import('@iconify/types').IconifyIcon | string;
    iconType?: import('./index.ts').IconTypeEnum;
    style?: Partial<CSSStyleDeclaration> | string;
    className?: string | string[];
}> & Readonly<{}>, {
    icon: import('@iconify/types').IconifyIcon | string;
    iconType: import('./index.ts').IconTypeEnum;
    className: string | string[];
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
export declare const StIconRegister: import('vue').Plugin;
export declare const StReactCollapse: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{
        dropdownZIndex?: number;
    }> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
        dropdownZIndex: number;
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<{
        dropdownZIndex?: number;
    }> & Readonly<{}>, {}, {}, {}, {}, {
        dropdownZIndex: number;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<{
    dropdownZIndex?: number;
}> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
    dropdownZIndex: number;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {
            isCollapse: boolean;
        }): any;
        "dropdown-icon"?(_: {}): any;
        "dropdown-content"?(_: {}): any;
    };
});
export declare const StReactCollapseRegister: import('vue').Plugin;
import * as StPopoverSubContPos from './components/StPopover/st-popover-sub-cont-pos.ts';
export declare const StPopover: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{
        subContPosition?: StPopoverSubContPos.StPopoverSubContPosEnum;
        isShow?: boolean;
    } & {
        baseOnPosition?: boolean;
        isVertical?: boolean;
        x?: number;
        y?: number;
        trigger?: "click" | "hover";
        subContTransitionName?: string;
        subContZIndex?: number;
    }> & Readonly<{
        "onUpdate:subContPosition"?: ((subContPosition: StPopoverSubContPos.StPopoverSubContPosEnum) => any) | undefined;
        "onUpdate:isShow"?: ((isShow: boolean) => any) | undefined;
    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        "update:subContPosition": (subContPosition: StPopoverSubContPos.StPopoverSubContPosEnum) => any;
        "update:isShow": (isShow: boolean) => any;
    }, import('vue').PublicProps, {
        x: number;
        y: number;
        baseOnPosition: boolean;
        isVertical: boolean;
        trigger: "click" | "hover";
        subContTransitionName: string;
        subContZIndex: number;
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<{
        subContPosition?: StPopoverSubContPos.StPopoverSubContPosEnum;
        isShow?: boolean;
    } & {
        baseOnPosition?: boolean;
        isVertical?: boolean;
        x?: number;
        y?: number;
        trigger?: "click" | "hover";
        subContTransitionName?: string;
        subContZIndex?: number;
    }> & Readonly<{
        "onUpdate:subContPosition"?: ((subContPosition: StPopoverSubContPos.StPopoverSubContPosEnum) => any) | undefined;
        "onUpdate:isShow"?: ((isShow: boolean) => any) | undefined;
    }>, {}, {}, {}, {}, {
        x: number;
        y: number;
        baseOnPosition: boolean;
        isVertical: boolean;
        trigger: "click" | "hover";
        subContTransitionName: string;
        subContZIndex: number;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<{
    subContPosition?: StPopoverSubContPos.StPopoverSubContPosEnum;
    isShow?: boolean;
} & {
    baseOnPosition?: boolean;
    isVertical?: boolean;
    x?: number;
    y?: number;
    trigger?: "click" | "hover";
    subContTransitionName?: string;
    subContZIndex?: number;
}> & Readonly<{
    "onUpdate:subContPosition"?: ((subContPosition: StPopoverSubContPos.StPopoverSubContPosEnum) => any) | undefined;
    "onUpdate:isShow"?: ((isShow: boolean) => any) | undefined;
}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    "update:subContPosition": (subContPosition: StPopoverSubContPos.StPopoverSubContPosEnum) => any;
    "update:isShow": (isShow: boolean) => any;
}, string, {
    x: number;
    y: number;
    baseOnPosition: boolean;
    isVertical: boolean;
    trigger: "click" | "hover";
    subContTransitionName: string;
    subContZIndex: number;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
        subContent?(_: {}): any;
    };
});
export declare const StPopoverRegister: import('vue').Plugin;
export declare const StPopoverSubContPosEnum: typeof StPopoverSubContPos.StPopoverSubContPosEnum;
export declare const StPopoverSubContPosConst: {
    readonly LT: {
        readonly position: {
            readonly right: "100%";
            readonly top: 0;
            readonly transformOrigin: "right top";
        };
    };
    readonly LB: {
        readonly position: {
            readonly right: "100%";
            readonly bottom: 0;
            readonly transformOrigin: "right bottom";
        };
    };
    readonly RT: {
        readonly position: {
            readonly left: "100%";
            readonly top: 0;
            readonly transformOrigin: "left top";
        };
    };
    readonly RB: {
        readonly position: {
            readonly left: "100%";
            readonly bottom: 0;
            readonly transformOrigin: "left bottom";
        };
    };
    readonly TL: {
        readonly position: {
            readonly bottom: "100%";
            readonly left: 0;
            readonly transformOrigin: "bottom left";
        };
    };
    readonly TR: {
        readonly position: {
            readonly bottom: "100%";
            readonly right: 0;
            readonly transformOrigin: "bottom right";
        };
    };
    readonly BL: {
        readonly position: {
            readonly top: "100%";
            readonly left: 0;
            readonly transformOrigin: "top left";
        };
    };
    readonly BR: {
        readonly position: {
            readonly top: "100%";
            readonly right: 0;
            readonly transformOrigin: "top right";
        };
    };
};
export declare const StAdjustableContainer: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{
        containerWidth?: number;
        containerHeight?: number;
    } & {
        enableWidthAdjust?: boolean;
        containerWidthDefault?: number | string;
        containerMinWidth?: number;
        containerMaxWidth?: number;
        adjustWidthElW?: number | string;
        enableHeightAdjust?: boolean;
        containerHeightDefault?: number | string;
        containerMinHeight?: number;
        containerMaxHeight?: number;
        adjustHeightElH?: number | string;
        enableContainerHeightFollowWindow?: boolean;
        enablePlaceholder?: boolean;
    }> & Readonly<{
        "onWidth-to-min"?: ((containerWidth: number) => any) | undefined;
        "onWidth-to-max"?: ((containerWidth: number) => any) | undefined;
        "onHeight-to-min"?: ((containerHeight: number) => any) | undefined;
        "onHeight-to-max"?: ((containerHeight: number) => any) | undefined;
        "onUpdate:containerWidth"?: ((containerWidth: number) => any) | undefined;
        "onUpdate:containerHeight"?: ((containerHeight: number) => any) | undefined;
    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        "update:containerWidth": (containerWidth: number) => any;
        "update:containerHeight": (containerHeight: number) => any;
    } & {
        "width-to-min": (containerWidth: number) => any;
        "width-to-max": (containerWidth: number) => any;
        "height-to-min": (containerHeight: number) => any;
        "height-to-max": (containerHeight: number) => any;
    }, import('vue').PublicProps, {
        enableWidthAdjust: boolean;
        containerWidthDefault: number | string;
        containerMinWidth: number;
        containerMaxWidth: number;
        adjustWidthElW: number | string;
        enableHeightAdjust: boolean;
        containerHeightDefault: number | string;
        containerMinHeight: number;
        containerMaxHeight: number;
        adjustHeightElH: number | string;
        enableContainerHeightFollowWindow: boolean;
        enablePlaceholder: boolean;
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<{
        containerWidth?: number;
        containerHeight?: number;
    } & {
        enableWidthAdjust?: boolean;
        containerWidthDefault?: number | string;
        containerMinWidth?: number;
        containerMaxWidth?: number;
        adjustWidthElW?: number | string;
        enableHeightAdjust?: boolean;
        containerHeightDefault?: number | string;
        containerMinHeight?: number;
        containerMaxHeight?: number;
        adjustHeightElH?: number | string;
        enableContainerHeightFollowWindow?: boolean;
        enablePlaceholder?: boolean;
    }> & Readonly<{
        "onWidth-to-min"?: ((containerWidth: number) => any) | undefined;
        "onWidth-to-max"?: ((containerWidth: number) => any) | undefined;
        "onHeight-to-min"?: ((containerHeight: number) => any) | undefined;
        "onHeight-to-max"?: ((containerHeight: number) => any) | undefined;
        "onUpdate:containerWidth"?: ((containerWidth: number) => any) | undefined;
        "onUpdate:containerHeight"?: ((containerHeight: number) => any) | undefined;
    }>, {}, {}, {}, {}, {
        enableWidthAdjust: boolean;
        containerWidthDefault: number | string;
        containerMinWidth: number;
        containerMaxWidth: number;
        adjustWidthElW: number | string;
        enableHeightAdjust: boolean;
        containerHeightDefault: number | string;
        containerMinHeight: number;
        containerMaxHeight: number;
        adjustHeightElH: number | string;
        enableContainerHeightFollowWindow: boolean;
        enablePlaceholder: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<{
    containerWidth?: number;
    containerHeight?: number;
} & {
    enableWidthAdjust?: boolean;
    containerWidthDefault?: number | string;
    containerMinWidth?: number;
    containerMaxWidth?: number;
    adjustWidthElW?: number | string;
    enableHeightAdjust?: boolean;
    containerHeightDefault?: number | string;
    containerMinHeight?: number;
    containerMaxHeight?: number;
    adjustHeightElH?: number | string;
    enableContainerHeightFollowWindow?: boolean;
    enablePlaceholder?: boolean;
}> & Readonly<{
    "onWidth-to-min"?: ((containerWidth: number) => any) | undefined;
    "onWidth-to-max"?: ((containerWidth: number) => any) | undefined;
    "onHeight-to-min"?: ((containerHeight: number) => any) | undefined;
    "onHeight-to-max"?: ((containerHeight: number) => any) | undefined;
    "onUpdate:containerWidth"?: ((containerWidth: number) => any) | undefined;
    "onUpdate:containerHeight"?: ((containerHeight: number) => any) | undefined;
}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    "update:containerWidth": (containerWidth: number) => any;
    "update:containerHeight": (containerHeight: number) => any;
} & {
    "width-to-min": (containerWidth: number) => any;
    "width-to-max": (containerWidth: number) => any;
    "height-to-min": (containerHeight: number) => any;
    "height-to-max": (containerHeight: number) => any;
}, string, {
    enableWidthAdjust: boolean;
    containerWidthDefault: number | string;
    containerMinWidth: number;
    containerMaxWidth: number;
    adjustWidthElW: number | string;
    enableHeightAdjust: boolean;
    containerHeightDefault: number | string;
    containerMinHeight: number;
    containerMaxHeight: number;
    adjustHeightElH: number | string;
    enableContainerHeightFollowWindow: boolean;
    enablePlaceholder: boolean;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
});
export declare const StAdjustableContainerRegister: import('vue').Plugin;
export declare const StTimeline1: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{
        initialIndex?: number;
        enableMousewheelSwitch?: boolean;
        speed?: number;
        transitionFun?: string;
        transitionDelay?: number | string;
        background?: string;
        timelineData: string[];
        timelinePerView?: number;
        timelinePerViewReactScreen?: number;
        timelineOffset?: number;
        timelineColor?: string;
        timelineColorActive?: string;
        timelineTextMaxLine?: number;
        timelineSpeed?: number;
        timelineTransitionFun?: string;
        timelineTransitionDelay?: number | string;
        enableTimelineNav?: boolean;
        needReactScreenWidth?: number;
    }> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
        background: string;
        transitionDelay: number | string;
        transitionFun: string;
        speed: number;
        initialIndex: number;
        enableMousewheelSwitch: boolean;
        timelinePerView: number;
        timelinePerViewReactScreen: number;
        timelineOffset: number;
        timelineColor: string;
        timelineColorActive: string;
        timelineTextMaxLine: number;
        timelineSpeed: number;
        timelineTransitionFun: string;
        timelineTransitionDelay: number | string;
        enableTimelineNav: boolean;
        needReactScreenWidth: number;
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<{
        initialIndex?: number;
        enableMousewheelSwitch?: boolean;
        speed?: number;
        transitionFun?: string;
        transitionDelay?: number | string;
        background?: string;
        timelineData: string[];
        timelinePerView?: number;
        timelinePerViewReactScreen?: number;
        timelineOffset?: number;
        timelineColor?: string;
        timelineColorActive?: string;
        timelineTextMaxLine?: number;
        timelineSpeed?: number;
        timelineTransitionFun?: string;
        timelineTransitionDelay?: number | string;
        enableTimelineNav?: boolean;
        needReactScreenWidth?: number;
    }> & Readonly<{}>, {}, {}, {}, {}, {
        background: string;
        transitionDelay: number | string;
        transitionFun: string;
        speed: number;
        initialIndex: number;
        enableMousewheelSwitch: boolean;
        timelinePerView: number;
        timelinePerViewReactScreen: number;
        timelineOffset: number;
        timelineColor: string;
        timelineColorActive: string;
        timelineTextMaxLine: number;
        timelineSpeed: number;
        timelineTransitionFun: string;
        timelineTransitionDelay: number | string;
        enableTimelineNav: boolean;
        needReactScreenWidth: number;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<{
    initialIndex?: number;
    enableMousewheelSwitch?: boolean;
    speed?: number;
    transitionFun?: string;
    transitionDelay?: number | string;
    background?: string;
    timelineData: string[];
    timelinePerView?: number;
    timelinePerViewReactScreen?: number;
    timelineOffset?: number;
    timelineColor?: string;
    timelineColorActive?: string;
    timelineTextMaxLine?: number;
    timelineSpeed?: number;
    timelineTransitionFun?: string;
    timelineTransitionDelay?: number | string;
    enableTimelineNav?: boolean;
    needReactScreenWidth?: number;
}> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
    background: string;
    transitionDelay: number | string;
    transitionFun: string;
    speed: number;
    initialIndex: number;
    enableMousewheelSwitch: boolean;
    timelinePerView: number;
    timelinePerViewReactScreen: number;
    timelineOffset: number;
    timelineColor: string;
    timelineColorActive: string;
    timelineTextMaxLine: number;
    timelineSpeed: number;
    timelineTransitionFun: string;
    timelineTransitionDelay: number | string;
    enableTimelineNav: boolean;
    needReactScreenWidth: number;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
});
export declare const StTimelineItem1: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{
        idx: number;
        bgImgSrc?: string;
        title?: string;
        desc?: string;
        color?: string;
        animationSpeed?: number | string;
        titleEnterDelay?: number | string;
        descEnterDelay?: number | string;
        titleMaxLine?: number;
        descMaxLine?: number;
    }> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
        title: string;
        desc: string;
        color: string;
        bgImgSrc: string;
        animationSpeed: number | string;
        titleEnterDelay: number | string;
        descEnterDelay: number | string;
        titleMaxLine: number;
        descMaxLine: number;
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<{
        idx: number;
        bgImgSrc?: string;
        title?: string;
        desc?: string;
        color?: string;
        animationSpeed?: number | string;
        titleEnterDelay?: number | string;
        descEnterDelay?: number | string;
        titleMaxLine?: number;
        descMaxLine?: number;
    }> & Readonly<{}>, {}, {}, {}, {}, {
        title: string;
        desc: string;
        color: string;
        bgImgSrc: string;
        animationSpeed: number | string;
        titleEnterDelay: number | string;
        descEnterDelay: number | string;
        titleMaxLine: number;
        descMaxLine: number;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<{
    idx: number;
    bgImgSrc?: string;
    title?: string;
    desc?: string;
    color?: string;
    animationSpeed?: number | string;
    titleEnterDelay?: number | string;
    descEnterDelay?: number | string;
    titleMaxLine?: number;
    descMaxLine?: number;
}> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
    title: string;
    desc: string;
    color: string;
    bgImgSrc: string;
    animationSpeed: number | string;
    titleEnterDelay: number | string;
    descEnterDelay: number | string;
    titleMaxLine: number;
    descMaxLine: number;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        suffix?(_: {
            isInitial: unknown;
            isChange: unknown;
            enterIdx: unknown;
            leaveIdx: unknown;
            currentIdx: unknown;
        }): any;
    };
});
export declare const StTimeline1Register: import('vue').Plugin;
export declare const StTimelineItem1Register: import('vue').Plugin;
export declare const StGradientBg1: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{
        colors?: Array<string>;
        size?: string | number;
        speed?: number | string;
    }> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
        size: string | number;
        speed: number | string;
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<{
        colors?: Array<string>;
        size?: string | number;
        speed?: number | string;
    }> & Readonly<{}>, {}, {}, {}, {}, {
        size: string | number;
        speed: number | string;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<{
    colors?: Array<string>;
    size?: string | number;
    speed?: number | string;
}> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
    size: string | number;
    speed: number | string;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
});
export declare const StGradientBg1Register: import('vue').Plugin;
export declare const StGradientBg2: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{
        bgColor?: string;
        gradientColors?: string[];
        speed?: number | string;
        blur?: boolean;
    }> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
        blur: boolean;
        speed: number | string;
        bgColor: string;
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<{
        bgColor?: string;
        gradientColors?: string[];
        speed?: number | string;
        blur?: boolean;
    }> & Readonly<{}>, {}, {}, {}, {}, {
        blur: boolean;
        speed: number | string;
        bgColor: string;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<{
    bgColor?: string;
    gradientColors?: string[];
    speed?: number | string;
    blur?: boolean;
}> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
    blur: boolean;
    speed: number | string;
    bgColor: string;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
        default?(_: {}): any;
    };
});
export declare const StGradientBg2Register: import('vue').Plugin;
export declare const StInfoCard1: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{
        width?: string | number;
        height?: string | number;
        padding?: string | number;
        background?: string;
        imgSrc?: string;
        imgWidth?: string | number;
        imgHeight?: string | number;
        imgFillMode?: "cover" | "contain" | "none" | "scale-down";
        imgPosition?: string;
        imgSpeed?: number | string;
        imgDelay?: number | string;
        title?: string;
        titleFontSize?: string | number;
        content?: string;
        contentSpeed?: number | string;
        contentDelay?: number | string;
    }> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
        title: string;
        width: string | number;
        height: string | number;
        background: string;
        content: string;
        padding: string | number;
        imgSrc: string;
        imgWidth: string | number;
        imgHeight: string | number;
        imgFillMode: "cover" | "contain" | "none" | "scale-down";
        imgPosition: string;
        imgSpeed: number | string;
        imgDelay: number | string;
        titleFontSize: string | number;
        contentSpeed: number | string;
        contentDelay: number | string;
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<{
        width?: string | number;
        height?: string | number;
        padding?: string | number;
        background?: string;
        imgSrc?: string;
        imgWidth?: string | number;
        imgHeight?: string | number;
        imgFillMode?: "cover" | "contain" | "none" | "scale-down";
        imgPosition?: string;
        imgSpeed?: number | string;
        imgDelay?: number | string;
        title?: string;
        titleFontSize?: string | number;
        content?: string;
        contentSpeed?: number | string;
        contentDelay?: number | string;
    }> & Readonly<{}>, {}, {}, {}, {}, {
        title: string;
        width: string | number;
        height: string | number;
        background: string;
        content: string;
        padding: string | number;
        imgSrc: string;
        imgWidth: string | number;
        imgHeight: string | number;
        imgFillMode: "cover" | "contain" | "none" | "scale-down";
        imgPosition: string;
        imgSpeed: number | string;
        imgDelay: number | string;
        titleFontSize: string | number;
        contentSpeed: number | string;
        contentDelay: number | string;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<{
    width?: string | number;
    height?: string | number;
    padding?: string | number;
    background?: string;
    imgSrc?: string;
    imgWidth?: string | number;
    imgHeight?: string | number;
    imgFillMode?: "cover" | "contain" | "none" | "scale-down";
    imgPosition?: string;
    imgSpeed?: number | string;
    imgDelay?: number | string;
    title?: string;
    titleFontSize?: string | number;
    content?: string;
    contentSpeed?: number | string;
    contentDelay?: number | string;
}> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
    title: string;
    width: string | number;
    height: string | number;
    background: string;
    content: string;
    padding: string | number;
    imgSrc: string;
    imgWidth: string | number;
    imgHeight: string | number;
    imgFillMode: "cover" | "contain" | "none" | "scale-down";
    imgPosition: string;
    imgSpeed: number | string;
    imgDelay: number | string;
    titleFontSize: string | number;
    contentSpeed: number | string;
    contentDelay: number | string;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        img?(_: {}): any;
        title?(_: {}): any;
        content?(_: {}): any;
    };
});
export declare const StInfoCard1Register: import('vue').Plugin;
export declare const StInfoCard2: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{
        width?: string | number;
        height?: string | number;
        padding?: string | number;
        imgSrc?: string;
        imgWidth?: string | number;
        imgHeight?: string | number;
        imgSizeHover?: string | number;
        imgFillMode?: "cover" | "contain" | "none" | "scale-down";
        imgPosition?: string;
        imgSpeed?: number | string;
        imgDelay?: number | string;
        title?: string;
        titleFontSize?: string | number;
        content?: string;
        contentSpeed?: number | string;
        contentDelay?: number | string;
    }> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
        title: string;
        width: string | number;
        height: string | number;
        content: string;
        padding: string | number;
        imgSrc: string;
        imgWidth: string | number;
        imgHeight: string | number;
        imgFillMode: "cover" | "contain" | "none" | "scale-down";
        imgPosition: string;
        imgSpeed: number | string;
        imgDelay: number | string;
        titleFontSize: string | number;
        contentSpeed: number | string;
        contentDelay: number | string;
        imgSizeHover: string | number;
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<{
        width?: string | number;
        height?: string | number;
        padding?: string | number;
        imgSrc?: string;
        imgWidth?: string | number;
        imgHeight?: string | number;
        imgSizeHover?: string | number;
        imgFillMode?: "cover" | "contain" | "none" | "scale-down";
        imgPosition?: string;
        imgSpeed?: number | string;
        imgDelay?: number | string;
        title?: string;
        titleFontSize?: string | number;
        content?: string;
        contentSpeed?: number | string;
        contentDelay?: number | string;
    }> & Readonly<{}>, {}, {}, {}, {}, {
        title: string;
        width: string | number;
        height: string | number;
        content: string;
        padding: string | number;
        imgSrc: string;
        imgWidth: string | number;
        imgHeight: string | number;
        imgFillMode: "cover" | "contain" | "none" | "scale-down";
        imgPosition: string;
        imgSpeed: number | string;
        imgDelay: number | string;
        titleFontSize: string | number;
        contentSpeed: number | string;
        contentDelay: number | string;
        imgSizeHover: string | number;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<{
    width?: string | number;
    height?: string | number;
    padding?: string | number;
    imgSrc?: string;
    imgWidth?: string | number;
    imgHeight?: string | number;
    imgSizeHover?: string | number;
    imgFillMode?: "cover" | "contain" | "none" | "scale-down";
    imgPosition?: string;
    imgSpeed?: number | string;
    imgDelay?: number | string;
    title?: string;
    titleFontSize?: string | number;
    content?: string;
    contentSpeed?: number | string;
    contentDelay?: number | string;
}> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
    title: string;
    width: string | number;
    height: string | number;
    content: string;
    padding: string | number;
    imgSrc: string;
    imgWidth: string | number;
    imgHeight: string | number;
    imgFillMode: "cover" | "contain" | "none" | "scale-down";
    imgPosition: string;
    imgSpeed: number | string;
    imgDelay: number | string;
    titleFontSize: string | number;
    contentSpeed: number | string;
    contentDelay: number | string;
    imgSizeHover: string | number;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        img?(_: {}): any;
        title?(_: {}): any;
        content?(_: {}): any;
    };
});
export declare const StInfoCard2Register: import('vue').Plugin;
export declare const StDynamicBorder1: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{
        width?: string | number;
        height?: string | number;
        backgroundColor?: string;
        borderColorList?: Array<string>;
        customBorderColor?: boolean;
        borderColor?: string;
        borderWidth?: string | number;
        borderRadius?: string | number;
        rotate?: boolean;
        speed?: string | number;
        shine?: boolean;
        shineRange?: string | number;
        shineBrightness?: number;
        hover?: boolean;
        hoverPause?: boolean;
    }> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
        width: string | number;
        height: string | number;
        backgroundColor: string;
        borderColor: string;
        borderRadius: string | number;
        borderWidth: string | number;
        rotate: boolean;
        hover: boolean;
        speed: string | number;
        customBorderColor: boolean;
        shine: boolean;
        shineRange: string | number;
        shineBrightness: number;
        hoverPause: boolean;
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<{
        width?: string | number;
        height?: string | number;
        backgroundColor?: string;
        borderColorList?: Array<string>;
        customBorderColor?: boolean;
        borderColor?: string;
        borderWidth?: string | number;
        borderRadius?: string | number;
        rotate?: boolean;
        speed?: string | number;
        shine?: boolean;
        shineRange?: string | number;
        shineBrightness?: number;
        hover?: boolean;
        hoverPause?: boolean;
    }> & Readonly<{}>, {}, {}, {}, {}, {
        width: string | number;
        height: string | number;
        backgroundColor: string;
        borderColor: string;
        borderRadius: string | number;
        borderWidth: string | number;
        rotate: boolean;
        hover: boolean;
        speed: string | number;
        customBorderColor: boolean;
        shine: boolean;
        shineRange: string | number;
        shineBrightness: number;
        hoverPause: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<{
    width?: string | number;
    height?: string | number;
    backgroundColor?: string;
    borderColorList?: Array<string>;
    customBorderColor?: boolean;
    borderColor?: string;
    borderWidth?: string | number;
    borderRadius?: string | number;
    rotate?: boolean;
    speed?: string | number;
    shine?: boolean;
    shineRange?: string | number;
    shineBrightness?: number;
    hover?: boolean;
    hoverPause?: boolean;
}> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
    width: string | number;
    height: string | number;
    backgroundColor: string;
    borderColor: string;
    borderRadius: string | number;
    borderWidth: string | number;
    rotate: boolean;
    hover: boolean;
    speed: string | number;
    customBorderColor: boolean;
    shine: boolean;
    shineRange: string | number;
    shineBrightness: number;
    hoverPause: boolean;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
});
export declare const StDynamicBorder1Register: import('vue').Plugin;
export declare const StGhostText: import('vue').DefineComponent<{
    content: string;
    horizontalAlign?: "left" | "center" | "right";
    verticalAlign?: "top" | "center" | "bottom";
    speed?: number;
    delay?: number;
}, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
    content: string;
    horizontalAlign?: "left" | "center" | "right";
    verticalAlign?: "top" | "center" | "bottom";
    speed?: number;
    delay?: number;
}> & Readonly<{}>, {
    verticalAlign: "top" | "center" | "bottom";
    speed: number;
    delay: number;
    horizontalAlign: "left" | "center" | "right";
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
export declare const StGhostTextRegister: import('vue').Plugin;
export declare const StGhostTextHover: import('vue').DefineComponent<{
    content: string;
    horizontalAlign?: "left" | "center" | "right";
    verticalAlign?: "top" | "center" | "bottom";
    speed?: number;
    delay?: number;
}, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
    content: string;
    horizontalAlign?: "left" | "center" | "right";
    verticalAlign?: "top" | "center" | "bottom";
    speed?: number;
    delay?: number;
}> & Readonly<{}>, {
    verticalAlign: "top" | "center" | "bottom";
    speed: number;
    delay: number;
    horizontalAlign: "left" | "center" | "right";
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
export declare const StGhostTextHoverRegister: import('vue').Plugin;
export declare const St3DTiltContainer: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{
        width?: number | string;
        height?: number | string;
        max?: number;
        startX?: number;
        startY?: number;
        perspective?: number;
        scale?: number;
        speed?: number;
        transition?: boolean;
        axis?: "x" | "y" | null;
        reset?: boolean;
        resetToStart?: boolean;
        easing?: string;
        glare?: boolean;
        maxGlare?: number;
        gyroscope?: boolean;
        gyroscopeMinAngleX?: number;
        gyroscopeMaxAngleX?: number;
        gyroscopeMinAngleY?: number;
        gyroscopeMaxAngleY?: number;
        fullPageListening?: boolean;
    }> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
        width: number | string;
        height: number | string;
        perspective: number;
        scale: number;
        transition: boolean;
        reset: boolean;
        speed: number;
        startX: number;
        startY: number;
        max: number;
        axis: "x" | "y" | null;
        resetToStart: boolean;
        easing: string;
        glare: boolean;
        maxGlare: number;
        gyroscope: boolean;
        gyroscopeMinAngleX: number;
        gyroscopeMaxAngleX: number;
        gyroscopeMinAngleY: number;
        gyroscopeMaxAngleY: number;
        fullPageListening: boolean;
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<{
        width?: number | string;
        height?: number | string;
        max?: number;
        startX?: number;
        startY?: number;
        perspective?: number;
        scale?: number;
        speed?: number;
        transition?: boolean;
        axis?: "x" | "y" | null;
        reset?: boolean;
        resetToStart?: boolean;
        easing?: string;
        glare?: boolean;
        maxGlare?: number;
        gyroscope?: boolean;
        gyroscopeMinAngleX?: number;
        gyroscopeMaxAngleX?: number;
        gyroscopeMinAngleY?: number;
        gyroscopeMaxAngleY?: number;
        fullPageListening?: boolean;
    }> & Readonly<{}>, {}, {}, {}, {}, {
        width: number | string;
        height: number | string;
        perspective: number;
        scale: number;
        transition: boolean;
        reset: boolean;
        speed: number;
        startX: number;
        startY: number;
        max: number;
        axis: "x" | "y" | null;
        resetToStart: boolean;
        easing: string;
        glare: boolean;
        maxGlare: number;
        gyroscope: boolean;
        gyroscopeMinAngleX: number;
        gyroscopeMaxAngleX: number;
        gyroscopeMinAngleY: number;
        gyroscopeMaxAngleY: number;
        fullPageListening: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<{
    width?: number | string;
    height?: number | string;
    max?: number;
    startX?: number;
    startY?: number;
    perspective?: number;
    scale?: number;
    speed?: number;
    transition?: boolean;
    axis?: "x" | "y" | null;
    reset?: boolean;
    resetToStart?: boolean;
    easing?: string;
    glare?: boolean;
    maxGlare?: number;
    gyroscope?: boolean;
    gyroscopeMinAngleX?: number;
    gyroscopeMaxAngleX?: number;
    gyroscopeMinAngleY?: number;
    gyroscopeMaxAngleY?: number;
    fullPageListening?: boolean;
}> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
    width: number | string;
    height: number | string;
    perspective: number;
    scale: number;
    transition: boolean;
    reset: boolean;
    speed: number;
    startX: number;
    startY: number;
    max: number;
    axis: "x" | "y" | null;
    resetToStart: boolean;
    easing: string;
    glare: boolean;
    maxGlare: number;
    gyroscope: boolean;
    gyroscopeMinAngleX: number;
    gyroscopeMaxAngleX: number;
    gyroscopeMinAngleY: number;
    gyroscopeMaxAngleY: number;
    fullPageListening: boolean;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
});
export declare const St3DTiltContainerRegister: import('vue').Plugin;
export declare const StSwiper: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{
        activeSlideIdx?: number;
    } & {
        width?: string | number;
        height?: string | number;
        initialSlide?: number;
        direction?: "horizontal" | "vertical";
        slidesPerView?: number;
        slidesOffsetBefore?: number;
        slidesOffsetAfter?: number;
        mousewheel?: boolean;
        navigation?: boolean;
        navDirection?: "horizontal" | "vertical";
        navAlign?: "center" | "start" | "end";
        navSize?: string | number;
        navColor?: string;
        navDisabledColor?: string;
        transitionFun?: string;
        transitionSpeed?: number;
        transitionDelay?: number | string;
        controlSwiper?: import('swiper/types').Swiper | import('swiper/types').Swiper[];
        swiperOverflow?: string;
        enableSlideClick?: boolean;
        slideClickHandler?: (swiper: import('swiper/types').Swiper) => void;
    }> & Readonly<{
        "onUpdate:activeSlideIdx"?: ((activeSlideIdx: number) => any) | undefined;
    }>, {
        swiper: import('vue').Ref<{
            params: {
                modules?: import('swiper/types').SwiperModule[] | undefined;
                injectStyles?: string[] | undefined;
                injectStylesUrls?: string[] | undefined;
                init?: boolean | undefined;
                enabled?: boolean | undefined;
                updateOnWindowResize?: boolean | undefined;
                resizeObserver?: boolean | undefined;
                initialSlide?: number | undefined;
                direction?: ("horizontal" | "vertical") | undefined;
                oneWayMovement?: boolean | undefined;
                swiperElementNodeName?: string | undefined;
                speed?: number | undefined;
                setWrapperSize?: boolean | undefined;
                virtualTranslate?: boolean | undefined;
                width?: (number | null) | undefined;
                height?: (number | null) | undefined;
                autoHeight?: boolean | undefined;
                roundLengths?: boolean | undefined;
                nested?: boolean | undefined;
                createElements?: boolean | undefined;
                eventsPrefix?: string | undefined;
                focusableElements?: string | undefined;
                uniqueNavElements?: boolean | undefined;
                effect?: ("slide" | "fade" | "cube" | "coverflow" | "flip" | "creative" | "cards" | string) | undefined;
                runCallbacksOnInit?: boolean | undefined;
                watchOverflow?: boolean | undefined;
                userAgent?: (string | null) | undefined;
                url?: (string | null) | undefined;
                on?: {
                    init?: ((swiper: import('swiper/types').Swiper) => any) | undefined;
                    beforeDestroy?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slidesUpdated?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideChangeTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideChangeTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideNextTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideNextTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slidePrevTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slidePrevTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    transitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    transitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    touchStart?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    touchMove?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    touchMoveOpposite?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    sliderMove?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    touchEnd?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    click?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    tap?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    doubleTap?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    progress?: ((swiper: import('swiper/types').Swiper, progress: number) => void) | undefined;
                    reachBeginning?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    reachEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    toEdge?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    fromEdge?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    setTranslate?: ((swiper: import('swiper/types').Swiper, translate: number) => void) | undefined;
                    setTransition?: ((swiper: import('swiper/types').Swiper, transition: number) => void) | undefined;
                    resize?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    observerUpdate?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    beforeLoopFix?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    loopFix?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    breakpoint?: ((swiper: import('swiper/types').Swiper, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                    _beforeBreakpoint?: ((swiper: import('swiper/types').Swiper, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                    _containerClasses?: ((swiper: import('swiper/types').Swiper, classNames: string) => void) | undefined;
                    _slideClass?: ((swiper: import('swiper/types').Swiper, slideEl: HTMLElement, classNames: string) => void) | undefined;
                    _slideClasses?: ((swiper: import('swiper/types').Swiper, slides: {
                        slideEl: HTMLElement;
                        classNames: string;
                        index: number;
                    }[]) => void) | undefined;
                    _swiper?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    _freeModeNoMomentumRelease?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    activeIndexChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    snapIndexChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    realIndexChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    afterInit?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    beforeInit?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    beforeResize?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    beforeSlideChangeStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    beforeTransitionStart?: ((swiper: import('swiper/types').Swiper, speed: number, internal: any) => void) | undefined;
                    changeDirection?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    doubleClick?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    destroy?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    momentumBounce?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    orientationchange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideResetTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideResetTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    sliderFirstMove?: ((swiper: import('swiper/types').Swiper, event: TouchEvent) => void) | undefined;
                    slidesLengthChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slidesGridLengthChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    snapGridLengthChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    update?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    lock?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    unlock?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    autoplayStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    autoplayStop?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    autoplayPause?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    autoplayResume?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    autoplayTimeLeft?: ((swiper: import('swiper/types').Swiper, timeLeft: number, percentage: number) => void) | undefined;
                    autoplay?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    hashChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    hashSet?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    keyPress?: ((swiper: import('swiper/types').Swiper, keyCode: string) => void) | undefined;
                    scroll?: ((swiper: import('swiper/types').Swiper, event: WheelEvent) => void) | undefined;
                    navigationHide?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    navigationShow?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    navigationPrev?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    navigationNext?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    paginationRender?: ((swiper: import('swiper/types').Swiper, paginationEl: HTMLElement) => void) | undefined;
                    paginationUpdate?: ((swiper: import('swiper/types').Swiper, paginationEl: HTMLElement) => void) | undefined;
                    paginationHide?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    paginationShow?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    scrollbarDragStart?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    scrollbarDragMove?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    scrollbarDragEnd?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    zoomChange?: ((swiper: import('swiper/types').Swiper, scale: number, imageEl: HTMLElement, slideEl: HTMLElement) => void) | undefined;
                } | undefined;
                onAny?: ((handler: (eventName: string, ...args: any[]) => void) => void) | undefined;
                cssMode?: boolean | undefined;
                spaceBetween?: (number | string) | undefined;
                slidesPerView?: (number | "auto") | undefined;
                maxBackfaceHiddenSlides?: number | undefined;
                slidesPerGroup?: number | undefined;
                slidesPerGroupSkip?: number | undefined;
                slidesPerGroupAuto?: boolean | undefined;
                centeredSlides?: boolean | undefined;
                centeredSlidesBounds?: boolean | undefined;
                slidesOffsetBefore?: number | undefined;
                slidesOffsetAfter?: number | undefined;
                normalizeSlideIndex?: boolean | undefined;
                centerInsufficientSlides?: boolean | undefined;
                grabCursor?: boolean | undefined;
                touchEventsTarget?: ("container" | "wrapper") | undefined;
                touchRatio?: number | undefined;
                touchAngle?: number | undefined;
                simulateTouch?: boolean | undefined;
                shortSwipes?: boolean | undefined;
                longSwipes?: boolean | undefined;
                longSwipesRatio?: number | undefined;
                longSwipesMs?: number | undefined;
                followFinger?: boolean | undefined;
                allowTouchMove?: boolean | undefined;
                threshold?: number | undefined;
                touchStartPreventDefault?: boolean | undefined;
                touchStartForcePreventDefault?: boolean | undefined;
                touchMoveStopPropagation?: boolean | undefined;
                edgeSwipeDetection?: (boolean | string) | undefined;
                edgeSwipeThreshold?: number | undefined;
                touchReleaseOnEdges?: boolean | undefined;
                passiveListeners?: boolean | undefined;
                resistance?: boolean | undefined;
                resistanceRatio?: number | undefined;
                preventInteractionOnTransition?: boolean | undefined;
                allowSlidePrev?: boolean | undefined;
                allowSlideNext?: boolean | undefined;
                noSwiping?: boolean | undefined;
                noSwipingClass?: string | undefined;
                noSwipingSelector?: string | undefined;
                swipeHandler?: HTMLElement | {
                    readonly [x: number]: string;
                    toString: () => string;
                    charAt: (pos: number) => string;
                    charCodeAt: (index: number) => number;
                    concat: (...strings: string[]) => string;
                    indexOf: (searchString: string, position?: number) => number;
                    lastIndexOf: (searchString: string, position?: number) => number;
                    localeCompare: {
                        (that: string): number;
                        (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                        (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                    };
                    match: {
                        (regexp: string | RegExp): RegExpMatchArray | null;
                        (matcher: {
                            [Symbol.match](string: string): RegExpMatchArray | null;
                        }): RegExpMatchArray | null;
                    };
                    replace: {
                        (searchValue: string | RegExp, replaceValue: string): string;
                        (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replaceValue: string): string;
                        }, replaceValue: string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                        }, replacer: (substring: string, ...args: any[]) => string): string;
                    };
                    search: {
                        (regexp: string | RegExp): number;
                        (searcher: {
                            [Symbol.search](string: string): number;
                        }): number;
                    };
                    slice: (start?: number, end?: number) => string;
                    split: {
                        (separator: string | RegExp, limit?: number): string[];
                        (splitter: {
                            [Symbol.split](string: string, limit?: number): string[];
                        }, limit?: number): string[];
                    };
                    substring: (start: number, end?: number) => string;
                    toLowerCase: () => string;
                    toLocaleLowerCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    toUpperCase: () => string;
                    toLocaleUpperCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    trim: () => string;
                    readonly length: number;
                    substr: (from: number, length?: number) => string;
                    valueOf: () => string;
                    codePointAt: (pos: number) => number | undefined;
                    includes: (searchString: string, position?: number) => boolean;
                    endsWith: (searchString: string, endPosition?: number) => boolean;
                    normalize: {
                        (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                        (form?: string): string;
                    };
                    repeat: (count: number) => string;
                    startsWith: (searchString: string, position?: number) => boolean;
                    anchor: (name: string) => string;
                    big: () => string;
                    blink: () => string;
                    bold: () => string;
                    fixed: () => string;
                    fontcolor: (color: string) => string;
                    fontsize: {
                        (size: number): string;
                        (size: string): string;
                    };
                    italics: () => string;
                    link: (url: string) => string;
                    small: () => string;
                    strike: () => string;
                    sub: () => string;
                    sup: () => string;
                    padStart: (maxLength: number, fillString?: string) => string;
                    padEnd: (maxLength: number, fillString?: string) => string;
                    trimEnd: () => string;
                    trimStart: () => string;
                    trimLeft: () => string;
                    trimRight: () => string;
                    matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                    [Symbol.iterator]: () => StringIterator<string>;
                    at: (index: number) => string | undefined;
                } | null | undefined;
                preventClicks?: boolean | undefined;
                preventClicksPropagation?: boolean | undefined;
                slideToClickedSlide?: boolean | undefined;
                watchSlidesProgress?: boolean | undefined;
                loop?: boolean | undefined;
                loopAddBlankSlides?: boolean | undefined;
                loopAdditionalSlides?: number | undefined;
                loopPreventsSliding?: boolean | undefined;
                rewind?: boolean | undefined;
                breakpoints?: {
                    [width: number]: import('swiper/types').SwiperOptions;
                    [ratio: string]: import('swiper/types').SwiperOptions;
                } | undefined;
                breakpointsBase?: ("window" | "container") | undefined;
                observer?: boolean | undefined;
                observeSlideChildren?: boolean | undefined;
                observeParents?: boolean | undefined;
                containerModifierClass?: string | undefined;
                slideClass?: string | undefined;
                slideActiveClass?: string | undefined;
                slideVisibleClass?: string | undefined;
                slideFullyVisibleClass?: string | undefined;
                slideBlankClass?: string | undefined;
                slideNextClass?: string | undefined;
                slidePrevClass?: string | undefined;
                wrapperClass?: string | undefined;
                lazyPreloaderClass?: string | undefined;
                lazyPreloadPrevNext?: number | undefined;
                a11y?: {
                    enabled?: boolean | undefined;
                    prevSlideMessage?: string | undefined;
                    nextSlideMessage?: string | undefined;
                    firstSlideMessage?: string | undefined;
                    lastSlideMessage?: string | undefined;
                    paginationBulletMessage?: string | undefined;
                    notificationClass?: string | undefined;
                    containerMessage?: (string | null) | undefined;
                    containerRoleDescriptionMessage?: (string | null) | undefined;
                    containerRole?: (string | null) | undefined;
                    itemRoleDescriptionMessage?: (string | null) | undefined;
                    slideLabelMessage?: string | undefined;
                    slideRole?: string | undefined;
                    id?: (string | number | null) | undefined;
                    scrollOnFocus?: boolean | undefined;
                } | undefined;
                autoplay?: boolean | {
                    delay?: number | undefined;
                    stopOnLastSlide?: boolean | undefined;
                    disableOnInteraction?: boolean | undefined;
                    reverseDirection?: boolean | undefined;
                    waitForTransition?: boolean | undefined;
                    pauseOnMouseEnter?: boolean | undefined;
                } | undefined;
                controller?: {
                    control?: string | HTMLElement | any | any[] | null | undefined;
                    inverse?: boolean | undefined;
                    by?: ("slide" | "container") | undefined;
                } | undefined;
                coverflowEffect?: {
                    slideShadows?: boolean | undefined;
                    rotate?: number | undefined;
                    stretch?: number | undefined;
                    depth?: number | undefined;
                    scale?: number | undefined;
                    modifier?: number | undefined;
                } | undefined;
                cubeEffect?: {
                    slideShadows?: boolean | undefined;
                    shadow?: boolean | undefined;
                    shadowOffset?: number | undefined;
                    shadowScale?: number | undefined;
                } | undefined;
                fadeEffect?: {
                    crossFade?: boolean | undefined;
                } | undefined;
                flipEffect?: {
                    slideShadows?: boolean | undefined;
                    limitRotation?: boolean | undefined;
                } | undefined;
                creativeEffect?: {
                    prev?: {
                        translate?: (string | number)[] | undefined;
                        rotate?: number[] | undefined;
                        opacity?: number | undefined;
                        scale?: number | undefined;
                        shadow?: boolean | undefined;
                        origin?: string | undefined;
                    } | undefined;
                    next?: {
                        translate?: (string | number)[] | undefined;
                        rotate?: number[] | undefined;
                        opacity?: number | undefined;
                        scale?: number | undefined;
                        shadow?: boolean | undefined;
                        origin?: string | undefined;
                    } | undefined;
                    limitProgress?: number | undefined;
                    shadowPerProgress?: boolean | undefined;
                    progressMultiplier?: number | undefined;
                    perspective?: boolean | undefined;
                } | undefined;
                cardsEffect?: {
                    slideShadows?: boolean | undefined;
                    rotate?: boolean | undefined;
                    perSlideRotate?: number | undefined;
                    perSlideOffset?: number | undefined;
                } | undefined;
                hashNavigation?: boolean | {
                    watchState?: boolean | undefined;
                    replaceState?: boolean | undefined;
                    getSlideIndex?: ((swiper: import('swiper/types').Swiper, hash: string) => number) | undefined;
                } | undefined;
                history?: boolean | {
                    enabled?: boolean | undefined;
                    root?: string | undefined;
                    replaceState?: boolean | undefined;
                    key?: string | undefined;
                    keepQuery?: boolean | undefined;
                } | undefined;
                keyboard?: boolean | {
                    enabled?: boolean | undefined;
                    onlyInViewport?: boolean | undefined;
                    pageUpDown?: boolean | undefined;
                } | undefined;
                mousewheel?: boolean | {
                    enabled?: boolean | undefined;
                    forceToAxis?: boolean | undefined;
                    releaseOnEdges?: boolean | undefined;
                    invert?: boolean | undefined;
                    sensitivity?: number | undefined;
                    eventsTarget?: HTMLElement | "container" | "wrapper" | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | undefined;
                    thresholdDelta?: (number | null) | undefined;
                    thresholdTime?: (number | null) | undefined;
                    noMousewheelClass?: string | undefined;
                } | undefined;
                navigation?: boolean | {
                    enabled?: boolean | undefined;
                    nextEl?: HTMLElement | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | null | undefined;
                    prevEl?: HTMLElement | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | null | undefined;
                    hideOnClick?: boolean | undefined;
                    disabledClass?: string | undefined;
                    hiddenClass?: string | undefined;
                    lockClass?: string | undefined;
                    navigationDisabledClass?: string | undefined;
                } | undefined;
                pagination?: boolean | {
                    enabled?: boolean | undefined;
                    el?: HTMLElement | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | null | undefined;
                    type?: ("bullets" | "fraction" | "progressbar" | "custom") | undefined;
                    bulletElement?: string | undefined;
                    dynamicBullets?: boolean | undefined;
                    dynamicMainBullets?: number | undefined;
                    hideOnClick?: boolean | undefined;
                    clickable?: boolean | undefined;
                    progressbarOpposite?: boolean | undefined;
                    formatFractionCurrent?: ((number: number) => number | string) | undefined;
                    formatFractionTotal?: ((number: number) => number | string) | undefined;
                    renderBullet?: ((index: number, className: string) => string) | undefined;
                    renderFraction?: ((currentClass: string, totalClass: string) => string) | undefined;
                    renderProgressbar?: ((progressbarFillClass: string) => string) | undefined;
                    renderCustom?: ((swiper: import('swiper/types').Swiper, current: number, total: number) => string) | undefined;
                    bulletClass?: string | undefined;
                    bulletActiveClass?: string | undefined;
                    modifierClass?: string | undefined;
                    currentClass?: string | undefined;
                    totalClass?: string | undefined;
                    hiddenClass?: string | undefined;
                    progressbarFillClass?: string | undefined;
                    progressbarOppositeClass?: string | undefined;
                    clickableClass?: string | undefined;
                    lockClass?: string | undefined;
                    horizontalClass?: string | undefined;
                    verticalClass?: string | undefined;
                    paginationDisabledClass?: string | undefined;
                } | undefined;
                parallax?: boolean | {
                    enabled?: boolean | undefined;
                } | undefined;
                scrollbar?: boolean | {
                    enabled?: boolean | undefined;
                    el?: HTMLElement | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | null | undefined;
                    hide?: boolean | undefined;
                    draggable?: boolean | undefined;
                    snapOnRelease?: boolean | undefined;
                    dragSize?: ("auto" | number) | undefined;
                    lockClass?: string | undefined;
                    dragClass?: string | undefined;
                    scrollbarDisabledClass?: string | undefined;
                    horizontalClass?: string | undefined;
                    verticalClass?: string | undefined;
                } | undefined;
                thumbs?: {
                    swiper?: string | any | null | undefined;
                    slideThumbActiveClass?: string | undefined;
                    thumbsContainerClass?: string | undefined;
                    multipleActiveThumbs?: boolean | undefined;
                    autoScrollOffset?: number | undefined;
                } | undefined;
                virtual?: boolean | {
                    enabled?: boolean | undefined;
                    slides?: any[] | undefined;
                    cache?: boolean | undefined;
                    addSlidesBefore?: number | undefined;
                    addSlidesAfter?: number | undefined;
                    renderSlide?: ((slide: any, index: any) => any | null) | undefined;
                    renderExternal?: ((data: import('swiper/types').VirtualData<any>) => any | null) | undefined;
                    renderExternalUpdate?: boolean | undefined;
                } | undefined;
                zoom?: boolean | {
                    limitToOriginalSize?: boolean | undefined;
                    maxRatio?: number | undefined;
                    minRatio?: number | undefined;
                    toggle?: boolean | undefined;
                    containerClass?: string | undefined;
                    zoomedSlideClass?: string | undefined;
                } | undefined;
                freeMode?: boolean | {
                    enabled?: boolean | undefined;
                    momentum?: boolean | undefined;
                    momentumRatio?: number | undefined;
                    momentumVelocityRatio?: number | undefined;
                    momentumBounce?: boolean | undefined;
                    momentumBounceRatio?: number | undefined;
                    minimumVelocity?: number | undefined;
                    sticky?: boolean | undefined;
                } | undefined;
                grid?: {
                    rows?: number | undefined;
                    fill?: ("row" | "column") | undefined;
                } | undefined;
                _emitClasses?: boolean | undefined;
            };
            originalParams: {
                modules?: import('swiper/types').SwiperModule[] | undefined;
                injectStyles?: string[] | undefined;
                injectStylesUrls?: string[] | undefined;
                init?: boolean | undefined;
                enabled?: boolean | undefined;
                updateOnWindowResize?: boolean | undefined;
                resizeObserver?: boolean | undefined;
                initialSlide?: number | undefined;
                direction?: ("horizontal" | "vertical") | undefined;
                oneWayMovement?: boolean | undefined;
                swiperElementNodeName?: string | undefined;
                speed?: number | undefined;
                setWrapperSize?: boolean | undefined;
                virtualTranslate?: boolean | undefined;
                width?: (number | null) | undefined;
                height?: (number | null) | undefined;
                autoHeight?: boolean | undefined;
                roundLengths?: boolean | undefined;
                nested?: boolean | undefined;
                createElements?: boolean | undefined;
                eventsPrefix?: string | undefined;
                focusableElements?: string | undefined;
                uniqueNavElements?: boolean | undefined;
                effect?: ("slide" | "fade" | "cube" | "coverflow" | "flip" | "creative" | "cards" | string) | undefined;
                runCallbacksOnInit?: boolean | undefined;
                watchOverflow?: boolean | undefined;
                userAgent?: (string | null) | undefined;
                url?: (string | null) | undefined;
                on?: {
                    init?: ((swiper: import('swiper/types').Swiper) => any) | undefined;
                    beforeDestroy?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slidesUpdated?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideChangeTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideChangeTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideNextTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideNextTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slidePrevTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slidePrevTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    transitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    transitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    touchStart?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    touchMove?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    touchMoveOpposite?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    sliderMove?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    touchEnd?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    click?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    tap?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    doubleTap?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    progress?: ((swiper: import('swiper/types').Swiper, progress: number) => void) | undefined;
                    reachBeginning?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    reachEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    toEdge?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    fromEdge?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    setTranslate?: ((swiper: import('swiper/types').Swiper, translate: number) => void) | undefined;
                    setTransition?: ((swiper: import('swiper/types').Swiper, transition: number) => void) | undefined;
                    resize?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    observerUpdate?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    beforeLoopFix?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    loopFix?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    breakpoint?: ((swiper: import('swiper/types').Swiper, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                    _beforeBreakpoint?: ((swiper: import('swiper/types').Swiper, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                    _containerClasses?: ((swiper: import('swiper/types').Swiper, classNames: string) => void) | undefined;
                    _slideClass?: ((swiper: import('swiper/types').Swiper, slideEl: HTMLElement, classNames: string) => void) | undefined;
                    _slideClasses?: ((swiper: import('swiper/types').Swiper, slides: {
                        slideEl: HTMLElement;
                        classNames: string;
                        index: number;
                    }[]) => void) | undefined;
                    _swiper?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    _freeModeNoMomentumRelease?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    activeIndexChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    snapIndexChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    realIndexChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    afterInit?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    beforeInit?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    beforeResize?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    beforeSlideChangeStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    beforeTransitionStart?: ((swiper: import('swiper/types').Swiper, speed: number, internal: any) => void) | undefined;
                    changeDirection?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    doubleClick?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    destroy?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    momentumBounce?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    orientationchange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideResetTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideResetTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    sliderFirstMove?: ((swiper: import('swiper/types').Swiper, event: TouchEvent) => void) | undefined;
                    slidesLengthChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slidesGridLengthChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    snapGridLengthChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    update?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    lock?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    unlock?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    autoplayStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    autoplayStop?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    autoplayPause?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    autoplayResume?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    autoplayTimeLeft?: ((swiper: import('swiper/types').Swiper, timeLeft: number, percentage: number) => void) | undefined;
                    autoplay?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    hashChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    hashSet?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    keyPress?: ((swiper: import('swiper/types').Swiper, keyCode: string) => void) | undefined;
                    scroll?: ((swiper: import('swiper/types').Swiper, event: WheelEvent) => void) | undefined;
                    navigationHide?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    navigationShow?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    navigationPrev?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    navigationNext?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    paginationRender?: ((swiper: import('swiper/types').Swiper, paginationEl: HTMLElement) => void) | undefined;
                    paginationUpdate?: ((swiper: import('swiper/types').Swiper, paginationEl: HTMLElement) => void) | undefined;
                    paginationHide?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    paginationShow?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    scrollbarDragStart?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    scrollbarDragMove?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    scrollbarDragEnd?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    zoomChange?: ((swiper: import('swiper/types').Swiper, scale: number, imageEl: HTMLElement, slideEl: HTMLElement) => void) | undefined;
                } | undefined;
                onAny?: ((handler: (eventName: string, ...args: any[]) => void) => void) | undefined;
                cssMode?: boolean | undefined;
                spaceBetween?: (number | string) | undefined;
                slidesPerView?: (number | "auto") | undefined;
                maxBackfaceHiddenSlides?: number | undefined;
                slidesPerGroup?: number | undefined;
                slidesPerGroupSkip?: number | undefined;
                slidesPerGroupAuto?: boolean | undefined;
                centeredSlides?: boolean | undefined;
                centeredSlidesBounds?: boolean | undefined;
                slidesOffsetBefore?: number | undefined;
                slidesOffsetAfter?: number | undefined;
                normalizeSlideIndex?: boolean | undefined;
                centerInsufficientSlides?: boolean | undefined;
                grabCursor?: boolean | undefined;
                touchEventsTarget?: ("container" | "wrapper") | undefined;
                touchRatio?: number | undefined;
                touchAngle?: number | undefined;
                simulateTouch?: boolean | undefined;
                shortSwipes?: boolean | undefined;
                longSwipes?: boolean | undefined;
                longSwipesRatio?: number | undefined;
                longSwipesMs?: number | undefined;
                followFinger?: boolean | undefined;
                allowTouchMove?: boolean | undefined;
                threshold?: number | undefined;
                touchStartPreventDefault?: boolean | undefined;
                touchStartForcePreventDefault?: boolean | undefined;
                touchMoveStopPropagation?: boolean | undefined;
                edgeSwipeDetection?: (boolean | string) | undefined;
                edgeSwipeThreshold?: number | undefined;
                touchReleaseOnEdges?: boolean | undefined;
                passiveListeners?: boolean | undefined;
                resistance?: boolean | undefined;
                resistanceRatio?: number | undefined;
                preventInteractionOnTransition?: boolean | undefined;
                allowSlidePrev?: boolean | undefined;
                allowSlideNext?: boolean | undefined;
                noSwiping?: boolean | undefined;
                noSwipingClass?: string | undefined;
                noSwipingSelector?: string | undefined;
                swipeHandler?: HTMLElement | {
                    readonly [x: number]: string;
                    toString: () => string;
                    charAt: (pos: number) => string;
                    charCodeAt: (index: number) => number;
                    concat: (...strings: string[]) => string;
                    indexOf: (searchString: string, position?: number) => number;
                    lastIndexOf: (searchString: string, position?: number) => number;
                    localeCompare: {
                        (that: string): number;
                        (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                        (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                    };
                    match: {
                        (regexp: string | RegExp): RegExpMatchArray | null;
                        (matcher: {
                            [Symbol.match](string: string): RegExpMatchArray | null;
                        }): RegExpMatchArray | null;
                    };
                    replace: {
                        (searchValue: string | RegExp, replaceValue: string): string;
                        (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replaceValue: string): string;
                        }, replaceValue: string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                        }, replacer: (substring: string, ...args: any[]) => string): string;
                    };
                    search: {
                        (regexp: string | RegExp): number;
                        (searcher: {
                            [Symbol.search](string: string): number;
                        }): number;
                    };
                    slice: (start?: number, end?: number) => string;
                    split: {
                        (separator: string | RegExp, limit?: number): string[];
                        (splitter: {
                            [Symbol.split](string: string, limit?: number): string[];
                        }, limit?: number): string[];
                    };
                    substring: (start: number, end?: number) => string;
                    toLowerCase: () => string;
                    toLocaleLowerCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    toUpperCase: () => string;
                    toLocaleUpperCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    trim: () => string;
                    readonly length: number;
                    substr: (from: number, length?: number) => string;
                    valueOf: () => string;
                    codePointAt: (pos: number) => number | undefined;
                    includes: (searchString: string, position?: number) => boolean;
                    endsWith: (searchString: string, endPosition?: number) => boolean;
                    normalize: {
                        (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                        (form?: string): string;
                    };
                    repeat: (count: number) => string;
                    startsWith: (searchString: string, position?: number) => boolean;
                    anchor: (name: string) => string;
                    big: () => string;
                    blink: () => string;
                    bold: () => string;
                    fixed: () => string;
                    fontcolor: (color: string) => string;
                    fontsize: {
                        (size: number): string;
                        (size: string): string;
                    };
                    italics: () => string;
                    link: (url: string) => string;
                    small: () => string;
                    strike: () => string;
                    sub: () => string;
                    sup: () => string;
                    padStart: (maxLength: number, fillString?: string) => string;
                    padEnd: (maxLength: number, fillString?: string) => string;
                    trimEnd: () => string;
                    trimStart: () => string;
                    trimLeft: () => string;
                    trimRight: () => string;
                    matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                    [Symbol.iterator]: () => StringIterator<string>;
                    at: (index: number) => string | undefined;
                } | null | undefined;
                preventClicks?: boolean | undefined;
                preventClicksPropagation?: boolean | undefined;
                slideToClickedSlide?: boolean | undefined;
                watchSlidesProgress?: boolean | undefined;
                loop?: boolean | undefined;
                loopAddBlankSlides?: boolean | undefined;
                loopAdditionalSlides?: number | undefined;
                loopPreventsSliding?: boolean | undefined;
                rewind?: boolean | undefined;
                breakpoints?: {
                    [width: number]: import('swiper/types').SwiperOptions;
                    [ratio: string]: import('swiper/types').SwiperOptions;
                } | undefined;
                breakpointsBase?: ("window" | "container") | undefined;
                observer?: boolean | undefined;
                observeSlideChildren?: boolean | undefined;
                observeParents?: boolean | undefined;
                containerModifierClass?: string | undefined;
                slideClass?: string | undefined;
                slideActiveClass?: string | undefined;
                slideVisibleClass?: string | undefined;
                slideFullyVisibleClass?: string | undefined;
                slideBlankClass?: string | undefined;
                slideNextClass?: string | undefined;
                slidePrevClass?: string | undefined;
                wrapperClass?: string | undefined;
                lazyPreloaderClass?: string | undefined;
                lazyPreloadPrevNext?: number | undefined;
                a11y?: {
                    enabled?: boolean | undefined;
                    prevSlideMessage?: string | undefined;
                    nextSlideMessage?: string | undefined;
                    firstSlideMessage?: string | undefined;
                    lastSlideMessage?: string | undefined;
                    paginationBulletMessage?: string | undefined;
                    notificationClass?: string | undefined;
                    containerMessage?: (string | null) | undefined;
                    containerRoleDescriptionMessage?: (string | null) | undefined;
                    containerRole?: (string | null) | undefined;
                    itemRoleDescriptionMessage?: (string | null) | undefined;
                    slideLabelMessage?: string | undefined;
                    slideRole?: string | undefined;
                    id?: (string | number | null) | undefined;
                    scrollOnFocus?: boolean | undefined;
                } | undefined;
                autoplay?: boolean | {
                    delay?: number | undefined;
                    stopOnLastSlide?: boolean | undefined;
                    disableOnInteraction?: boolean | undefined;
                    reverseDirection?: boolean | undefined;
                    waitForTransition?: boolean | undefined;
                    pauseOnMouseEnter?: boolean | undefined;
                } | undefined;
                controller?: {
                    control?: string | HTMLElement | any | any[] | null | undefined;
                    inverse?: boolean | undefined;
                    by?: ("slide" | "container") | undefined;
                } | undefined;
                coverflowEffect?: {
                    slideShadows?: boolean | undefined;
                    rotate?: number | undefined;
                    stretch?: number | undefined;
                    depth?: number | undefined;
                    scale?: number | undefined;
                    modifier?: number | undefined;
                } | undefined;
                cubeEffect?: {
                    slideShadows?: boolean | undefined;
                    shadow?: boolean | undefined;
                    shadowOffset?: number | undefined;
                    shadowScale?: number | undefined;
                } | undefined;
                fadeEffect?: {
                    crossFade?: boolean | undefined;
                } | undefined;
                flipEffect?: {
                    slideShadows?: boolean | undefined;
                    limitRotation?: boolean | undefined;
                } | undefined;
                creativeEffect?: {
                    prev?: {
                        translate?: (string | number)[] | undefined;
                        rotate?: number[] | undefined;
                        opacity?: number | undefined;
                        scale?: number | undefined;
                        shadow?: boolean | undefined;
                        origin?: string | undefined;
                    } | undefined;
                    next?: {
                        translate?: (string | number)[] | undefined;
                        rotate?: number[] | undefined;
                        opacity?: number | undefined;
                        scale?: number | undefined;
                        shadow?: boolean | undefined;
                        origin?: string | undefined;
                    } | undefined;
                    limitProgress?: number | undefined;
                    shadowPerProgress?: boolean | undefined;
                    progressMultiplier?: number | undefined;
                    perspective?: boolean | undefined;
                } | undefined;
                cardsEffect?: {
                    slideShadows?: boolean | undefined;
                    rotate?: boolean | undefined;
                    perSlideRotate?: number | undefined;
                    perSlideOffset?: number | undefined;
                } | undefined;
                hashNavigation?: boolean | {
                    watchState?: boolean | undefined;
                    replaceState?: boolean | undefined;
                    getSlideIndex?: ((swiper: import('swiper/types').Swiper, hash: string) => number) | undefined;
                } | undefined;
                history?: boolean | {
                    enabled?: boolean | undefined;
                    root?: string | undefined;
                    replaceState?: boolean | undefined;
                    key?: string | undefined;
                    keepQuery?: boolean | undefined;
                } | undefined;
                keyboard?: boolean | {
                    enabled?: boolean | undefined;
                    onlyInViewport?: boolean | undefined;
                    pageUpDown?: boolean | undefined;
                } | undefined;
                mousewheel?: boolean | {
                    enabled?: boolean | undefined;
                    forceToAxis?: boolean | undefined;
                    releaseOnEdges?: boolean | undefined;
                    invert?: boolean | undefined;
                    sensitivity?: number | undefined;
                    eventsTarget?: HTMLElement | "container" | "wrapper" | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | undefined;
                    thresholdDelta?: (number | null) | undefined;
                    thresholdTime?: (number | null) | undefined;
                    noMousewheelClass?: string | undefined;
                } | undefined;
                navigation?: boolean | {
                    enabled?: boolean | undefined;
                    nextEl?: HTMLElement | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | null | undefined;
                    prevEl?: HTMLElement | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | null | undefined;
                    hideOnClick?: boolean | undefined;
                    disabledClass?: string | undefined;
                    hiddenClass?: string | undefined;
                    lockClass?: string | undefined;
                    navigationDisabledClass?: string | undefined;
                } | undefined;
                pagination?: boolean | {
                    enabled?: boolean | undefined;
                    el?: HTMLElement | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | null | undefined;
                    type?: ("bullets" | "fraction" | "progressbar" | "custom") | undefined;
                    bulletElement?: string | undefined;
                    dynamicBullets?: boolean | undefined;
                    dynamicMainBullets?: number | undefined;
                    hideOnClick?: boolean | undefined;
                    clickable?: boolean | undefined;
                    progressbarOpposite?: boolean | undefined;
                    formatFractionCurrent?: ((number: number) => number | string) | undefined;
                    formatFractionTotal?: ((number: number) => number | string) | undefined;
                    renderBullet?: ((index: number, className: string) => string) | undefined;
                    renderFraction?: ((currentClass: string, totalClass: string) => string) | undefined;
                    renderProgressbar?: ((progressbarFillClass: string) => string) | undefined;
                    renderCustom?: ((swiper: import('swiper/types').Swiper, current: number, total: number) => string) | undefined;
                    bulletClass?: string | undefined;
                    bulletActiveClass?: string | undefined;
                    modifierClass?: string | undefined;
                    currentClass?: string | undefined;
                    totalClass?: string | undefined;
                    hiddenClass?: string | undefined;
                    progressbarFillClass?: string | undefined;
                    progressbarOppositeClass?: string | undefined;
                    clickableClass?: string | undefined;
                    lockClass?: string | undefined;
                    horizontalClass?: string | undefined;
                    verticalClass?: string | undefined;
                    paginationDisabledClass?: string | undefined;
                } | undefined;
                parallax?: boolean | {
                    enabled?: boolean | undefined;
                } | undefined;
                scrollbar?: boolean | {
                    enabled?: boolean | undefined;
                    el?: HTMLElement | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | null | undefined;
                    hide?: boolean | undefined;
                    draggable?: boolean | undefined;
                    snapOnRelease?: boolean | undefined;
                    dragSize?: ("auto" | number) | undefined;
                    lockClass?: string | undefined;
                    dragClass?: string | undefined;
                    scrollbarDisabledClass?: string | undefined;
                    horizontalClass?: string | undefined;
                    verticalClass?: string | undefined;
                } | undefined;
                thumbs?: {
                    swiper?: string | any | null | undefined;
                    slideThumbActiveClass?: string | undefined;
                    thumbsContainerClass?: string | undefined;
                    multipleActiveThumbs?: boolean | undefined;
                    autoScrollOffset?: number | undefined;
                } | undefined;
                virtual?: boolean | {
                    enabled?: boolean | undefined;
                    slides?: any[] | undefined;
                    cache?: boolean | undefined;
                    addSlidesBefore?: number | undefined;
                    addSlidesAfter?: number | undefined;
                    renderSlide?: ((slide: any, index: any) => any | null) | undefined;
                    renderExternal?: ((data: import('swiper/types').VirtualData<any>) => any | null) | undefined;
                    renderExternalUpdate?: boolean | undefined;
                } | undefined;
                zoom?: boolean | {
                    limitToOriginalSize?: boolean | undefined;
                    maxRatio?: number | undefined;
                    minRatio?: number | undefined;
                    toggle?: boolean | undefined;
                    containerClass?: string | undefined;
                    zoomedSlideClass?: string | undefined;
                } | undefined;
                freeMode?: boolean | {
                    enabled?: boolean | undefined;
                    momentum?: boolean | undefined;
                    momentumRatio?: number | undefined;
                    momentumVelocityRatio?: number | undefined;
                    momentumBounce?: boolean | undefined;
                    momentumBounceRatio?: number | undefined;
                    minimumVelocity?: number | undefined;
                    sticky?: boolean | undefined;
                } | undefined;
                grid?: {
                    rows?: number | undefined;
                    fill?: ("row" | "column") | undefined;
                } | undefined;
                _emitClasses?: boolean | undefined;
            };
            el: HTMLElement;
            wrapperEl: HTMLElement;
            slidesEl: HTMLElement;
            slides: HTMLElement[];
            loopedSlides: number | null;
            width: number;
            height: number;
            translate: number;
            progress: number;
            activeIndex: number;
            realIndex: number;
            previousIndex: number;
            snapIndex: number;
            snapGrid: number[];
            slidesGrid: number[];
            slidesSizesGrid: number[];
            isBeginning: boolean;
            isEnd: boolean;
            isLocked: boolean;
            animating: boolean;
            touches: {
                startX: number;
                startY: number;
                currentX: number;
                currentY: number;
                diff: number;
            };
            clickedIndex: number;
            clickedSlide: HTMLElement;
            allowSlideNext: boolean;
            allowSlidePrev: boolean;
            allowTouchMove: boolean;
            swipeDirection: "prev" | "next";
            rtlTranslate: boolean;
            disable: () => void;
            enable: () => void;
            setProgress: (progress: number, speed?: number) => void;
            slideNext: (speed?: number, runCallbacks?: boolean) => boolean;
            slidePrev: (speed?: number, runCallbacks?: boolean) => boolean;
            slideTo: (index: number, speed?: number, runCallbacks?: boolean) => boolean;
            slideToLoop: (index: number, speed?: number, runCallbacks?: boolean) => import('swiper/types').Swiper;
            slideReset: (speed?: number, runCallbacks?: boolean) => boolean;
            slideToClosest: (speed?: number, runCallbacks?: boolean) => boolean;
            slidesPerViewDynamic: () => number;
            updateAutoHeight: (speed?: number) => void;
            update: () => void;
            updateSize: () => void;
            updateSlides: () => void;
            updateProgress: () => void;
            updateSlidesClasses: () => void;
            changeDirection: (direction?: "horizontal" | "vertical", needUpdate?: boolean) => void;
            changeLanguageDirection: (direction: "rtl" | "ltr") => void;
            detachEvents: () => void;
            attachEvents: () => void;
            loopCreate: () => void;
            loopDestroy: () => void;
            init: (el?: HTMLElement) => import('swiper/types').Swiper;
            destroy: (deleteInstance?: boolean, cleanStyles?: boolean) => void;
            setTranslate: (translate: any) => void;
            getTranslate: () => any;
            translateTo: (translate: number, speed: number, runCallbacks?: boolean, translateBounds?: boolean) => any;
            minTranslate: () => number;
            maxTranslate: () => number;
            unsetGrabCursor: () => void;
            setGrabCursor: () => void;
            onAny: (handler: (eventName: string, ...args: any[]) => void) => void;
            offAny: (handler: (eventName: string, ...args: any[]) => void) => void;
            isHorizontal: () => boolean;
            getBreakpoint: (breakpoints: import('swiper/types').SwiperOptions["breakpoints"]) => string;
            setBreakpoint: () => void;
            currentBreakpoint: any;
            destroyed: boolean;
            modules: Array<import('swiper/types').SwiperModule>;
            a11y: import('swiper/types').A11yMethods;
            autoplay: {
                running: boolean;
                paused: boolean;
                timeLeft: number;
                pause: () => void;
                resume: () => void;
                start: () => boolean;
                stop: () => boolean;
            };
            controller: {
                control?: any | any[] | undefined;
            };
            coverflowEffect: import('swiper/types').CoverflowEffectMethods;
            cubeEffect: import('swiper/types').CubeEffectMethods;
            fadeEffect: import('swiper/types').FadeEffectMethods;
            flipEffect: import('swiper/types').FlipEffectMethods;
            creativeEffect: import('swiper/types').CreativeEffectMethods;
            cardsEffect: import('swiper/types').CardsEffectMethods;
            hashNavigation: import('swiper/types').HashNavigationMethods;
            history: import('swiper/types').HistoryMethods;
            keyboard: {
                enabled: boolean;
                enable: () => void;
                disable: () => void;
            };
            mousewheel: {
                enabled: boolean;
                enable: () => void;
                disable: () => void;
            };
            navigation: {
                nextEl: HTMLElement;
                prevEl: HTMLElement;
                update: () => void;
                init: () => void;
                destroy: () => void;
            };
            pagination: {
                el: HTMLElement;
                bullets: HTMLElement[];
                render: () => void;
                update: () => void;
                init: () => void;
                destroy: () => void;
            };
            parallax: import('swiper/types').ParallaxMethods;
            scrollbar: {
                el: HTMLElement;
                dragEl: HTMLElement;
                updateSize: () => void;
                setTranslate: () => void;
                init: () => void;
                destroy: () => void;
            };
            thumbs: {
                swiper: any;
                update: (initial: boolean) => void;
                init: () => boolean;
            };
            virtual: {
                cache: object;
                from: number;
                to: number;
                slides: any[];
                appendSlide: (slide: HTMLElement | string | HTMLElement[] | string[]) => void;
                prependSlide: (slide: HTMLElement | string | HTMLElement[] | string[]) => void;
                removeSlide: (slideIndexes: number[]) => void;
                removeAllSlides: () => void;
                update: (force: boolean) => void;
            };
            zoom: {
                enabled: boolean;
                scale: number;
                enable: () => void;
                disable: () => void;
                in: (ratio?: number) => void;
                out: () => void;
                toggle: (event?: MouseEvent | TouchEvent | PointerEvent) => void;
            };
            freeMode: {
                onTouchMove: () => void;
                onTouchEnd: () => void;
            };
            on: <E extends keyof import('swiper/types').SwiperEvents>(event: E, handler: import('swiper/types').SwiperEvents[E]) => void;
            once: <E extends keyof import('swiper/types').SwiperEvents>(event: E, handler: import('swiper/types').SwiperEvents[E]) => void;
            off: {
                <E extends keyof import('swiper/types').SwiperEvents>(event: E, handler: import('swiper/types').SwiperEvents[E]): void;
                <E extends keyof import('swiper/types').SwiperEvents>(event: E): void;
            };
            emit: <E extends keyof import('swiper/types').SwiperEvents>(event: E, ...args: any[]) => void;
            appendSlide: (slides: HTMLElement | string | string[] | HTMLElement[]) => void;
            prependSlide: (slides: HTMLElement | string | string[] | HTMLElement[]) => void;
            addSlide: (index: number, slides: HTMLElement | string | string[] | HTMLElement[]) => void;
            removeSlide: (slideIndex: number | number[]) => void;
            removeAllSlides: () => void;
        } | null, import('swiper/types').Swiper | {
            params: {
                modules?: import('swiper/types').SwiperModule[] | undefined;
                injectStyles?: string[] | undefined;
                injectStylesUrls?: string[] | undefined;
                init?: boolean | undefined;
                enabled?: boolean | undefined;
                updateOnWindowResize?: boolean | undefined;
                resizeObserver?: boolean | undefined;
                initialSlide?: number | undefined;
                direction?: ("horizontal" | "vertical") | undefined;
                oneWayMovement?: boolean | undefined;
                swiperElementNodeName?: string | undefined;
                speed?: number | undefined;
                setWrapperSize?: boolean | undefined;
                virtualTranslate?: boolean | undefined;
                width?: (number | null) | undefined;
                height?: (number | null) | undefined;
                autoHeight?: boolean | undefined;
                roundLengths?: boolean | undefined;
                nested?: boolean | undefined;
                createElements?: boolean | undefined;
                eventsPrefix?: string | undefined;
                focusableElements?: string | undefined;
                uniqueNavElements?: boolean | undefined;
                effect?: ("slide" | "fade" | "cube" | "coverflow" | "flip" | "creative" | "cards" | string) | undefined;
                runCallbacksOnInit?: boolean | undefined;
                watchOverflow?: boolean | undefined;
                userAgent?: (string | null) | undefined;
                url?: (string | null) | undefined;
                on?: {
                    init?: ((swiper: import('swiper/types').Swiper) => any) | undefined;
                    beforeDestroy?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slidesUpdated?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideChangeTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideChangeTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideNextTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideNextTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slidePrevTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slidePrevTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    transitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    transitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    touchStart?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    touchMove?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    touchMoveOpposite?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    sliderMove?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    touchEnd?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    click?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    tap?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    doubleTap?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    progress?: ((swiper: import('swiper/types').Swiper, progress: number) => void) | undefined;
                    reachBeginning?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    reachEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    toEdge?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    fromEdge?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    setTranslate?: ((swiper: import('swiper/types').Swiper, translate: number) => void) | undefined;
                    setTransition?: ((swiper: import('swiper/types').Swiper, transition: number) => void) | undefined;
                    resize?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    observerUpdate?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    beforeLoopFix?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    loopFix?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    breakpoint?: ((swiper: import('swiper/types').Swiper, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                    _beforeBreakpoint?: ((swiper: import('swiper/types').Swiper, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                    _containerClasses?: ((swiper: import('swiper/types').Swiper, classNames: string) => void) | undefined;
                    _slideClass?: ((swiper: import('swiper/types').Swiper, slideEl: HTMLElement, classNames: string) => void) | undefined;
                    _slideClasses?: ((swiper: import('swiper/types').Swiper, slides: {
                        slideEl: HTMLElement;
                        classNames: string;
                        index: number;
                    }[]) => void) | undefined;
                    _swiper?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    _freeModeNoMomentumRelease?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    activeIndexChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    snapIndexChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    realIndexChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    afterInit?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    beforeInit?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    beforeResize?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    beforeSlideChangeStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    beforeTransitionStart?: ((swiper: import('swiper/types').Swiper, speed: number, internal: any) => void) | undefined;
                    changeDirection?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    doubleClick?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    destroy?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    momentumBounce?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    orientationchange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideResetTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideResetTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    sliderFirstMove?: ((swiper: import('swiper/types').Swiper, event: TouchEvent) => void) | undefined;
                    slidesLengthChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slidesGridLengthChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    snapGridLengthChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    update?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    lock?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    unlock?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    autoplayStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    autoplayStop?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    autoplayPause?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    autoplayResume?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    autoplayTimeLeft?: ((swiper: import('swiper/types').Swiper, timeLeft: number, percentage: number) => void) | undefined;
                    autoplay?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    hashChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    hashSet?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    keyPress?: ((swiper: import('swiper/types').Swiper, keyCode: string) => void) | undefined;
                    scroll?: ((swiper: import('swiper/types').Swiper, event: WheelEvent) => void) | undefined;
                    navigationHide?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    navigationShow?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    navigationPrev?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    navigationNext?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    paginationRender?: ((swiper: import('swiper/types').Swiper, paginationEl: HTMLElement) => void) | undefined;
                    paginationUpdate?: ((swiper: import('swiper/types').Swiper, paginationEl: HTMLElement) => void) | undefined;
                    paginationHide?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    paginationShow?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    scrollbarDragStart?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    scrollbarDragMove?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    scrollbarDragEnd?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    zoomChange?: ((swiper: import('swiper/types').Swiper, scale: number, imageEl: HTMLElement, slideEl: HTMLElement) => void) | undefined;
                } | undefined;
                onAny?: ((handler: (eventName: string, ...args: any[]) => void) => void) | undefined;
                cssMode?: boolean | undefined;
                spaceBetween?: (number | string) | undefined;
                slidesPerView?: (number | "auto") | undefined;
                maxBackfaceHiddenSlides?: number | undefined;
                slidesPerGroup?: number | undefined;
                slidesPerGroupSkip?: number | undefined;
                slidesPerGroupAuto?: boolean | undefined;
                centeredSlides?: boolean | undefined;
                centeredSlidesBounds?: boolean | undefined;
                slidesOffsetBefore?: number | undefined;
                slidesOffsetAfter?: number | undefined;
                normalizeSlideIndex?: boolean | undefined;
                centerInsufficientSlides?: boolean | undefined;
                grabCursor?: boolean | undefined;
                touchEventsTarget?: ("container" | "wrapper") | undefined;
                touchRatio?: number | undefined;
                touchAngle?: number | undefined;
                simulateTouch?: boolean | undefined;
                shortSwipes?: boolean | undefined;
                longSwipes?: boolean | undefined;
                longSwipesRatio?: number | undefined;
                longSwipesMs?: number | undefined;
                followFinger?: boolean | undefined;
                allowTouchMove?: boolean | undefined;
                threshold?: number | undefined;
                touchStartPreventDefault?: boolean | undefined;
                touchStartForcePreventDefault?: boolean | undefined;
                touchMoveStopPropagation?: boolean | undefined;
                edgeSwipeDetection?: (boolean | string) | undefined;
                edgeSwipeThreshold?: number | undefined;
                touchReleaseOnEdges?: boolean | undefined;
                passiveListeners?: boolean | undefined;
                resistance?: boolean | undefined;
                resistanceRatio?: number | undefined;
                preventInteractionOnTransition?: boolean | undefined;
                allowSlidePrev?: boolean | undefined;
                allowSlideNext?: boolean | undefined;
                noSwiping?: boolean | undefined;
                noSwipingClass?: string | undefined;
                noSwipingSelector?: string | undefined;
                swipeHandler?: HTMLElement | {
                    readonly [x: number]: string;
                    toString: () => string;
                    charAt: (pos: number) => string;
                    charCodeAt: (index: number) => number;
                    concat: (...strings: string[]) => string;
                    indexOf: (searchString: string, position?: number) => number;
                    lastIndexOf: (searchString: string, position?: number) => number;
                    localeCompare: {
                        (that: string): number;
                        (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                        (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                    };
                    match: {
                        (regexp: string | RegExp): RegExpMatchArray | null;
                        (matcher: {
                            [Symbol.match](string: string): RegExpMatchArray | null;
                        }): RegExpMatchArray | null;
                    };
                    replace: {
                        (searchValue: string | RegExp, replaceValue: string): string;
                        (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replaceValue: string): string;
                        }, replaceValue: string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                        }, replacer: (substring: string, ...args: any[]) => string): string;
                    };
                    search: {
                        (regexp: string | RegExp): number;
                        (searcher: {
                            [Symbol.search](string: string): number;
                        }): number;
                    };
                    slice: (start?: number, end?: number) => string;
                    split: {
                        (separator: string | RegExp, limit?: number): string[];
                        (splitter: {
                            [Symbol.split](string: string, limit?: number): string[];
                        }, limit?: number): string[];
                    };
                    substring: (start: number, end?: number) => string;
                    toLowerCase: () => string;
                    toLocaleLowerCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    toUpperCase: () => string;
                    toLocaleUpperCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    trim: () => string;
                    readonly length: number;
                    substr: (from: number, length?: number) => string;
                    valueOf: () => string;
                    codePointAt: (pos: number) => number | undefined;
                    includes: (searchString: string, position?: number) => boolean;
                    endsWith: (searchString: string, endPosition?: number) => boolean;
                    normalize: {
                        (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                        (form?: string): string;
                    };
                    repeat: (count: number) => string;
                    startsWith: (searchString: string, position?: number) => boolean;
                    anchor: (name: string) => string;
                    big: () => string;
                    blink: () => string;
                    bold: () => string;
                    fixed: () => string;
                    fontcolor: (color: string) => string;
                    fontsize: {
                        (size: number): string;
                        (size: string): string;
                    };
                    italics: () => string;
                    link: (url: string) => string;
                    small: () => string;
                    strike: () => string;
                    sub: () => string;
                    sup: () => string;
                    padStart: (maxLength: number, fillString?: string) => string;
                    padEnd: (maxLength: number, fillString?: string) => string;
                    trimEnd: () => string;
                    trimStart: () => string;
                    trimLeft: () => string;
                    trimRight: () => string;
                    matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                    [Symbol.iterator]: () => StringIterator<string>;
                    at: (index: number) => string | undefined;
                } | null | undefined;
                preventClicks?: boolean | undefined;
                preventClicksPropagation?: boolean | undefined;
                slideToClickedSlide?: boolean | undefined;
                watchSlidesProgress?: boolean | undefined;
                loop?: boolean | undefined;
                loopAddBlankSlides?: boolean | undefined;
                loopAdditionalSlides?: number | undefined;
                loopPreventsSliding?: boolean | undefined;
                rewind?: boolean | undefined;
                breakpoints?: {
                    [width: number]: import('swiper/types').SwiperOptions;
                    [ratio: string]: import('swiper/types').SwiperOptions;
                } | undefined;
                breakpointsBase?: ("window" | "container") | undefined;
                observer?: boolean | undefined;
                observeSlideChildren?: boolean | undefined;
                observeParents?: boolean | undefined;
                containerModifierClass?: string | undefined;
                slideClass?: string | undefined;
                slideActiveClass?: string | undefined;
                slideVisibleClass?: string | undefined;
                slideFullyVisibleClass?: string | undefined;
                slideBlankClass?: string | undefined;
                slideNextClass?: string | undefined;
                slidePrevClass?: string | undefined;
                wrapperClass?: string | undefined;
                lazyPreloaderClass?: string | undefined;
                lazyPreloadPrevNext?: number | undefined;
                a11y?: {
                    enabled?: boolean | undefined;
                    prevSlideMessage?: string | undefined;
                    nextSlideMessage?: string | undefined;
                    firstSlideMessage?: string | undefined;
                    lastSlideMessage?: string | undefined;
                    paginationBulletMessage?: string | undefined;
                    notificationClass?: string | undefined;
                    containerMessage?: (string | null) | undefined;
                    containerRoleDescriptionMessage?: (string | null) | undefined;
                    containerRole?: (string | null) | undefined;
                    itemRoleDescriptionMessage?: (string | null) | undefined;
                    slideLabelMessage?: string | undefined;
                    slideRole?: string | undefined;
                    id?: (string | number | null) | undefined;
                    scrollOnFocus?: boolean | undefined;
                } | undefined;
                autoplay?: boolean | {
                    delay?: number | undefined;
                    stopOnLastSlide?: boolean | undefined;
                    disableOnInteraction?: boolean | undefined;
                    reverseDirection?: boolean | undefined;
                    waitForTransition?: boolean | undefined;
                    pauseOnMouseEnter?: boolean | undefined;
                } | undefined;
                controller?: {
                    control?: string | HTMLElement | any | any[] | null | undefined;
                    inverse?: boolean | undefined;
                    by?: ("slide" | "container") | undefined;
                } | undefined;
                coverflowEffect?: {
                    slideShadows?: boolean | undefined;
                    rotate?: number | undefined;
                    stretch?: number | undefined;
                    depth?: number | undefined;
                    scale?: number | undefined;
                    modifier?: number | undefined;
                } | undefined;
                cubeEffect?: {
                    slideShadows?: boolean | undefined;
                    shadow?: boolean | undefined;
                    shadowOffset?: number | undefined;
                    shadowScale?: number | undefined;
                } | undefined;
                fadeEffect?: {
                    crossFade?: boolean | undefined;
                } | undefined;
                flipEffect?: {
                    slideShadows?: boolean | undefined;
                    limitRotation?: boolean | undefined;
                } | undefined;
                creativeEffect?: {
                    prev?: {
                        translate?: (string | number)[] | undefined;
                        rotate?: number[] | undefined;
                        opacity?: number | undefined;
                        scale?: number | undefined;
                        shadow?: boolean | undefined;
                        origin?: string | undefined;
                    } | undefined;
                    next?: {
                        translate?: (string | number)[] | undefined;
                        rotate?: number[] | undefined;
                        opacity?: number | undefined;
                        scale?: number | undefined;
                        shadow?: boolean | undefined;
                        origin?: string | undefined;
                    } | undefined;
                    limitProgress?: number | undefined;
                    shadowPerProgress?: boolean | undefined;
                    progressMultiplier?: number | undefined;
                    perspective?: boolean | undefined;
                } | undefined;
                cardsEffect?: {
                    slideShadows?: boolean | undefined;
                    rotate?: boolean | undefined;
                    perSlideRotate?: number | undefined;
                    perSlideOffset?: number | undefined;
                } | undefined;
                hashNavigation?: boolean | {
                    watchState?: boolean | undefined;
                    replaceState?: boolean | undefined;
                    getSlideIndex?: ((swiper: import('swiper/types').Swiper, hash: string) => number) | undefined;
                } | undefined;
                history?: boolean | {
                    enabled?: boolean | undefined;
                    root?: string | undefined;
                    replaceState?: boolean | undefined;
                    key?: string | undefined;
                    keepQuery?: boolean | undefined;
                } | undefined;
                keyboard?: boolean | {
                    enabled?: boolean | undefined;
                    onlyInViewport?: boolean | undefined;
                    pageUpDown?: boolean | undefined;
                } | undefined;
                mousewheel?: boolean | {
                    enabled?: boolean | undefined;
                    forceToAxis?: boolean | undefined;
                    releaseOnEdges?: boolean | undefined;
                    invert?: boolean | undefined;
                    sensitivity?: number | undefined;
                    eventsTarget?: HTMLElement | "container" | "wrapper" | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | undefined;
                    thresholdDelta?: (number | null) | undefined;
                    thresholdTime?: (number | null) | undefined;
                    noMousewheelClass?: string | undefined;
                } | undefined;
                navigation?: boolean | {
                    enabled?: boolean | undefined;
                    nextEl?: HTMLElement | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | null | undefined;
                    prevEl?: HTMLElement | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | null | undefined;
                    hideOnClick?: boolean | undefined;
                    disabledClass?: string | undefined;
                    hiddenClass?: string | undefined;
                    lockClass?: string | undefined;
                    navigationDisabledClass?: string | undefined;
                } | undefined;
                pagination?: boolean | {
                    enabled?: boolean | undefined;
                    el?: HTMLElement | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | null | undefined;
                    type?: ("bullets" | "fraction" | "progressbar" | "custom") | undefined;
                    bulletElement?: string | undefined;
                    dynamicBullets?: boolean | undefined;
                    dynamicMainBullets?: number | undefined;
                    hideOnClick?: boolean | undefined;
                    clickable?: boolean | undefined;
                    progressbarOpposite?: boolean | undefined;
                    formatFractionCurrent?: ((number: number) => number | string) | undefined;
                    formatFractionTotal?: ((number: number) => number | string) | undefined;
                    renderBullet?: ((index: number, className: string) => string) | undefined;
                    renderFraction?: ((currentClass: string, totalClass: string) => string) | undefined;
                    renderProgressbar?: ((progressbarFillClass: string) => string) | undefined;
                    renderCustom?: ((swiper: import('swiper/types').Swiper, current: number, total: number) => string) | undefined;
                    bulletClass?: string | undefined;
                    bulletActiveClass?: string | undefined;
                    modifierClass?: string | undefined;
                    currentClass?: string | undefined;
                    totalClass?: string | undefined;
                    hiddenClass?: string | undefined;
                    progressbarFillClass?: string | undefined;
                    progressbarOppositeClass?: string | undefined;
                    clickableClass?: string | undefined;
                    lockClass?: string | undefined;
                    horizontalClass?: string | undefined;
                    verticalClass?: string | undefined;
                    paginationDisabledClass?: string | undefined;
                } | undefined;
                parallax?: boolean | {
                    enabled?: boolean | undefined;
                } | undefined;
                scrollbar?: boolean | {
                    enabled?: boolean | undefined;
                    el?: HTMLElement | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | null | undefined;
                    hide?: boolean | undefined;
                    draggable?: boolean | undefined;
                    snapOnRelease?: boolean | undefined;
                    dragSize?: ("auto" | number) | undefined;
                    lockClass?: string | undefined;
                    dragClass?: string | undefined;
                    scrollbarDisabledClass?: string | undefined;
                    horizontalClass?: string | undefined;
                    verticalClass?: string | undefined;
                } | undefined;
                thumbs?: {
                    swiper?: string | any | null | undefined;
                    slideThumbActiveClass?: string | undefined;
                    thumbsContainerClass?: string | undefined;
                    multipleActiveThumbs?: boolean | undefined;
                    autoScrollOffset?: number | undefined;
                } | undefined;
                virtual?: boolean | {
                    enabled?: boolean | undefined;
                    slides?: any[] | undefined;
                    cache?: boolean | undefined;
                    addSlidesBefore?: number | undefined;
                    addSlidesAfter?: number | undefined;
                    renderSlide?: ((slide: any, index: any) => any | null) | undefined;
                    renderExternal?: ((data: import('swiper/types').VirtualData<any>) => any | null) | undefined;
                    renderExternalUpdate?: boolean | undefined;
                } | undefined;
                zoom?: boolean | {
                    limitToOriginalSize?: boolean | undefined;
                    maxRatio?: number | undefined;
                    minRatio?: number | undefined;
                    toggle?: boolean | undefined;
                    containerClass?: string | undefined;
                    zoomedSlideClass?: string | undefined;
                } | undefined;
                freeMode?: boolean | {
                    enabled?: boolean | undefined;
                    momentum?: boolean | undefined;
                    momentumRatio?: number | undefined;
                    momentumVelocityRatio?: number | undefined;
                    momentumBounce?: boolean | undefined;
                    momentumBounceRatio?: number | undefined;
                    minimumVelocity?: number | undefined;
                    sticky?: boolean | undefined;
                } | undefined;
                grid?: {
                    rows?: number | undefined;
                    fill?: ("row" | "column") | undefined;
                } | undefined;
                _emitClasses?: boolean | undefined;
            };
            originalParams: {
                modules?: import('swiper/types').SwiperModule[] | undefined;
                injectStyles?: string[] | undefined;
                injectStylesUrls?: string[] | undefined;
                init?: boolean | undefined;
                enabled?: boolean | undefined;
                updateOnWindowResize?: boolean | undefined;
                resizeObserver?: boolean | undefined;
                initialSlide?: number | undefined;
                direction?: ("horizontal" | "vertical") | undefined;
                oneWayMovement?: boolean | undefined;
                swiperElementNodeName?: string | undefined;
                speed?: number | undefined;
                setWrapperSize?: boolean | undefined;
                virtualTranslate?: boolean | undefined;
                width?: (number | null) | undefined;
                height?: (number | null) | undefined;
                autoHeight?: boolean | undefined;
                roundLengths?: boolean | undefined;
                nested?: boolean | undefined;
                createElements?: boolean | undefined;
                eventsPrefix?: string | undefined;
                focusableElements?: string | undefined;
                uniqueNavElements?: boolean | undefined;
                effect?: ("slide" | "fade" | "cube" | "coverflow" | "flip" | "creative" | "cards" | string) | undefined;
                runCallbacksOnInit?: boolean | undefined;
                watchOverflow?: boolean | undefined;
                userAgent?: (string | null) | undefined;
                url?: (string | null) | undefined;
                on?: {
                    init?: ((swiper: import('swiper/types').Swiper) => any) | undefined;
                    beforeDestroy?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slidesUpdated?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideChangeTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideChangeTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideNextTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideNextTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slidePrevTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slidePrevTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    transitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    transitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    touchStart?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    touchMove?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    touchMoveOpposite?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    sliderMove?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    touchEnd?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    click?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    tap?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    doubleTap?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    progress?: ((swiper: import('swiper/types').Swiper, progress: number) => void) | undefined;
                    reachBeginning?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    reachEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    toEdge?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    fromEdge?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    setTranslate?: ((swiper: import('swiper/types').Swiper, translate: number) => void) | undefined;
                    setTransition?: ((swiper: import('swiper/types').Swiper, transition: number) => void) | undefined;
                    resize?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    observerUpdate?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    beforeLoopFix?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    loopFix?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    breakpoint?: ((swiper: import('swiper/types').Swiper, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                    _beforeBreakpoint?: ((swiper: import('swiper/types').Swiper, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                    _containerClasses?: ((swiper: import('swiper/types').Swiper, classNames: string) => void) | undefined;
                    _slideClass?: ((swiper: import('swiper/types').Swiper, slideEl: HTMLElement, classNames: string) => void) | undefined;
                    _slideClasses?: ((swiper: import('swiper/types').Swiper, slides: {
                        slideEl: HTMLElement;
                        classNames: string;
                        index: number;
                    }[]) => void) | undefined;
                    _swiper?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    _freeModeNoMomentumRelease?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    activeIndexChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    snapIndexChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    realIndexChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    afterInit?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    beforeInit?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    beforeResize?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    beforeSlideChangeStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    beforeTransitionStart?: ((swiper: import('swiper/types').Swiper, speed: number, internal: any) => void) | undefined;
                    changeDirection?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    doubleClick?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    destroy?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    momentumBounce?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    orientationchange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideResetTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideResetTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    sliderFirstMove?: ((swiper: import('swiper/types').Swiper, event: TouchEvent) => void) | undefined;
                    slidesLengthChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slidesGridLengthChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    snapGridLengthChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    update?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    lock?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    unlock?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    autoplayStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    autoplayStop?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    autoplayPause?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    autoplayResume?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    autoplayTimeLeft?: ((swiper: import('swiper/types').Swiper, timeLeft: number, percentage: number) => void) | undefined;
                    autoplay?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    hashChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    hashSet?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    keyPress?: ((swiper: import('swiper/types').Swiper, keyCode: string) => void) | undefined;
                    scroll?: ((swiper: import('swiper/types').Swiper, event: WheelEvent) => void) | undefined;
                    navigationHide?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    navigationShow?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    navigationPrev?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    navigationNext?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    paginationRender?: ((swiper: import('swiper/types').Swiper, paginationEl: HTMLElement) => void) | undefined;
                    paginationUpdate?: ((swiper: import('swiper/types').Swiper, paginationEl: HTMLElement) => void) | undefined;
                    paginationHide?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    paginationShow?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    scrollbarDragStart?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    scrollbarDragMove?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    scrollbarDragEnd?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    zoomChange?: ((swiper: import('swiper/types').Swiper, scale: number, imageEl: HTMLElement, slideEl: HTMLElement) => void) | undefined;
                } | undefined;
                onAny?: ((handler: (eventName: string, ...args: any[]) => void) => void) | undefined;
                cssMode?: boolean | undefined;
                spaceBetween?: (number | string) | undefined;
                slidesPerView?: (number | "auto") | undefined;
                maxBackfaceHiddenSlides?: number | undefined;
                slidesPerGroup?: number | undefined;
                slidesPerGroupSkip?: number | undefined;
                slidesPerGroupAuto?: boolean | undefined;
                centeredSlides?: boolean | undefined;
                centeredSlidesBounds?: boolean | undefined;
                slidesOffsetBefore?: number | undefined;
                slidesOffsetAfter?: number | undefined;
                normalizeSlideIndex?: boolean | undefined;
                centerInsufficientSlides?: boolean | undefined;
                grabCursor?: boolean | undefined;
                touchEventsTarget?: ("container" | "wrapper") | undefined;
                touchRatio?: number | undefined;
                touchAngle?: number | undefined;
                simulateTouch?: boolean | undefined;
                shortSwipes?: boolean | undefined;
                longSwipes?: boolean | undefined;
                longSwipesRatio?: number | undefined;
                longSwipesMs?: number | undefined;
                followFinger?: boolean | undefined;
                allowTouchMove?: boolean | undefined;
                threshold?: number | undefined;
                touchStartPreventDefault?: boolean | undefined;
                touchStartForcePreventDefault?: boolean | undefined;
                touchMoveStopPropagation?: boolean | undefined;
                edgeSwipeDetection?: (boolean | string) | undefined;
                edgeSwipeThreshold?: number | undefined;
                touchReleaseOnEdges?: boolean | undefined;
                passiveListeners?: boolean | undefined;
                resistance?: boolean | undefined;
                resistanceRatio?: number | undefined;
                preventInteractionOnTransition?: boolean | undefined;
                allowSlidePrev?: boolean | undefined;
                allowSlideNext?: boolean | undefined;
                noSwiping?: boolean | undefined;
                noSwipingClass?: string | undefined;
                noSwipingSelector?: string | undefined;
                swipeHandler?: HTMLElement | {
                    readonly [x: number]: string;
                    toString: () => string;
                    charAt: (pos: number) => string;
                    charCodeAt: (index: number) => number;
                    concat: (...strings: string[]) => string;
                    indexOf: (searchString: string, position?: number) => number;
                    lastIndexOf: (searchString: string, position?: number) => number;
                    localeCompare: {
                        (that: string): number;
                        (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                        (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                    };
                    match: {
                        (regexp: string | RegExp): RegExpMatchArray | null;
                        (matcher: {
                            [Symbol.match](string: string): RegExpMatchArray | null;
                        }): RegExpMatchArray | null;
                    };
                    replace: {
                        (searchValue: string | RegExp, replaceValue: string): string;
                        (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replaceValue: string): string;
                        }, replaceValue: string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                        }, replacer: (substring: string, ...args: any[]) => string): string;
                    };
                    search: {
                        (regexp: string | RegExp): number;
                        (searcher: {
                            [Symbol.search](string: string): number;
                        }): number;
                    };
                    slice: (start?: number, end?: number) => string;
                    split: {
                        (separator: string | RegExp, limit?: number): string[];
                        (splitter: {
                            [Symbol.split](string: string, limit?: number): string[];
                        }, limit?: number): string[];
                    };
                    substring: (start: number, end?: number) => string;
                    toLowerCase: () => string;
                    toLocaleLowerCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    toUpperCase: () => string;
                    toLocaleUpperCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    trim: () => string;
                    readonly length: number;
                    substr: (from: number, length?: number) => string;
                    valueOf: () => string;
                    codePointAt: (pos: number) => number | undefined;
                    includes: (searchString: string, position?: number) => boolean;
                    endsWith: (searchString: string, endPosition?: number) => boolean;
                    normalize: {
                        (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                        (form?: string): string;
                    };
                    repeat: (count: number) => string;
                    startsWith: (searchString: string, position?: number) => boolean;
                    anchor: (name: string) => string;
                    big: () => string;
                    blink: () => string;
                    bold: () => string;
                    fixed: () => string;
                    fontcolor: (color: string) => string;
                    fontsize: {
                        (size: number): string;
                        (size: string): string;
                    };
                    italics: () => string;
                    link: (url: string) => string;
                    small: () => string;
                    strike: () => string;
                    sub: () => string;
                    sup: () => string;
                    padStart: (maxLength: number, fillString?: string) => string;
                    padEnd: (maxLength: number, fillString?: string) => string;
                    trimEnd: () => string;
                    trimStart: () => string;
                    trimLeft: () => string;
                    trimRight: () => string;
                    matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                    [Symbol.iterator]: () => StringIterator<string>;
                    at: (index: number) => string | undefined;
                } | null | undefined;
                preventClicks?: boolean | undefined;
                preventClicksPropagation?: boolean | undefined;
                slideToClickedSlide?: boolean | undefined;
                watchSlidesProgress?: boolean | undefined;
                loop?: boolean | undefined;
                loopAddBlankSlides?: boolean | undefined;
                loopAdditionalSlides?: number | undefined;
                loopPreventsSliding?: boolean | undefined;
                rewind?: boolean | undefined;
                breakpoints?: {
                    [width: number]: import('swiper/types').SwiperOptions;
                    [ratio: string]: import('swiper/types').SwiperOptions;
                } | undefined;
                breakpointsBase?: ("window" | "container") | undefined;
                observer?: boolean | undefined;
                observeSlideChildren?: boolean | undefined;
                observeParents?: boolean | undefined;
                containerModifierClass?: string | undefined;
                slideClass?: string | undefined;
                slideActiveClass?: string | undefined;
                slideVisibleClass?: string | undefined;
                slideFullyVisibleClass?: string | undefined;
                slideBlankClass?: string | undefined;
                slideNextClass?: string | undefined;
                slidePrevClass?: string | undefined;
                wrapperClass?: string | undefined;
                lazyPreloaderClass?: string | undefined;
                lazyPreloadPrevNext?: number | undefined;
                a11y?: {
                    enabled?: boolean | undefined;
                    prevSlideMessage?: string | undefined;
                    nextSlideMessage?: string | undefined;
                    firstSlideMessage?: string | undefined;
                    lastSlideMessage?: string | undefined;
                    paginationBulletMessage?: string | undefined;
                    notificationClass?: string | undefined;
                    containerMessage?: (string | null) | undefined;
                    containerRoleDescriptionMessage?: (string | null) | undefined;
                    containerRole?: (string | null) | undefined;
                    itemRoleDescriptionMessage?: (string | null) | undefined;
                    slideLabelMessage?: string | undefined;
                    slideRole?: string | undefined;
                    id?: (string | number | null) | undefined;
                    scrollOnFocus?: boolean | undefined;
                } | undefined;
                autoplay?: boolean | {
                    delay?: number | undefined;
                    stopOnLastSlide?: boolean | undefined;
                    disableOnInteraction?: boolean | undefined;
                    reverseDirection?: boolean | undefined;
                    waitForTransition?: boolean | undefined;
                    pauseOnMouseEnter?: boolean | undefined;
                } | undefined;
                controller?: {
                    control?: string | HTMLElement | any | any[] | null | undefined;
                    inverse?: boolean | undefined;
                    by?: ("slide" | "container") | undefined;
                } | undefined;
                coverflowEffect?: {
                    slideShadows?: boolean | undefined;
                    rotate?: number | undefined;
                    stretch?: number | undefined;
                    depth?: number | undefined;
                    scale?: number | undefined;
                    modifier?: number | undefined;
                } | undefined;
                cubeEffect?: {
                    slideShadows?: boolean | undefined;
                    shadow?: boolean | undefined;
                    shadowOffset?: number | undefined;
                    shadowScale?: number | undefined;
                } | undefined;
                fadeEffect?: {
                    crossFade?: boolean | undefined;
                } | undefined;
                flipEffect?: {
                    slideShadows?: boolean | undefined;
                    limitRotation?: boolean | undefined;
                } | undefined;
                creativeEffect?: {
                    prev?: {
                        translate?: (string | number)[] | undefined;
                        rotate?: number[] | undefined;
                        opacity?: number | undefined;
                        scale?: number | undefined;
                        shadow?: boolean | undefined;
                        origin?: string | undefined;
                    } | undefined;
                    next?: {
                        translate?: (string | number)[] | undefined;
                        rotate?: number[] | undefined;
                        opacity?: number | undefined;
                        scale?: number | undefined;
                        shadow?: boolean | undefined;
                        origin?: string | undefined;
                    } | undefined;
                    limitProgress?: number | undefined;
                    shadowPerProgress?: boolean | undefined;
                    progressMultiplier?: number | undefined;
                    perspective?: boolean | undefined;
                } | undefined;
                cardsEffect?: {
                    slideShadows?: boolean | undefined;
                    rotate?: boolean | undefined;
                    perSlideRotate?: number | undefined;
                    perSlideOffset?: number | undefined;
                } | undefined;
                hashNavigation?: boolean | {
                    watchState?: boolean | undefined;
                    replaceState?: boolean | undefined;
                    getSlideIndex?: ((swiper: import('swiper/types').Swiper, hash: string) => number) | undefined;
                } | undefined;
                history?: boolean | {
                    enabled?: boolean | undefined;
                    root?: string | undefined;
                    replaceState?: boolean | undefined;
                    key?: string | undefined;
                    keepQuery?: boolean | undefined;
                } | undefined;
                keyboard?: boolean | {
                    enabled?: boolean | undefined;
                    onlyInViewport?: boolean | undefined;
                    pageUpDown?: boolean | undefined;
                } | undefined;
                mousewheel?: boolean | {
                    enabled?: boolean | undefined;
                    forceToAxis?: boolean | undefined;
                    releaseOnEdges?: boolean | undefined;
                    invert?: boolean | undefined;
                    sensitivity?: number | undefined;
                    eventsTarget?: HTMLElement | "container" | "wrapper" | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | undefined;
                    thresholdDelta?: (number | null) | undefined;
                    thresholdTime?: (number | null) | undefined;
                    noMousewheelClass?: string | undefined;
                } | undefined;
                navigation?: boolean | {
                    enabled?: boolean | undefined;
                    nextEl?: HTMLElement | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | null | undefined;
                    prevEl?: HTMLElement | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | null | undefined;
                    hideOnClick?: boolean | undefined;
                    disabledClass?: string | undefined;
                    hiddenClass?: string | undefined;
                    lockClass?: string | undefined;
                    navigationDisabledClass?: string | undefined;
                } | undefined;
                pagination?: boolean | {
                    enabled?: boolean | undefined;
                    el?: HTMLElement | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | null | undefined;
                    type?: ("bullets" | "fraction" | "progressbar" | "custom") | undefined;
                    bulletElement?: string | undefined;
                    dynamicBullets?: boolean | undefined;
                    dynamicMainBullets?: number | undefined;
                    hideOnClick?: boolean | undefined;
                    clickable?: boolean | undefined;
                    progressbarOpposite?: boolean | undefined;
                    formatFractionCurrent?: ((number: number) => number | string) | undefined;
                    formatFractionTotal?: ((number: number) => number | string) | undefined;
                    renderBullet?: ((index: number, className: string) => string) | undefined;
                    renderFraction?: ((currentClass: string, totalClass: string) => string) | undefined;
                    renderProgressbar?: ((progressbarFillClass: string) => string) | undefined;
                    renderCustom?: ((swiper: import('swiper/types').Swiper, current: number, total: number) => string) | undefined;
                    bulletClass?: string | undefined;
                    bulletActiveClass?: string | undefined;
                    modifierClass?: string | undefined;
                    currentClass?: string | undefined;
                    totalClass?: string | undefined;
                    hiddenClass?: string | undefined;
                    progressbarFillClass?: string | undefined;
                    progressbarOppositeClass?: string | undefined;
                    clickableClass?: string | undefined;
                    lockClass?: string | undefined;
                    horizontalClass?: string | undefined;
                    verticalClass?: string | undefined;
                    paginationDisabledClass?: string | undefined;
                } | undefined;
                parallax?: boolean | {
                    enabled?: boolean | undefined;
                } | undefined;
                scrollbar?: boolean | {
                    enabled?: boolean | undefined;
                    el?: HTMLElement | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | null | undefined;
                    hide?: boolean | undefined;
                    draggable?: boolean | undefined;
                    snapOnRelease?: boolean | undefined;
                    dragSize?: ("auto" | number) | undefined;
                    lockClass?: string | undefined;
                    dragClass?: string | undefined;
                    scrollbarDisabledClass?: string | undefined;
                    horizontalClass?: string | undefined;
                    verticalClass?: string | undefined;
                } | undefined;
                thumbs?: {
                    swiper?: string | any | null | undefined;
                    slideThumbActiveClass?: string | undefined;
                    thumbsContainerClass?: string | undefined;
                    multipleActiveThumbs?: boolean | undefined;
                    autoScrollOffset?: number | undefined;
                } | undefined;
                virtual?: boolean | {
                    enabled?: boolean | undefined;
                    slides?: any[] | undefined;
                    cache?: boolean | undefined;
                    addSlidesBefore?: number | undefined;
                    addSlidesAfter?: number | undefined;
                    renderSlide?: ((slide: any, index: any) => any | null) | undefined;
                    renderExternal?: ((data: import('swiper/types').VirtualData<any>) => any | null) | undefined;
                    renderExternalUpdate?: boolean | undefined;
                } | undefined;
                zoom?: boolean | {
                    limitToOriginalSize?: boolean | undefined;
                    maxRatio?: number | undefined;
                    minRatio?: number | undefined;
                    toggle?: boolean | undefined;
                    containerClass?: string | undefined;
                    zoomedSlideClass?: string | undefined;
                } | undefined;
                freeMode?: boolean | {
                    enabled?: boolean | undefined;
                    momentum?: boolean | undefined;
                    momentumRatio?: number | undefined;
                    momentumVelocityRatio?: number | undefined;
                    momentumBounce?: boolean | undefined;
                    momentumBounceRatio?: number | undefined;
                    minimumVelocity?: number | undefined;
                    sticky?: boolean | undefined;
                } | undefined;
                grid?: {
                    rows?: number | undefined;
                    fill?: ("row" | "column") | undefined;
                } | undefined;
                _emitClasses?: boolean | undefined;
            };
            el: HTMLElement;
            wrapperEl: HTMLElement;
            slidesEl: HTMLElement;
            slides: HTMLElement[];
            loopedSlides: number | null;
            width: number;
            height: number;
            translate: number;
            progress: number;
            activeIndex: number;
            realIndex: number;
            previousIndex: number;
            snapIndex: number;
            snapGrid: number[];
            slidesGrid: number[];
            slidesSizesGrid: number[];
            isBeginning: boolean;
            isEnd: boolean;
            isLocked: boolean;
            animating: boolean;
            touches: {
                startX: number;
                startY: number;
                currentX: number;
                currentY: number;
                diff: number;
            };
            clickedIndex: number;
            clickedSlide: HTMLElement;
            allowSlideNext: boolean;
            allowSlidePrev: boolean;
            allowTouchMove: boolean;
            swipeDirection: "prev" | "next";
            rtlTranslate: boolean;
            disable: () => void;
            enable: () => void;
            setProgress: (progress: number, speed?: number) => void;
            slideNext: (speed?: number, runCallbacks?: boolean) => boolean;
            slidePrev: (speed?: number, runCallbacks?: boolean) => boolean;
            slideTo: (index: number, speed?: number, runCallbacks?: boolean) => boolean;
            slideToLoop: (index: number, speed?: number, runCallbacks?: boolean) => import('swiper/types').Swiper;
            slideReset: (speed?: number, runCallbacks?: boolean) => boolean;
            slideToClosest: (speed?: number, runCallbacks?: boolean) => boolean;
            slidesPerViewDynamic: () => number;
            updateAutoHeight: (speed?: number) => void;
            update: () => void;
            updateSize: () => void;
            updateSlides: () => void;
            updateProgress: () => void;
            updateSlidesClasses: () => void;
            changeDirection: (direction?: "horizontal" | "vertical", needUpdate?: boolean) => void;
            changeLanguageDirection: (direction: "rtl" | "ltr") => void;
            detachEvents: () => void;
            attachEvents: () => void;
            loopCreate: () => void;
            loopDestroy: () => void;
            init: (el?: HTMLElement) => import('swiper/types').Swiper;
            destroy: (deleteInstance?: boolean, cleanStyles?: boolean) => void;
            setTranslate: (translate: any) => void;
            getTranslate: () => any;
            translateTo: (translate: number, speed: number, runCallbacks?: boolean, translateBounds?: boolean) => any;
            minTranslate: () => number;
            maxTranslate: () => number;
            unsetGrabCursor: () => void;
            setGrabCursor: () => void;
            onAny: (handler: (eventName: string, ...args: any[]) => void) => void;
            offAny: (handler: (eventName: string, ...args: any[]) => void) => void;
            isHorizontal: () => boolean;
            getBreakpoint: (breakpoints: import('swiper/types').SwiperOptions["breakpoints"]) => string;
            setBreakpoint: () => void;
            currentBreakpoint: any;
            destroyed: boolean;
            modules: Array<import('swiper/types').SwiperModule>;
            a11y: import('swiper/types').A11yMethods;
            autoplay: {
                running: boolean;
                paused: boolean;
                timeLeft: number;
                pause: () => void;
                resume: () => void;
                start: () => boolean;
                stop: () => boolean;
            };
            controller: {
                control?: any | any[] | undefined;
            };
            coverflowEffect: import('swiper/types').CoverflowEffectMethods;
            cubeEffect: import('swiper/types').CubeEffectMethods;
            fadeEffect: import('swiper/types').FadeEffectMethods;
            flipEffect: import('swiper/types').FlipEffectMethods;
            creativeEffect: import('swiper/types').CreativeEffectMethods;
            cardsEffect: import('swiper/types').CardsEffectMethods;
            hashNavigation: import('swiper/types').HashNavigationMethods;
            history: import('swiper/types').HistoryMethods;
            keyboard: {
                enabled: boolean;
                enable: () => void;
                disable: () => void;
            };
            mousewheel: {
                enabled: boolean;
                enable: () => void;
                disable: () => void;
            };
            navigation: {
                nextEl: HTMLElement;
                prevEl: HTMLElement;
                update: () => void;
                init: () => void;
                destroy: () => void;
            };
            pagination: {
                el: HTMLElement;
                bullets: HTMLElement[];
                render: () => void;
                update: () => void;
                init: () => void;
                destroy: () => void;
            };
            parallax: import('swiper/types').ParallaxMethods;
            scrollbar: {
                el: HTMLElement;
                dragEl: HTMLElement;
                updateSize: () => void;
                setTranslate: () => void;
                init: () => void;
                destroy: () => void;
            };
            thumbs: {
                swiper: any;
                update: (initial: boolean) => void;
                init: () => boolean;
            };
            virtual: {
                cache: object;
                from: number;
                to: number;
                slides: any[];
                appendSlide: (slide: HTMLElement | string | HTMLElement[] | string[]) => void;
                prependSlide: (slide: HTMLElement | string | HTMLElement[] | string[]) => void;
                removeSlide: (slideIndexes: number[]) => void;
                removeAllSlides: () => void;
                update: (force: boolean) => void;
            };
            zoom: {
                enabled: boolean;
                scale: number;
                enable: () => void;
                disable: () => void;
                in: (ratio?: number) => void;
                out: () => void;
                toggle: (event?: MouseEvent | TouchEvent | PointerEvent) => void;
            };
            freeMode: {
                onTouchMove: () => void;
                onTouchEnd: () => void;
            };
            on: <E extends keyof import('swiper/types').SwiperEvents>(event: E, handler: import('swiper/types').SwiperEvents[E]) => void;
            once: <E extends keyof import('swiper/types').SwiperEvents>(event: E, handler: import('swiper/types').SwiperEvents[E]) => void;
            off: {
                <E extends keyof import('swiper/types').SwiperEvents>(event: E, handler: import('swiper/types').SwiperEvents[E]): void;
                <E extends keyof import('swiper/types').SwiperEvents>(event: E): void;
            };
            emit: <E extends keyof import('swiper/types').SwiperEvents>(event: E, ...args: any[]) => void;
            appendSlide: (slides: HTMLElement | string | string[] | HTMLElement[]) => void;
            prependSlide: (slides: HTMLElement | string | string[] | HTMLElement[]) => void;
            addSlide: (index: number, slides: HTMLElement | string | string[] | HTMLElement[]) => void;
            removeSlide: (slideIndex: number | number[]) => void;
            removeAllSlides: () => void;
        } | null>;
    }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
        "update:activeSlideIdx": (activeSlideIdx: number) => any;
    }, import('vue').PublicProps, {
        width: string | number;
        height: string | number;
        direction: "horizontal" | "vertical";
        transitionDelay: number | string;
        initialSlide: number;
        slidesPerView: number;
        mousewheel: boolean;
        navigation: boolean;
        navDirection: "horizontal" | "vertical";
        navAlign: "center" | "start" | "end";
        navSize: string | number;
        navColor: string;
        navDisabledColor: string;
        transitionFun: string;
        transitionSpeed: number;
        swiperOverflow: string;
        enableSlideClick: boolean;
        slideClickHandler: (swiper: import('swiper/types').Swiper) => void;
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<{
        activeSlideIdx?: number;
    } & {
        width?: string | number;
        height?: string | number;
        initialSlide?: number;
        direction?: "horizontal" | "vertical";
        slidesPerView?: number;
        slidesOffsetBefore?: number;
        slidesOffsetAfter?: number;
        mousewheel?: boolean;
        navigation?: boolean;
        navDirection?: "horizontal" | "vertical";
        navAlign?: "center" | "start" | "end";
        navSize?: string | number;
        navColor?: string;
        navDisabledColor?: string;
        transitionFun?: string;
        transitionSpeed?: number;
        transitionDelay?: number | string;
        controlSwiper?: import('swiper/types').Swiper | import('swiper/types').Swiper[];
        swiperOverflow?: string;
        enableSlideClick?: boolean;
        slideClickHandler?: (swiper: import('swiper/types').Swiper) => void;
    }> & Readonly<{
        "onUpdate:activeSlideIdx"?: ((activeSlideIdx: number) => any) | undefined;
    }>, {
        swiper: import('vue').Ref<{
            params: {
                modules?: import('swiper/types').SwiperModule[] | undefined;
                injectStyles?: string[] | undefined;
                injectStylesUrls?: string[] | undefined;
                init?: boolean | undefined;
                enabled?: boolean | undefined;
                updateOnWindowResize?: boolean | undefined;
                resizeObserver?: boolean | undefined;
                initialSlide?: number | undefined;
                direction?: ("horizontal" | "vertical") | undefined;
                oneWayMovement?: boolean | undefined;
                swiperElementNodeName?: string | undefined;
                speed?: number | undefined;
                setWrapperSize?: boolean | undefined;
                virtualTranslate?: boolean | undefined;
                width?: (number | null) | undefined;
                height?: (number | null) | undefined;
                autoHeight?: boolean | undefined;
                roundLengths?: boolean | undefined;
                nested?: boolean | undefined;
                createElements?: boolean | undefined;
                eventsPrefix?: string | undefined;
                focusableElements?: string | undefined;
                uniqueNavElements?: boolean | undefined;
                effect?: ("slide" | "fade" | "cube" | "coverflow" | "flip" | "creative" | "cards" | string) | undefined;
                runCallbacksOnInit?: boolean | undefined;
                watchOverflow?: boolean | undefined;
                userAgent?: (string | null) | undefined;
                url?: (string | null) | undefined;
                on?: {
                    init?: ((swiper: import('swiper/types').Swiper) => any) | undefined;
                    beforeDestroy?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slidesUpdated?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideChangeTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideChangeTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideNextTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideNextTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slidePrevTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slidePrevTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    transitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    transitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    touchStart?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    touchMove?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    touchMoveOpposite?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    sliderMove?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    touchEnd?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    click?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    tap?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    doubleTap?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    progress?: ((swiper: import('swiper/types').Swiper, progress: number) => void) | undefined;
                    reachBeginning?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    reachEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    toEdge?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    fromEdge?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    setTranslate?: ((swiper: import('swiper/types').Swiper, translate: number) => void) | undefined;
                    setTransition?: ((swiper: import('swiper/types').Swiper, transition: number) => void) | undefined;
                    resize?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    observerUpdate?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    beforeLoopFix?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    loopFix?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    breakpoint?: ((swiper: import('swiper/types').Swiper, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                    _beforeBreakpoint?: ((swiper: import('swiper/types').Swiper, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                    _containerClasses?: ((swiper: import('swiper/types').Swiper, classNames: string) => void) | undefined;
                    _slideClass?: ((swiper: import('swiper/types').Swiper, slideEl: HTMLElement, classNames: string) => void) | undefined;
                    _slideClasses?: ((swiper: import('swiper/types').Swiper, slides: {
                        slideEl: HTMLElement;
                        classNames: string;
                        index: number;
                    }[]) => void) | undefined;
                    _swiper?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    _freeModeNoMomentumRelease?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    activeIndexChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    snapIndexChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    realIndexChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    afterInit?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    beforeInit?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    beforeResize?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    beforeSlideChangeStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    beforeTransitionStart?: ((swiper: import('swiper/types').Swiper, speed: number, internal: any) => void) | undefined;
                    changeDirection?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    doubleClick?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    destroy?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    momentumBounce?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    orientationchange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideResetTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideResetTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    sliderFirstMove?: ((swiper: import('swiper/types').Swiper, event: TouchEvent) => void) | undefined;
                    slidesLengthChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slidesGridLengthChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    snapGridLengthChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    update?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    lock?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    unlock?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    autoplayStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    autoplayStop?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    autoplayPause?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    autoplayResume?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    autoplayTimeLeft?: ((swiper: import('swiper/types').Swiper, timeLeft: number, percentage: number) => void) | undefined;
                    autoplay?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    hashChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    hashSet?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    keyPress?: ((swiper: import('swiper/types').Swiper, keyCode: string) => void) | undefined;
                    scroll?: ((swiper: import('swiper/types').Swiper, event: WheelEvent) => void) | undefined;
                    navigationHide?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    navigationShow?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    navigationPrev?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    navigationNext?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    paginationRender?: ((swiper: import('swiper/types').Swiper, paginationEl: HTMLElement) => void) | undefined;
                    paginationUpdate?: ((swiper: import('swiper/types').Swiper, paginationEl: HTMLElement) => void) | undefined;
                    paginationHide?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    paginationShow?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    scrollbarDragStart?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    scrollbarDragMove?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    scrollbarDragEnd?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    zoomChange?: ((swiper: import('swiper/types').Swiper, scale: number, imageEl: HTMLElement, slideEl: HTMLElement) => void) | undefined;
                } | undefined;
                onAny?: ((handler: (eventName: string, ...args: any[]) => void) => void) | undefined;
                cssMode?: boolean | undefined;
                spaceBetween?: (number | string) | undefined;
                slidesPerView?: (number | "auto") | undefined;
                maxBackfaceHiddenSlides?: number | undefined;
                slidesPerGroup?: number | undefined;
                slidesPerGroupSkip?: number | undefined;
                slidesPerGroupAuto?: boolean | undefined;
                centeredSlides?: boolean | undefined;
                centeredSlidesBounds?: boolean | undefined;
                slidesOffsetBefore?: number | undefined;
                slidesOffsetAfter?: number | undefined;
                normalizeSlideIndex?: boolean | undefined;
                centerInsufficientSlides?: boolean | undefined;
                grabCursor?: boolean | undefined;
                touchEventsTarget?: ("container" | "wrapper") | undefined;
                touchRatio?: number | undefined;
                touchAngle?: number | undefined;
                simulateTouch?: boolean | undefined;
                shortSwipes?: boolean | undefined;
                longSwipes?: boolean | undefined;
                longSwipesRatio?: number | undefined;
                longSwipesMs?: number | undefined;
                followFinger?: boolean | undefined;
                allowTouchMove?: boolean | undefined;
                threshold?: number | undefined;
                touchStartPreventDefault?: boolean | undefined;
                touchStartForcePreventDefault?: boolean | undefined;
                touchMoveStopPropagation?: boolean | undefined;
                edgeSwipeDetection?: (boolean | string) | undefined;
                edgeSwipeThreshold?: number | undefined;
                touchReleaseOnEdges?: boolean | undefined;
                passiveListeners?: boolean | undefined;
                resistance?: boolean | undefined;
                resistanceRatio?: number | undefined;
                preventInteractionOnTransition?: boolean | undefined;
                allowSlidePrev?: boolean | undefined;
                allowSlideNext?: boolean | undefined;
                noSwiping?: boolean | undefined;
                noSwipingClass?: string | undefined;
                noSwipingSelector?: string | undefined;
                swipeHandler?: HTMLElement | {
                    readonly [x: number]: string;
                    toString: () => string;
                    charAt: (pos: number) => string;
                    charCodeAt: (index: number) => number;
                    concat: (...strings: string[]) => string;
                    indexOf: (searchString: string, position?: number) => number;
                    lastIndexOf: (searchString: string, position?: number) => number;
                    localeCompare: {
                        (that: string): number;
                        (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                        (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                    };
                    match: {
                        (regexp: string | RegExp): RegExpMatchArray | null;
                        (matcher: {
                            [Symbol.match](string: string): RegExpMatchArray | null;
                        }): RegExpMatchArray | null;
                    };
                    replace: {
                        (searchValue: string | RegExp, replaceValue: string): string;
                        (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replaceValue: string): string;
                        }, replaceValue: string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                        }, replacer: (substring: string, ...args: any[]) => string): string;
                    };
                    search: {
                        (regexp: string | RegExp): number;
                        (searcher: {
                            [Symbol.search](string: string): number;
                        }): number;
                    };
                    slice: (start?: number, end?: number) => string;
                    split: {
                        (separator: string | RegExp, limit?: number): string[];
                        (splitter: {
                            [Symbol.split](string: string, limit?: number): string[];
                        }, limit?: number): string[];
                    };
                    substring: (start: number, end?: number) => string;
                    toLowerCase: () => string;
                    toLocaleLowerCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    toUpperCase: () => string;
                    toLocaleUpperCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    trim: () => string;
                    readonly length: number;
                    substr: (from: number, length?: number) => string;
                    valueOf: () => string;
                    codePointAt: (pos: number) => number | undefined;
                    includes: (searchString: string, position?: number) => boolean;
                    endsWith: (searchString: string, endPosition?: number) => boolean;
                    normalize: {
                        (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                        (form?: string): string;
                    };
                    repeat: (count: number) => string;
                    startsWith: (searchString: string, position?: number) => boolean;
                    anchor: (name: string) => string;
                    big: () => string;
                    blink: () => string;
                    bold: () => string;
                    fixed: () => string;
                    fontcolor: (color: string) => string;
                    fontsize: {
                        (size: number): string;
                        (size: string): string;
                    };
                    italics: () => string;
                    link: (url: string) => string;
                    small: () => string;
                    strike: () => string;
                    sub: () => string;
                    sup: () => string;
                    padStart: (maxLength: number, fillString?: string) => string;
                    padEnd: (maxLength: number, fillString?: string) => string;
                    trimEnd: () => string;
                    trimStart: () => string;
                    trimLeft: () => string;
                    trimRight: () => string;
                    matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                    [Symbol.iterator]: () => StringIterator<string>;
                    at: (index: number) => string | undefined;
                } | null | undefined;
                preventClicks?: boolean | undefined;
                preventClicksPropagation?: boolean | undefined;
                slideToClickedSlide?: boolean | undefined;
                watchSlidesProgress?: boolean | undefined;
                loop?: boolean | undefined;
                loopAddBlankSlides?: boolean | undefined;
                loopAdditionalSlides?: number | undefined;
                loopPreventsSliding?: boolean | undefined;
                rewind?: boolean | undefined;
                breakpoints?: {
                    [width: number]: import('swiper/types').SwiperOptions;
                    [ratio: string]: import('swiper/types').SwiperOptions;
                } | undefined;
                breakpointsBase?: ("window" | "container") | undefined;
                observer?: boolean | undefined;
                observeSlideChildren?: boolean | undefined;
                observeParents?: boolean | undefined;
                containerModifierClass?: string | undefined;
                slideClass?: string | undefined;
                slideActiveClass?: string | undefined;
                slideVisibleClass?: string | undefined;
                slideFullyVisibleClass?: string | undefined;
                slideBlankClass?: string | undefined;
                slideNextClass?: string | undefined;
                slidePrevClass?: string | undefined;
                wrapperClass?: string | undefined;
                lazyPreloaderClass?: string | undefined;
                lazyPreloadPrevNext?: number | undefined;
                a11y?: {
                    enabled?: boolean | undefined;
                    prevSlideMessage?: string | undefined;
                    nextSlideMessage?: string | undefined;
                    firstSlideMessage?: string | undefined;
                    lastSlideMessage?: string | undefined;
                    paginationBulletMessage?: string | undefined;
                    notificationClass?: string | undefined;
                    containerMessage?: (string | null) | undefined;
                    containerRoleDescriptionMessage?: (string | null) | undefined;
                    containerRole?: (string | null) | undefined;
                    itemRoleDescriptionMessage?: (string | null) | undefined;
                    slideLabelMessage?: string | undefined;
                    slideRole?: string | undefined;
                    id?: (string | number | null) | undefined;
                    scrollOnFocus?: boolean | undefined;
                } | undefined;
                autoplay?: boolean | {
                    delay?: number | undefined;
                    stopOnLastSlide?: boolean | undefined;
                    disableOnInteraction?: boolean | undefined;
                    reverseDirection?: boolean | undefined;
                    waitForTransition?: boolean | undefined;
                    pauseOnMouseEnter?: boolean | undefined;
                } | undefined;
                controller?: {
                    control?: string | HTMLElement | any | any[] | null | undefined;
                    inverse?: boolean | undefined;
                    by?: ("slide" | "container") | undefined;
                } | undefined;
                coverflowEffect?: {
                    slideShadows?: boolean | undefined;
                    rotate?: number | undefined;
                    stretch?: number | undefined;
                    depth?: number | undefined;
                    scale?: number | undefined;
                    modifier?: number | undefined;
                } | undefined;
                cubeEffect?: {
                    slideShadows?: boolean | undefined;
                    shadow?: boolean | undefined;
                    shadowOffset?: number | undefined;
                    shadowScale?: number | undefined;
                } | undefined;
                fadeEffect?: {
                    crossFade?: boolean | undefined;
                } | undefined;
                flipEffect?: {
                    slideShadows?: boolean | undefined;
                    limitRotation?: boolean | undefined;
                } | undefined;
                creativeEffect?: {
                    prev?: {
                        translate?: (string | number)[] | undefined;
                        rotate?: number[] | undefined;
                        opacity?: number | undefined;
                        scale?: number | undefined;
                        shadow?: boolean | undefined;
                        origin?: string | undefined;
                    } | undefined;
                    next?: {
                        translate?: (string | number)[] | undefined;
                        rotate?: number[] | undefined;
                        opacity?: number | undefined;
                        scale?: number | undefined;
                        shadow?: boolean | undefined;
                        origin?: string | undefined;
                    } | undefined;
                    limitProgress?: number | undefined;
                    shadowPerProgress?: boolean | undefined;
                    progressMultiplier?: number | undefined;
                    perspective?: boolean | undefined;
                } | undefined;
                cardsEffect?: {
                    slideShadows?: boolean | undefined;
                    rotate?: boolean | undefined;
                    perSlideRotate?: number | undefined;
                    perSlideOffset?: number | undefined;
                } | undefined;
                hashNavigation?: boolean | {
                    watchState?: boolean | undefined;
                    replaceState?: boolean | undefined;
                    getSlideIndex?: ((swiper: import('swiper/types').Swiper, hash: string) => number) | undefined;
                } | undefined;
                history?: boolean | {
                    enabled?: boolean | undefined;
                    root?: string | undefined;
                    replaceState?: boolean | undefined;
                    key?: string | undefined;
                    keepQuery?: boolean | undefined;
                } | undefined;
                keyboard?: boolean | {
                    enabled?: boolean | undefined;
                    onlyInViewport?: boolean | undefined;
                    pageUpDown?: boolean | undefined;
                } | undefined;
                mousewheel?: boolean | {
                    enabled?: boolean | undefined;
                    forceToAxis?: boolean | undefined;
                    releaseOnEdges?: boolean | undefined;
                    invert?: boolean | undefined;
                    sensitivity?: number | undefined;
                    eventsTarget?: HTMLElement | "container" | "wrapper" | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | undefined;
                    thresholdDelta?: (number | null) | undefined;
                    thresholdTime?: (number | null) | undefined;
                    noMousewheelClass?: string | undefined;
                } | undefined;
                navigation?: boolean | {
                    enabled?: boolean | undefined;
                    nextEl?: HTMLElement | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | null | undefined;
                    prevEl?: HTMLElement | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | null | undefined;
                    hideOnClick?: boolean | undefined;
                    disabledClass?: string | undefined;
                    hiddenClass?: string | undefined;
                    lockClass?: string | undefined;
                    navigationDisabledClass?: string | undefined;
                } | undefined;
                pagination?: boolean | {
                    enabled?: boolean | undefined;
                    el?: HTMLElement | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | null | undefined;
                    type?: ("bullets" | "fraction" | "progressbar" | "custom") | undefined;
                    bulletElement?: string | undefined;
                    dynamicBullets?: boolean | undefined;
                    dynamicMainBullets?: number | undefined;
                    hideOnClick?: boolean | undefined;
                    clickable?: boolean | undefined;
                    progressbarOpposite?: boolean | undefined;
                    formatFractionCurrent?: ((number: number) => number | string) | undefined;
                    formatFractionTotal?: ((number: number) => number | string) | undefined;
                    renderBullet?: ((index: number, className: string) => string) | undefined;
                    renderFraction?: ((currentClass: string, totalClass: string) => string) | undefined;
                    renderProgressbar?: ((progressbarFillClass: string) => string) | undefined;
                    renderCustom?: ((swiper: import('swiper/types').Swiper, current: number, total: number) => string) | undefined;
                    bulletClass?: string | undefined;
                    bulletActiveClass?: string | undefined;
                    modifierClass?: string | undefined;
                    currentClass?: string | undefined;
                    totalClass?: string | undefined;
                    hiddenClass?: string | undefined;
                    progressbarFillClass?: string | undefined;
                    progressbarOppositeClass?: string | undefined;
                    clickableClass?: string | undefined;
                    lockClass?: string | undefined;
                    horizontalClass?: string | undefined;
                    verticalClass?: string | undefined;
                    paginationDisabledClass?: string | undefined;
                } | undefined;
                parallax?: boolean | {
                    enabled?: boolean | undefined;
                } | undefined;
                scrollbar?: boolean | {
                    enabled?: boolean | undefined;
                    el?: HTMLElement | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | null | undefined;
                    hide?: boolean | undefined;
                    draggable?: boolean | undefined;
                    snapOnRelease?: boolean | undefined;
                    dragSize?: ("auto" | number) | undefined;
                    lockClass?: string | undefined;
                    dragClass?: string | undefined;
                    scrollbarDisabledClass?: string | undefined;
                    horizontalClass?: string | undefined;
                    verticalClass?: string | undefined;
                } | undefined;
                thumbs?: {
                    swiper?: string | any | null | undefined;
                    slideThumbActiveClass?: string | undefined;
                    thumbsContainerClass?: string | undefined;
                    multipleActiveThumbs?: boolean | undefined;
                    autoScrollOffset?: number | undefined;
                } | undefined;
                virtual?: boolean | {
                    enabled?: boolean | undefined;
                    slides?: any[] | undefined;
                    cache?: boolean | undefined;
                    addSlidesBefore?: number | undefined;
                    addSlidesAfter?: number | undefined;
                    renderSlide?: ((slide: any, index: any) => any | null) | undefined;
                    renderExternal?: ((data: import('swiper/types').VirtualData<any>) => any | null) | undefined;
                    renderExternalUpdate?: boolean | undefined;
                } | undefined;
                zoom?: boolean | {
                    limitToOriginalSize?: boolean | undefined;
                    maxRatio?: number | undefined;
                    minRatio?: number | undefined;
                    toggle?: boolean | undefined;
                    containerClass?: string | undefined;
                    zoomedSlideClass?: string | undefined;
                } | undefined;
                freeMode?: boolean | {
                    enabled?: boolean | undefined;
                    momentum?: boolean | undefined;
                    momentumRatio?: number | undefined;
                    momentumVelocityRatio?: number | undefined;
                    momentumBounce?: boolean | undefined;
                    momentumBounceRatio?: number | undefined;
                    minimumVelocity?: number | undefined;
                    sticky?: boolean | undefined;
                } | undefined;
                grid?: {
                    rows?: number | undefined;
                    fill?: ("row" | "column") | undefined;
                } | undefined;
                _emitClasses?: boolean | undefined;
            };
            originalParams: {
                modules?: import('swiper/types').SwiperModule[] | undefined;
                injectStyles?: string[] | undefined;
                injectStylesUrls?: string[] | undefined;
                init?: boolean | undefined;
                enabled?: boolean | undefined;
                updateOnWindowResize?: boolean | undefined;
                resizeObserver?: boolean | undefined;
                initialSlide?: number | undefined;
                direction?: ("horizontal" | "vertical") | undefined;
                oneWayMovement?: boolean | undefined;
                swiperElementNodeName?: string | undefined;
                speed?: number | undefined;
                setWrapperSize?: boolean | undefined;
                virtualTranslate?: boolean | undefined;
                width?: (number | null) | undefined;
                height?: (number | null) | undefined;
                autoHeight?: boolean | undefined;
                roundLengths?: boolean | undefined;
                nested?: boolean | undefined;
                createElements?: boolean | undefined;
                eventsPrefix?: string | undefined;
                focusableElements?: string | undefined;
                uniqueNavElements?: boolean | undefined;
                effect?: ("slide" | "fade" | "cube" | "coverflow" | "flip" | "creative" | "cards" | string) | undefined;
                runCallbacksOnInit?: boolean | undefined;
                watchOverflow?: boolean | undefined;
                userAgent?: (string | null) | undefined;
                url?: (string | null) | undefined;
                on?: {
                    init?: ((swiper: import('swiper/types').Swiper) => any) | undefined;
                    beforeDestroy?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slidesUpdated?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideChangeTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideChangeTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideNextTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideNextTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slidePrevTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slidePrevTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    transitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    transitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    touchStart?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    touchMove?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    touchMoveOpposite?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    sliderMove?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    touchEnd?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    click?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    tap?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    doubleTap?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    progress?: ((swiper: import('swiper/types').Swiper, progress: number) => void) | undefined;
                    reachBeginning?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    reachEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    toEdge?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    fromEdge?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    setTranslate?: ((swiper: import('swiper/types').Swiper, translate: number) => void) | undefined;
                    setTransition?: ((swiper: import('swiper/types').Swiper, transition: number) => void) | undefined;
                    resize?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    observerUpdate?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    beforeLoopFix?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    loopFix?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    breakpoint?: ((swiper: import('swiper/types').Swiper, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                    _beforeBreakpoint?: ((swiper: import('swiper/types').Swiper, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                    _containerClasses?: ((swiper: import('swiper/types').Swiper, classNames: string) => void) | undefined;
                    _slideClass?: ((swiper: import('swiper/types').Swiper, slideEl: HTMLElement, classNames: string) => void) | undefined;
                    _slideClasses?: ((swiper: import('swiper/types').Swiper, slides: {
                        slideEl: HTMLElement;
                        classNames: string;
                        index: number;
                    }[]) => void) | undefined;
                    _swiper?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    _freeModeNoMomentumRelease?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    activeIndexChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    snapIndexChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    realIndexChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    afterInit?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    beforeInit?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    beforeResize?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    beforeSlideChangeStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    beforeTransitionStart?: ((swiper: import('swiper/types').Swiper, speed: number, internal: any) => void) | undefined;
                    changeDirection?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    doubleClick?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    destroy?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    momentumBounce?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    orientationchange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideResetTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideResetTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    sliderFirstMove?: ((swiper: import('swiper/types').Swiper, event: TouchEvent) => void) | undefined;
                    slidesLengthChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slidesGridLengthChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    snapGridLengthChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    update?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    lock?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    unlock?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    autoplayStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    autoplayStop?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    autoplayPause?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    autoplayResume?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    autoplayTimeLeft?: ((swiper: import('swiper/types').Swiper, timeLeft: number, percentage: number) => void) | undefined;
                    autoplay?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    hashChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    hashSet?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    keyPress?: ((swiper: import('swiper/types').Swiper, keyCode: string) => void) | undefined;
                    scroll?: ((swiper: import('swiper/types').Swiper, event: WheelEvent) => void) | undefined;
                    navigationHide?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    navigationShow?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    navigationPrev?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    navigationNext?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    paginationRender?: ((swiper: import('swiper/types').Swiper, paginationEl: HTMLElement) => void) | undefined;
                    paginationUpdate?: ((swiper: import('swiper/types').Swiper, paginationEl: HTMLElement) => void) | undefined;
                    paginationHide?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    paginationShow?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    scrollbarDragStart?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    scrollbarDragMove?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    scrollbarDragEnd?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    zoomChange?: ((swiper: import('swiper/types').Swiper, scale: number, imageEl: HTMLElement, slideEl: HTMLElement) => void) | undefined;
                } | undefined;
                onAny?: ((handler: (eventName: string, ...args: any[]) => void) => void) | undefined;
                cssMode?: boolean | undefined;
                spaceBetween?: (number | string) | undefined;
                slidesPerView?: (number | "auto") | undefined;
                maxBackfaceHiddenSlides?: number | undefined;
                slidesPerGroup?: number | undefined;
                slidesPerGroupSkip?: number | undefined;
                slidesPerGroupAuto?: boolean | undefined;
                centeredSlides?: boolean | undefined;
                centeredSlidesBounds?: boolean | undefined;
                slidesOffsetBefore?: number | undefined;
                slidesOffsetAfter?: number | undefined;
                normalizeSlideIndex?: boolean | undefined;
                centerInsufficientSlides?: boolean | undefined;
                grabCursor?: boolean | undefined;
                touchEventsTarget?: ("container" | "wrapper") | undefined;
                touchRatio?: number | undefined;
                touchAngle?: number | undefined;
                simulateTouch?: boolean | undefined;
                shortSwipes?: boolean | undefined;
                longSwipes?: boolean | undefined;
                longSwipesRatio?: number | undefined;
                longSwipesMs?: number | undefined;
                followFinger?: boolean | undefined;
                allowTouchMove?: boolean | undefined;
                threshold?: number | undefined;
                touchStartPreventDefault?: boolean | undefined;
                touchStartForcePreventDefault?: boolean | undefined;
                touchMoveStopPropagation?: boolean | undefined;
                edgeSwipeDetection?: (boolean | string) | undefined;
                edgeSwipeThreshold?: number | undefined;
                touchReleaseOnEdges?: boolean | undefined;
                passiveListeners?: boolean | undefined;
                resistance?: boolean | undefined;
                resistanceRatio?: number | undefined;
                preventInteractionOnTransition?: boolean | undefined;
                allowSlidePrev?: boolean | undefined;
                allowSlideNext?: boolean | undefined;
                noSwiping?: boolean | undefined;
                noSwipingClass?: string | undefined;
                noSwipingSelector?: string | undefined;
                swipeHandler?: HTMLElement | {
                    readonly [x: number]: string;
                    toString: () => string;
                    charAt: (pos: number) => string;
                    charCodeAt: (index: number) => number;
                    concat: (...strings: string[]) => string;
                    indexOf: (searchString: string, position?: number) => number;
                    lastIndexOf: (searchString: string, position?: number) => number;
                    localeCompare: {
                        (that: string): number;
                        (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                        (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                    };
                    match: {
                        (regexp: string | RegExp): RegExpMatchArray | null;
                        (matcher: {
                            [Symbol.match](string: string): RegExpMatchArray | null;
                        }): RegExpMatchArray | null;
                    };
                    replace: {
                        (searchValue: string | RegExp, replaceValue: string): string;
                        (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replaceValue: string): string;
                        }, replaceValue: string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                        }, replacer: (substring: string, ...args: any[]) => string): string;
                    };
                    search: {
                        (regexp: string | RegExp): number;
                        (searcher: {
                            [Symbol.search](string: string): number;
                        }): number;
                    };
                    slice: (start?: number, end?: number) => string;
                    split: {
                        (separator: string | RegExp, limit?: number): string[];
                        (splitter: {
                            [Symbol.split](string: string, limit?: number): string[];
                        }, limit?: number): string[];
                    };
                    substring: (start: number, end?: number) => string;
                    toLowerCase: () => string;
                    toLocaleLowerCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    toUpperCase: () => string;
                    toLocaleUpperCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    trim: () => string;
                    readonly length: number;
                    substr: (from: number, length?: number) => string;
                    valueOf: () => string;
                    codePointAt: (pos: number) => number | undefined;
                    includes: (searchString: string, position?: number) => boolean;
                    endsWith: (searchString: string, endPosition?: number) => boolean;
                    normalize: {
                        (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                        (form?: string): string;
                    };
                    repeat: (count: number) => string;
                    startsWith: (searchString: string, position?: number) => boolean;
                    anchor: (name: string) => string;
                    big: () => string;
                    blink: () => string;
                    bold: () => string;
                    fixed: () => string;
                    fontcolor: (color: string) => string;
                    fontsize: {
                        (size: number): string;
                        (size: string): string;
                    };
                    italics: () => string;
                    link: (url: string) => string;
                    small: () => string;
                    strike: () => string;
                    sub: () => string;
                    sup: () => string;
                    padStart: (maxLength: number, fillString?: string) => string;
                    padEnd: (maxLength: number, fillString?: string) => string;
                    trimEnd: () => string;
                    trimStart: () => string;
                    trimLeft: () => string;
                    trimRight: () => string;
                    matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                    [Symbol.iterator]: () => StringIterator<string>;
                    at: (index: number) => string | undefined;
                } | null | undefined;
                preventClicks?: boolean | undefined;
                preventClicksPropagation?: boolean | undefined;
                slideToClickedSlide?: boolean | undefined;
                watchSlidesProgress?: boolean | undefined;
                loop?: boolean | undefined;
                loopAddBlankSlides?: boolean | undefined;
                loopAdditionalSlides?: number | undefined;
                loopPreventsSliding?: boolean | undefined;
                rewind?: boolean | undefined;
                breakpoints?: {
                    [width: number]: import('swiper/types').SwiperOptions;
                    [ratio: string]: import('swiper/types').SwiperOptions;
                } | undefined;
                breakpointsBase?: ("window" | "container") | undefined;
                observer?: boolean | undefined;
                observeSlideChildren?: boolean | undefined;
                observeParents?: boolean | undefined;
                containerModifierClass?: string | undefined;
                slideClass?: string | undefined;
                slideActiveClass?: string | undefined;
                slideVisibleClass?: string | undefined;
                slideFullyVisibleClass?: string | undefined;
                slideBlankClass?: string | undefined;
                slideNextClass?: string | undefined;
                slidePrevClass?: string | undefined;
                wrapperClass?: string | undefined;
                lazyPreloaderClass?: string | undefined;
                lazyPreloadPrevNext?: number | undefined;
                a11y?: {
                    enabled?: boolean | undefined;
                    prevSlideMessage?: string | undefined;
                    nextSlideMessage?: string | undefined;
                    firstSlideMessage?: string | undefined;
                    lastSlideMessage?: string | undefined;
                    paginationBulletMessage?: string | undefined;
                    notificationClass?: string | undefined;
                    containerMessage?: (string | null) | undefined;
                    containerRoleDescriptionMessage?: (string | null) | undefined;
                    containerRole?: (string | null) | undefined;
                    itemRoleDescriptionMessage?: (string | null) | undefined;
                    slideLabelMessage?: string | undefined;
                    slideRole?: string | undefined;
                    id?: (string | number | null) | undefined;
                    scrollOnFocus?: boolean | undefined;
                } | undefined;
                autoplay?: boolean | {
                    delay?: number | undefined;
                    stopOnLastSlide?: boolean | undefined;
                    disableOnInteraction?: boolean | undefined;
                    reverseDirection?: boolean | undefined;
                    waitForTransition?: boolean | undefined;
                    pauseOnMouseEnter?: boolean | undefined;
                } | undefined;
                controller?: {
                    control?: string | HTMLElement | any | any[] | null | undefined;
                    inverse?: boolean | undefined;
                    by?: ("slide" | "container") | undefined;
                } | undefined;
                coverflowEffect?: {
                    slideShadows?: boolean | undefined;
                    rotate?: number | undefined;
                    stretch?: number | undefined;
                    depth?: number | undefined;
                    scale?: number | undefined;
                    modifier?: number | undefined;
                } | undefined;
                cubeEffect?: {
                    slideShadows?: boolean | undefined;
                    shadow?: boolean | undefined;
                    shadowOffset?: number | undefined;
                    shadowScale?: number | undefined;
                } | undefined;
                fadeEffect?: {
                    crossFade?: boolean | undefined;
                } | undefined;
                flipEffect?: {
                    slideShadows?: boolean | undefined;
                    limitRotation?: boolean | undefined;
                } | undefined;
                creativeEffect?: {
                    prev?: {
                        translate?: (string | number)[] | undefined;
                        rotate?: number[] | undefined;
                        opacity?: number | undefined;
                        scale?: number | undefined;
                        shadow?: boolean | undefined;
                        origin?: string | undefined;
                    } | undefined;
                    next?: {
                        translate?: (string | number)[] | undefined;
                        rotate?: number[] | undefined;
                        opacity?: number | undefined;
                        scale?: number | undefined;
                        shadow?: boolean | undefined;
                        origin?: string | undefined;
                    } | undefined;
                    limitProgress?: number | undefined;
                    shadowPerProgress?: boolean | undefined;
                    progressMultiplier?: number | undefined;
                    perspective?: boolean | undefined;
                } | undefined;
                cardsEffect?: {
                    slideShadows?: boolean | undefined;
                    rotate?: boolean | undefined;
                    perSlideRotate?: number | undefined;
                    perSlideOffset?: number | undefined;
                } | undefined;
                hashNavigation?: boolean | {
                    watchState?: boolean | undefined;
                    replaceState?: boolean | undefined;
                    getSlideIndex?: ((swiper: import('swiper/types').Swiper, hash: string) => number) | undefined;
                } | undefined;
                history?: boolean | {
                    enabled?: boolean | undefined;
                    root?: string | undefined;
                    replaceState?: boolean | undefined;
                    key?: string | undefined;
                    keepQuery?: boolean | undefined;
                } | undefined;
                keyboard?: boolean | {
                    enabled?: boolean | undefined;
                    onlyInViewport?: boolean | undefined;
                    pageUpDown?: boolean | undefined;
                } | undefined;
                mousewheel?: boolean | {
                    enabled?: boolean | undefined;
                    forceToAxis?: boolean | undefined;
                    releaseOnEdges?: boolean | undefined;
                    invert?: boolean | undefined;
                    sensitivity?: number | undefined;
                    eventsTarget?: HTMLElement | "container" | "wrapper" | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | undefined;
                    thresholdDelta?: (number | null) | undefined;
                    thresholdTime?: (number | null) | undefined;
                    noMousewheelClass?: string | undefined;
                } | undefined;
                navigation?: boolean | {
                    enabled?: boolean | undefined;
                    nextEl?: HTMLElement | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | null | undefined;
                    prevEl?: HTMLElement | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | null | undefined;
                    hideOnClick?: boolean | undefined;
                    disabledClass?: string | undefined;
                    hiddenClass?: string | undefined;
                    lockClass?: string | undefined;
                    navigationDisabledClass?: string | undefined;
                } | undefined;
                pagination?: boolean | {
                    enabled?: boolean | undefined;
                    el?: HTMLElement | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | null | undefined;
                    type?: ("bullets" | "fraction" | "progressbar" | "custom") | undefined;
                    bulletElement?: string | undefined;
                    dynamicBullets?: boolean | undefined;
                    dynamicMainBullets?: number | undefined;
                    hideOnClick?: boolean | undefined;
                    clickable?: boolean | undefined;
                    progressbarOpposite?: boolean | undefined;
                    formatFractionCurrent?: ((number: number) => number | string) | undefined;
                    formatFractionTotal?: ((number: number) => number | string) | undefined;
                    renderBullet?: ((index: number, className: string) => string) | undefined;
                    renderFraction?: ((currentClass: string, totalClass: string) => string) | undefined;
                    renderProgressbar?: ((progressbarFillClass: string) => string) | undefined;
                    renderCustom?: ((swiper: import('swiper/types').Swiper, current: number, total: number) => string) | undefined;
                    bulletClass?: string | undefined;
                    bulletActiveClass?: string | undefined;
                    modifierClass?: string | undefined;
                    currentClass?: string | undefined;
                    totalClass?: string | undefined;
                    hiddenClass?: string | undefined;
                    progressbarFillClass?: string | undefined;
                    progressbarOppositeClass?: string | undefined;
                    clickableClass?: string | undefined;
                    lockClass?: string | undefined;
                    horizontalClass?: string | undefined;
                    verticalClass?: string | undefined;
                    paginationDisabledClass?: string | undefined;
                } | undefined;
                parallax?: boolean | {
                    enabled?: boolean | undefined;
                } | undefined;
                scrollbar?: boolean | {
                    enabled?: boolean | undefined;
                    el?: HTMLElement | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | null | undefined;
                    hide?: boolean | undefined;
                    draggable?: boolean | undefined;
                    snapOnRelease?: boolean | undefined;
                    dragSize?: ("auto" | number) | undefined;
                    lockClass?: string | undefined;
                    dragClass?: string | undefined;
                    scrollbarDisabledClass?: string | undefined;
                    horizontalClass?: string | undefined;
                    verticalClass?: string | undefined;
                } | undefined;
                thumbs?: {
                    swiper?: string | any | null | undefined;
                    slideThumbActiveClass?: string | undefined;
                    thumbsContainerClass?: string | undefined;
                    multipleActiveThumbs?: boolean | undefined;
                    autoScrollOffset?: number | undefined;
                } | undefined;
                virtual?: boolean | {
                    enabled?: boolean | undefined;
                    slides?: any[] | undefined;
                    cache?: boolean | undefined;
                    addSlidesBefore?: number | undefined;
                    addSlidesAfter?: number | undefined;
                    renderSlide?: ((slide: any, index: any) => any | null) | undefined;
                    renderExternal?: ((data: import('swiper/types').VirtualData<any>) => any | null) | undefined;
                    renderExternalUpdate?: boolean | undefined;
                } | undefined;
                zoom?: boolean | {
                    limitToOriginalSize?: boolean | undefined;
                    maxRatio?: number | undefined;
                    minRatio?: number | undefined;
                    toggle?: boolean | undefined;
                    containerClass?: string | undefined;
                    zoomedSlideClass?: string | undefined;
                } | undefined;
                freeMode?: boolean | {
                    enabled?: boolean | undefined;
                    momentum?: boolean | undefined;
                    momentumRatio?: number | undefined;
                    momentumVelocityRatio?: number | undefined;
                    momentumBounce?: boolean | undefined;
                    momentumBounceRatio?: number | undefined;
                    minimumVelocity?: number | undefined;
                    sticky?: boolean | undefined;
                } | undefined;
                grid?: {
                    rows?: number | undefined;
                    fill?: ("row" | "column") | undefined;
                } | undefined;
                _emitClasses?: boolean | undefined;
            };
            el: HTMLElement;
            wrapperEl: HTMLElement;
            slidesEl: HTMLElement;
            slides: HTMLElement[];
            loopedSlides: number | null;
            width: number;
            height: number;
            translate: number;
            progress: number;
            activeIndex: number;
            realIndex: number;
            previousIndex: number;
            snapIndex: number;
            snapGrid: number[];
            slidesGrid: number[];
            slidesSizesGrid: number[];
            isBeginning: boolean;
            isEnd: boolean;
            isLocked: boolean;
            animating: boolean;
            touches: {
                startX: number;
                startY: number;
                currentX: number;
                currentY: number;
                diff: number;
            };
            clickedIndex: number;
            clickedSlide: HTMLElement;
            allowSlideNext: boolean;
            allowSlidePrev: boolean;
            allowTouchMove: boolean;
            swipeDirection: "prev" | "next";
            rtlTranslate: boolean;
            disable: () => void;
            enable: () => void;
            setProgress: (progress: number, speed?: number) => void;
            slideNext: (speed?: number, runCallbacks?: boolean) => boolean;
            slidePrev: (speed?: number, runCallbacks?: boolean) => boolean;
            slideTo: (index: number, speed?: number, runCallbacks?: boolean) => boolean;
            slideToLoop: (index: number, speed?: number, runCallbacks?: boolean) => import('swiper/types').Swiper;
            slideReset: (speed?: number, runCallbacks?: boolean) => boolean;
            slideToClosest: (speed?: number, runCallbacks?: boolean) => boolean;
            slidesPerViewDynamic: () => number;
            updateAutoHeight: (speed?: number) => void;
            update: () => void;
            updateSize: () => void;
            updateSlides: () => void;
            updateProgress: () => void;
            updateSlidesClasses: () => void;
            changeDirection: (direction?: "horizontal" | "vertical", needUpdate?: boolean) => void;
            changeLanguageDirection: (direction: "rtl" | "ltr") => void;
            detachEvents: () => void;
            attachEvents: () => void;
            loopCreate: () => void;
            loopDestroy: () => void;
            init: (el?: HTMLElement) => import('swiper/types').Swiper;
            destroy: (deleteInstance?: boolean, cleanStyles?: boolean) => void;
            setTranslate: (translate: any) => void;
            getTranslate: () => any;
            translateTo: (translate: number, speed: number, runCallbacks?: boolean, translateBounds?: boolean) => any;
            minTranslate: () => number;
            maxTranslate: () => number;
            unsetGrabCursor: () => void;
            setGrabCursor: () => void;
            onAny: (handler: (eventName: string, ...args: any[]) => void) => void;
            offAny: (handler: (eventName: string, ...args: any[]) => void) => void;
            isHorizontal: () => boolean;
            getBreakpoint: (breakpoints: import('swiper/types').SwiperOptions["breakpoints"]) => string;
            setBreakpoint: () => void;
            currentBreakpoint: any;
            destroyed: boolean;
            modules: Array<import('swiper/types').SwiperModule>;
            a11y: import('swiper/types').A11yMethods;
            autoplay: {
                running: boolean;
                paused: boolean;
                timeLeft: number;
                pause: () => void;
                resume: () => void;
                start: () => boolean;
                stop: () => boolean;
            };
            controller: {
                control?: any | any[] | undefined;
            };
            coverflowEffect: import('swiper/types').CoverflowEffectMethods;
            cubeEffect: import('swiper/types').CubeEffectMethods;
            fadeEffect: import('swiper/types').FadeEffectMethods;
            flipEffect: import('swiper/types').FlipEffectMethods;
            creativeEffect: import('swiper/types').CreativeEffectMethods;
            cardsEffect: import('swiper/types').CardsEffectMethods;
            hashNavigation: import('swiper/types').HashNavigationMethods;
            history: import('swiper/types').HistoryMethods;
            keyboard: {
                enabled: boolean;
                enable: () => void;
                disable: () => void;
            };
            mousewheel: {
                enabled: boolean;
                enable: () => void;
                disable: () => void;
            };
            navigation: {
                nextEl: HTMLElement;
                prevEl: HTMLElement;
                update: () => void;
                init: () => void;
                destroy: () => void;
            };
            pagination: {
                el: HTMLElement;
                bullets: HTMLElement[];
                render: () => void;
                update: () => void;
                init: () => void;
                destroy: () => void;
            };
            parallax: import('swiper/types').ParallaxMethods;
            scrollbar: {
                el: HTMLElement;
                dragEl: HTMLElement;
                updateSize: () => void;
                setTranslate: () => void;
                init: () => void;
                destroy: () => void;
            };
            thumbs: {
                swiper: any;
                update: (initial: boolean) => void;
                init: () => boolean;
            };
            virtual: {
                cache: object;
                from: number;
                to: number;
                slides: any[];
                appendSlide: (slide: HTMLElement | string | HTMLElement[] | string[]) => void;
                prependSlide: (slide: HTMLElement | string | HTMLElement[] | string[]) => void;
                removeSlide: (slideIndexes: number[]) => void;
                removeAllSlides: () => void;
                update: (force: boolean) => void;
            };
            zoom: {
                enabled: boolean;
                scale: number;
                enable: () => void;
                disable: () => void;
                in: (ratio?: number) => void;
                out: () => void;
                toggle: (event?: MouseEvent | TouchEvent | PointerEvent) => void;
            };
            freeMode: {
                onTouchMove: () => void;
                onTouchEnd: () => void;
            };
            on: <E extends keyof import('swiper/types').SwiperEvents>(event: E, handler: import('swiper/types').SwiperEvents[E]) => void;
            once: <E extends keyof import('swiper/types').SwiperEvents>(event: E, handler: import('swiper/types').SwiperEvents[E]) => void;
            off: {
                <E extends keyof import('swiper/types').SwiperEvents>(event: E, handler: import('swiper/types').SwiperEvents[E]): void;
                <E extends keyof import('swiper/types').SwiperEvents>(event: E): void;
            };
            emit: <E extends keyof import('swiper/types').SwiperEvents>(event: E, ...args: any[]) => void;
            appendSlide: (slides: HTMLElement | string | string[] | HTMLElement[]) => void;
            prependSlide: (slides: HTMLElement | string | string[] | HTMLElement[]) => void;
            addSlide: (index: number, slides: HTMLElement | string | string[] | HTMLElement[]) => void;
            removeSlide: (slideIndex: number | number[]) => void;
            removeAllSlides: () => void;
        } | null, import('swiper/types').Swiper | {
            params: {
                modules?: import('swiper/types').SwiperModule[] | undefined;
                injectStyles?: string[] | undefined;
                injectStylesUrls?: string[] | undefined;
                init?: boolean | undefined;
                enabled?: boolean | undefined;
                updateOnWindowResize?: boolean | undefined;
                resizeObserver?: boolean | undefined;
                initialSlide?: number | undefined;
                direction?: ("horizontal" | "vertical") | undefined;
                oneWayMovement?: boolean | undefined;
                swiperElementNodeName?: string | undefined;
                speed?: number | undefined;
                setWrapperSize?: boolean | undefined;
                virtualTranslate?: boolean | undefined;
                width?: (number | null) | undefined;
                height?: (number | null) | undefined;
                autoHeight?: boolean | undefined;
                roundLengths?: boolean | undefined;
                nested?: boolean | undefined;
                createElements?: boolean | undefined;
                eventsPrefix?: string | undefined;
                focusableElements?: string | undefined;
                uniqueNavElements?: boolean | undefined;
                effect?: ("slide" | "fade" | "cube" | "coverflow" | "flip" | "creative" | "cards" | string) | undefined;
                runCallbacksOnInit?: boolean | undefined;
                watchOverflow?: boolean | undefined;
                userAgent?: (string | null) | undefined;
                url?: (string | null) | undefined;
                on?: {
                    init?: ((swiper: import('swiper/types').Swiper) => any) | undefined;
                    beforeDestroy?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slidesUpdated?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideChangeTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideChangeTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideNextTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideNextTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slidePrevTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slidePrevTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    transitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    transitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    touchStart?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    touchMove?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    touchMoveOpposite?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    sliderMove?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    touchEnd?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    click?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    tap?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    doubleTap?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    progress?: ((swiper: import('swiper/types').Swiper, progress: number) => void) | undefined;
                    reachBeginning?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    reachEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    toEdge?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    fromEdge?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    setTranslate?: ((swiper: import('swiper/types').Swiper, translate: number) => void) | undefined;
                    setTransition?: ((swiper: import('swiper/types').Swiper, transition: number) => void) | undefined;
                    resize?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    observerUpdate?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    beforeLoopFix?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    loopFix?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    breakpoint?: ((swiper: import('swiper/types').Swiper, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                    _beforeBreakpoint?: ((swiper: import('swiper/types').Swiper, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                    _containerClasses?: ((swiper: import('swiper/types').Swiper, classNames: string) => void) | undefined;
                    _slideClass?: ((swiper: import('swiper/types').Swiper, slideEl: HTMLElement, classNames: string) => void) | undefined;
                    _slideClasses?: ((swiper: import('swiper/types').Swiper, slides: {
                        slideEl: HTMLElement;
                        classNames: string;
                        index: number;
                    }[]) => void) | undefined;
                    _swiper?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    _freeModeNoMomentumRelease?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    activeIndexChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    snapIndexChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    realIndexChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    afterInit?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    beforeInit?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    beforeResize?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    beforeSlideChangeStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    beforeTransitionStart?: ((swiper: import('swiper/types').Swiper, speed: number, internal: any) => void) | undefined;
                    changeDirection?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    doubleClick?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    destroy?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    momentumBounce?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    orientationchange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideResetTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideResetTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    sliderFirstMove?: ((swiper: import('swiper/types').Swiper, event: TouchEvent) => void) | undefined;
                    slidesLengthChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slidesGridLengthChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    snapGridLengthChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    update?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    lock?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    unlock?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    autoplayStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    autoplayStop?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    autoplayPause?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    autoplayResume?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    autoplayTimeLeft?: ((swiper: import('swiper/types').Swiper, timeLeft: number, percentage: number) => void) | undefined;
                    autoplay?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    hashChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    hashSet?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    keyPress?: ((swiper: import('swiper/types').Swiper, keyCode: string) => void) | undefined;
                    scroll?: ((swiper: import('swiper/types').Swiper, event: WheelEvent) => void) | undefined;
                    navigationHide?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    navigationShow?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    navigationPrev?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    navigationNext?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    paginationRender?: ((swiper: import('swiper/types').Swiper, paginationEl: HTMLElement) => void) | undefined;
                    paginationUpdate?: ((swiper: import('swiper/types').Swiper, paginationEl: HTMLElement) => void) | undefined;
                    paginationHide?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    paginationShow?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    scrollbarDragStart?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    scrollbarDragMove?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    scrollbarDragEnd?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    zoomChange?: ((swiper: import('swiper/types').Swiper, scale: number, imageEl: HTMLElement, slideEl: HTMLElement) => void) | undefined;
                } | undefined;
                onAny?: ((handler: (eventName: string, ...args: any[]) => void) => void) | undefined;
                cssMode?: boolean | undefined;
                spaceBetween?: (number | string) | undefined;
                slidesPerView?: (number | "auto") | undefined;
                maxBackfaceHiddenSlides?: number | undefined;
                slidesPerGroup?: number | undefined;
                slidesPerGroupSkip?: number | undefined;
                slidesPerGroupAuto?: boolean | undefined;
                centeredSlides?: boolean | undefined;
                centeredSlidesBounds?: boolean | undefined;
                slidesOffsetBefore?: number | undefined;
                slidesOffsetAfter?: number | undefined;
                normalizeSlideIndex?: boolean | undefined;
                centerInsufficientSlides?: boolean | undefined;
                grabCursor?: boolean | undefined;
                touchEventsTarget?: ("container" | "wrapper") | undefined;
                touchRatio?: number | undefined;
                touchAngle?: number | undefined;
                simulateTouch?: boolean | undefined;
                shortSwipes?: boolean | undefined;
                longSwipes?: boolean | undefined;
                longSwipesRatio?: number | undefined;
                longSwipesMs?: number | undefined;
                followFinger?: boolean | undefined;
                allowTouchMove?: boolean | undefined;
                threshold?: number | undefined;
                touchStartPreventDefault?: boolean | undefined;
                touchStartForcePreventDefault?: boolean | undefined;
                touchMoveStopPropagation?: boolean | undefined;
                edgeSwipeDetection?: (boolean | string) | undefined;
                edgeSwipeThreshold?: number | undefined;
                touchReleaseOnEdges?: boolean | undefined;
                passiveListeners?: boolean | undefined;
                resistance?: boolean | undefined;
                resistanceRatio?: number | undefined;
                preventInteractionOnTransition?: boolean | undefined;
                allowSlidePrev?: boolean | undefined;
                allowSlideNext?: boolean | undefined;
                noSwiping?: boolean | undefined;
                noSwipingClass?: string | undefined;
                noSwipingSelector?: string | undefined;
                swipeHandler?: HTMLElement | {
                    readonly [x: number]: string;
                    toString: () => string;
                    charAt: (pos: number) => string;
                    charCodeAt: (index: number) => number;
                    concat: (...strings: string[]) => string;
                    indexOf: (searchString: string, position?: number) => number;
                    lastIndexOf: (searchString: string, position?: number) => number;
                    localeCompare: {
                        (that: string): number;
                        (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                        (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                    };
                    match: {
                        (regexp: string | RegExp): RegExpMatchArray | null;
                        (matcher: {
                            [Symbol.match](string: string): RegExpMatchArray | null;
                        }): RegExpMatchArray | null;
                    };
                    replace: {
                        (searchValue: string | RegExp, replaceValue: string): string;
                        (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replaceValue: string): string;
                        }, replaceValue: string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                        }, replacer: (substring: string, ...args: any[]) => string): string;
                    };
                    search: {
                        (regexp: string | RegExp): number;
                        (searcher: {
                            [Symbol.search](string: string): number;
                        }): number;
                    };
                    slice: (start?: number, end?: number) => string;
                    split: {
                        (separator: string | RegExp, limit?: number): string[];
                        (splitter: {
                            [Symbol.split](string: string, limit?: number): string[];
                        }, limit?: number): string[];
                    };
                    substring: (start: number, end?: number) => string;
                    toLowerCase: () => string;
                    toLocaleLowerCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    toUpperCase: () => string;
                    toLocaleUpperCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    trim: () => string;
                    readonly length: number;
                    substr: (from: number, length?: number) => string;
                    valueOf: () => string;
                    codePointAt: (pos: number) => number | undefined;
                    includes: (searchString: string, position?: number) => boolean;
                    endsWith: (searchString: string, endPosition?: number) => boolean;
                    normalize: {
                        (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                        (form?: string): string;
                    };
                    repeat: (count: number) => string;
                    startsWith: (searchString: string, position?: number) => boolean;
                    anchor: (name: string) => string;
                    big: () => string;
                    blink: () => string;
                    bold: () => string;
                    fixed: () => string;
                    fontcolor: (color: string) => string;
                    fontsize: {
                        (size: number): string;
                        (size: string): string;
                    };
                    italics: () => string;
                    link: (url: string) => string;
                    small: () => string;
                    strike: () => string;
                    sub: () => string;
                    sup: () => string;
                    padStart: (maxLength: number, fillString?: string) => string;
                    padEnd: (maxLength: number, fillString?: string) => string;
                    trimEnd: () => string;
                    trimStart: () => string;
                    trimLeft: () => string;
                    trimRight: () => string;
                    matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                    [Symbol.iterator]: () => StringIterator<string>;
                    at: (index: number) => string | undefined;
                } | null | undefined;
                preventClicks?: boolean | undefined;
                preventClicksPropagation?: boolean | undefined;
                slideToClickedSlide?: boolean | undefined;
                watchSlidesProgress?: boolean | undefined;
                loop?: boolean | undefined;
                loopAddBlankSlides?: boolean | undefined;
                loopAdditionalSlides?: number | undefined;
                loopPreventsSliding?: boolean | undefined;
                rewind?: boolean | undefined;
                breakpoints?: {
                    [width: number]: import('swiper/types').SwiperOptions;
                    [ratio: string]: import('swiper/types').SwiperOptions;
                } | undefined;
                breakpointsBase?: ("window" | "container") | undefined;
                observer?: boolean | undefined;
                observeSlideChildren?: boolean | undefined;
                observeParents?: boolean | undefined;
                containerModifierClass?: string | undefined;
                slideClass?: string | undefined;
                slideActiveClass?: string | undefined;
                slideVisibleClass?: string | undefined;
                slideFullyVisibleClass?: string | undefined;
                slideBlankClass?: string | undefined;
                slideNextClass?: string | undefined;
                slidePrevClass?: string | undefined;
                wrapperClass?: string | undefined;
                lazyPreloaderClass?: string | undefined;
                lazyPreloadPrevNext?: number | undefined;
                a11y?: {
                    enabled?: boolean | undefined;
                    prevSlideMessage?: string | undefined;
                    nextSlideMessage?: string | undefined;
                    firstSlideMessage?: string | undefined;
                    lastSlideMessage?: string | undefined;
                    paginationBulletMessage?: string | undefined;
                    notificationClass?: string | undefined;
                    containerMessage?: (string | null) | undefined;
                    containerRoleDescriptionMessage?: (string | null) | undefined;
                    containerRole?: (string | null) | undefined;
                    itemRoleDescriptionMessage?: (string | null) | undefined;
                    slideLabelMessage?: string | undefined;
                    slideRole?: string | undefined;
                    id?: (string | number | null) | undefined;
                    scrollOnFocus?: boolean | undefined;
                } | undefined;
                autoplay?: boolean | {
                    delay?: number | undefined;
                    stopOnLastSlide?: boolean | undefined;
                    disableOnInteraction?: boolean | undefined;
                    reverseDirection?: boolean | undefined;
                    waitForTransition?: boolean | undefined;
                    pauseOnMouseEnter?: boolean | undefined;
                } | undefined;
                controller?: {
                    control?: string | HTMLElement | any | any[] | null | undefined;
                    inverse?: boolean | undefined;
                    by?: ("slide" | "container") | undefined;
                } | undefined;
                coverflowEffect?: {
                    slideShadows?: boolean | undefined;
                    rotate?: number | undefined;
                    stretch?: number | undefined;
                    depth?: number | undefined;
                    scale?: number | undefined;
                    modifier?: number | undefined;
                } | undefined;
                cubeEffect?: {
                    slideShadows?: boolean | undefined;
                    shadow?: boolean | undefined;
                    shadowOffset?: number | undefined;
                    shadowScale?: number | undefined;
                } | undefined;
                fadeEffect?: {
                    crossFade?: boolean | undefined;
                } | undefined;
                flipEffect?: {
                    slideShadows?: boolean | undefined;
                    limitRotation?: boolean | undefined;
                } | undefined;
                creativeEffect?: {
                    prev?: {
                        translate?: (string | number)[] | undefined;
                        rotate?: number[] | undefined;
                        opacity?: number | undefined;
                        scale?: number | undefined;
                        shadow?: boolean | undefined;
                        origin?: string | undefined;
                    } | undefined;
                    next?: {
                        translate?: (string | number)[] | undefined;
                        rotate?: number[] | undefined;
                        opacity?: number | undefined;
                        scale?: number | undefined;
                        shadow?: boolean | undefined;
                        origin?: string | undefined;
                    } | undefined;
                    limitProgress?: number | undefined;
                    shadowPerProgress?: boolean | undefined;
                    progressMultiplier?: number | undefined;
                    perspective?: boolean | undefined;
                } | undefined;
                cardsEffect?: {
                    slideShadows?: boolean | undefined;
                    rotate?: boolean | undefined;
                    perSlideRotate?: number | undefined;
                    perSlideOffset?: number | undefined;
                } | undefined;
                hashNavigation?: boolean | {
                    watchState?: boolean | undefined;
                    replaceState?: boolean | undefined;
                    getSlideIndex?: ((swiper: import('swiper/types').Swiper, hash: string) => number) | undefined;
                } | undefined;
                history?: boolean | {
                    enabled?: boolean | undefined;
                    root?: string | undefined;
                    replaceState?: boolean | undefined;
                    key?: string | undefined;
                    keepQuery?: boolean | undefined;
                } | undefined;
                keyboard?: boolean | {
                    enabled?: boolean | undefined;
                    onlyInViewport?: boolean | undefined;
                    pageUpDown?: boolean | undefined;
                } | undefined;
                mousewheel?: boolean | {
                    enabled?: boolean | undefined;
                    forceToAxis?: boolean | undefined;
                    releaseOnEdges?: boolean | undefined;
                    invert?: boolean | undefined;
                    sensitivity?: number | undefined;
                    eventsTarget?: HTMLElement | "container" | "wrapper" | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | undefined;
                    thresholdDelta?: (number | null) | undefined;
                    thresholdTime?: (number | null) | undefined;
                    noMousewheelClass?: string | undefined;
                } | undefined;
                navigation?: boolean | {
                    enabled?: boolean | undefined;
                    nextEl?: HTMLElement | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | null | undefined;
                    prevEl?: HTMLElement | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | null | undefined;
                    hideOnClick?: boolean | undefined;
                    disabledClass?: string | undefined;
                    hiddenClass?: string | undefined;
                    lockClass?: string | undefined;
                    navigationDisabledClass?: string | undefined;
                } | undefined;
                pagination?: boolean | {
                    enabled?: boolean | undefined;
                    el?: HTMLElement | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | null | undefined;
                    type?: ("bullets" | "fraction" | "progressbar" | "custom") | undefined;
                    bulletElement?: string | undefined;
                    dynamicBullets?: boolean | undefined;
                    dynamicMainBullets?: number | undefined;
                    hideOnClick?: boolean | undefined;
                    clickable?: boolean | undefined;
                    progressbarOpposite?: boolean | undefined;
                    formatFractionCurrent?: ((number: number) => number | string) | undefined;
                    formatFractionTotal?: ((number: number) => number | string) | undefined;
                    renderBullet?: ((index: number, className: string) => string) | undefined;
                    renderFraction?: ((currentClass: string, totalClass: string) => string) | undefined;
                    renderProgressbar?: ((progressbarFillClass: string) => string) | undefined;
                    renderCustom?: ((swiper: import('swiper/types').Swiper, current: number, total: number) => string) | undefined;
                    bulletClass?: string | undefined;
                    bulletActiveClass?: string | undefined;
                    modifierClass?: string | undefined;
                    currentClass?: string | undefined;
                    totalClass?: string | undefined;
                    hiddenClass?: string | undefined;
                    progressbarFillClass?: string | undefined;
                    progressbarOppositeClass?: string | undefined;
                    clickableClass?: string | undefined;
                    lockClass?: string | undefined;
                    horizontalClass?: string | undefined;
                    verticalClass?: string | undefined;
                    paginationDisabledClass?: string | undefined;
                } | undefined;
                parallax?: boolean | {
                    enabled?: boolean | undefined;
                } | undefined;
                scrollbar?: boolean | {
                    enabled?: boolean | undefined;
                    el?: HTMLElement | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | null | undefined;
                    hide?: boolean | undefined;
                    draggable?: boolean | undefined;
                    snapOnRelease?: boolean | undefined;
                    dragSize?: ("auto" | number) | undefined;
                    lockClass?: string | undefined;
                    dragClass?: string | undefined;
                    scrollbarDisabledClass?: string | undefined;
                    horizontalClass?: string | undefined;
                    verticalClass?: string | undefined;
                } | undefined;
                thumbs?: {
                    swiper?: string | any | null | undefined;
                    slideThumbActiveClass?: string | undefined;
                    thumbsContainerClass?: string | undefined;
                    multipleActiveThumbs?: boolean | undefined;
                    autoScrollOffset?: number | undefined;
                } | undefined;
                virtual?: boolean | {
                    enabled?: boolean | undefined;
                    slides?: any[] | undefined;
                    cache?: boolean | undefined;
                    addSlidesBefore?: number | undefined;
                    addSlidesAfter?: number | undefined;
                    renderSlide?: ((slide: any, index: any) => any | null) | undefined;
                    renderExternal?: ((data: import('swiper/types').VirtualData<any>) => any | null) | undefined;
                    renderExternalUpdate?: boolean | undefined;
                } | undefined;
                zoom?: boolean | {
                    limitToOriginalSize?: boolean | undefined;
                    maxRatio?: number | undefined;
                    minRatio?: number | undefined;
                    toggle?: boolean | undefined;
                    containerClass?: string | undefined;
                    zoomedSlideClass?: string | undefined;
                } | undefined;
                freeMode?: boolean | {
                    enabled?: boolean | undefined;
                    momentum?: boolean | undefined;
                    momentumRatio?: number | undefined;
                    momentumVelocityRatio?: number | undefined;
                    momentumBounce?: boolean | undefined;
                    momentumBounceRatio?: number | undefined;
                    minimumVelocity?: number | undefined;
                    sticky?: boolean | undefined;
                } | undefined;
                grid?: {
                    rows?: number | undefined;
                    fill?: ("row" | "column") | undefined;
                } | undefined;
                _emitClasses?: boolean | undefined;
            };
            originalParams: {
                modules?: import('swiper/types').SwiperModule[] | undefined;
                injectStyles?: string[] | undefined;
                injectStylesUrls?: string[] | undefined;
                init?: boolean | undefined;
                enabled?: boolean | undefined;
                updateOnWindowResize?: boolean | undefined;
                resizeObserver?: boolean | undefined;
                initialSlide?: number | undefined;
                direction?: ("horizontal" | "vertical") | undefined;
                oneWayMovement?: boolean | undefined;
                swiperElementNodeName?: string | undefined;
                speed?: number | undefined;
                setWrapperSize?: boolean | undefined;
                virtualTranslate?: boolean | undefined;
                width?: (number | null) | undefined;
                height?: (number | null) | undefined;
                autoHeight?: boolean | undefined;
                roundLengths?: boolean | undefined;
                nested?: boolean | undefined;
                createElements?: boolean | undefined;
                eventsPrefix?: string | undefined;
                focusableElements?: string | undefined;
                uniqueNavElements?: boolean | undefined;
                effect?: ("slide" | "fade" | "cube" | "coverflow" | "flip" | "creative" | "cards" | string) | undefined;
                runCallbacksOnInit?: boolean | undefined;
                watchOverflow?: boolean | undefined;
                userAgent?: (string | null) | undefined;
                url?: (string | null) | undefined;
                on?: {
                    init?: ((swiper: import('swiper/types').Swiper) => any) | undefined;
                    beforeDestroy?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slidesUpdated?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideChangeTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideChangeTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideNextTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideNextTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slidePrevTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slidePrevTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    transitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    transitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    touchStart?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    touchMove?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    touchMoveOpposite?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    sliderMove?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    touchEnd?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    click?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    tap?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    doubleTap?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    progress?: ((swiper: import('swiper/types').Swiper, progress: number) => void) | undefined;
                    reachBeginning?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    reachEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    toEdge?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    fromEdge?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    setTranslate?: ((swiper: import('swiper/types').Swiper, translate: number) => void) | undefined;
                    setTransition?: ((swiper: import('swiper/types').Swiper, transition: number) => void) | undefined;
                    resize?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    observerUpdate?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    beforeLoopFix?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    loopFix?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    breakpoint?: ((swiper: import('swiper/types').Swiper, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                    _beforeBreakpoint?: ((swiper: import('swiper/types').Swiper, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                    _containerClasses?: ((swiper: import('swiper/types').Swiper, classNames: string) => void) | undefined;
                    _slideClass?: ((swiper: import('swiper/types').Swiper, slideEl: HTMLElement, classNames: string) => void) | undefined;
                    _slideClasses?: ((swiper: import('swiper/types').Swiper, slides: {
                        slideEl: HTMLElement;
                        classNames: string;
                        index: number;
                    }[]) => void) | undefined;
                    _swiper?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    _freeModeNoMomentumRelease?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    activeIndexChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    snapIndexChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    realIndexChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    afterInit?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    beforeInit?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    beforeResize?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    beforeSlideChangeStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    beforeTransitionStart?: ((swiper: import('swiper/types').Swiper, speed: number, internal: any) => void) | undefined;
                    changeDirection?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    doubleClick?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    destroy?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    momentumBounce?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    orientationchange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideResetTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slideResetTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    sliderFirstMove?: ((swiper: import('swiper/types').Swiper, event: TouchEvent) => void) | undefined;
                    slidesLengthChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    slidesGridLengthChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    snapGridLengthChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    update?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    lock?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    unlock?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    autoplayStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    autoplayStop?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    autoplayPause?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    autoplayResume?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    autoplayTimeLeft?: ((swiper: import('swiper/types').Swiper, timeLeft: number, percentage: number) => void) | undefined;
                    autoplay?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    hashChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    hashSet?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    keyPress?: ((swiper: import('swiper/types').Swiper, keyCode: string) => void) | undefined;
                    scroll?: ((swiper: import('swiper/types').Swiper, event: WheelEvent) => void) | undefined;
                    navigationHide?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    navigationShow?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    navigationPrev?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    navigationNext?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    paginationRender?: ((swiper: import('swiper/types').Swiper, paginationEl: HTMLElement) => void) | undefined;
                    paginationUpdate?: ((swiper: import('swiper/types').Swiper, paginationEl: HTMLElement) => void) | undefined;
                    paginationHide?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    paginationShow?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                    scrollbarDragStart?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    scrollbarDragMove?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    scrollbarDragEnd?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                    zoomChange?: ((swiper: import('swiper/types').Swiper, scale: number, imageEl: HTMLElement, slideEl: HTMLElement) => void) | undefined;
                } | undefined;
                onAny?: ((handler: (eventName: string, ...args: any[]) => void) => void) | undefined;
                cssMode?: boolean | undefined;
                spaceBetween?: (number | string) | undefined;
                slidesPerView?: (number | "auto") | undefined;
                maxBackfaceHiddenSlides?: number | undefined;
                slidesPerGroup?: number | undefined;
                slidesPerGroupSkip?: number | undefined;
                slidesPerGroupAuto?: boolean | undefined;
                centeredSlides?: boolean | undefined;
                centeredSlidesBounds?: boolean | undefined;
                slidesOffsetBefore?: number | undefined;
                slidesOffsetAfter?: number | undefined;
                normalizeSlideIndex?: boolean | undefined;
                centerInsufficientSlides?: boolean | undefined;
                grabCursor?: boolean | undefined;
                touchEventsTarget?: ("container" | "wrapper") | undefined;
                touchRatio?: number | undefined;
                touchAngle?: number | undefined;
                simulateTouch?: boolean | undefined;
                shortSwipes?: boolean | undefined;
                longSwipes?: boolean | undefined;
                longSwipesRatio?: number | undefined;
                longSwipesMs?: number | undefined;
                followFinger?: boolean | undefined;
                allowTouchMove?: boolean | undefined;
                threshold?: number | undefined;
                touchStartPreventDefault?: boolean | undefined;
                touchStartForcePreventDefault?: boolean | undefined;
                touchMoveStopPropagation?: boolean | undefined;
                edgeSwipeDetection?: (boolean | string) | undefined;
                edgeSwipeThreshold?: number | undefined;
                touchReleaseOnEdges?: boolean | undefined;
                passiveListeners?: boolean | undefined;
                resistance?: boolean | undefined;
                resistanceRatio?: number | undefined;
                preventInteractionOnTransition?: boolean | undefined;
                allowSlidePrev?: boolean | undefined;
                allowSlideNext?: boolean | undefined;
                noSwiping?: boolean | undefined;
                noSwipingClass?: string | undefined;
                noSwipingSelector?: string | undefined;
                swipeHandler?: HTMLElement | {
                    readonly [x: number]: string;
                    toString: () => string;
                    charAt: (pos: number) => string;
                    charCodeAt: (index: number) => number;
                    concat: (...strings: string[]) => string;
                    indexOf: (searchString: string, position?: number) => number;
                    lastIndexOf: (searchString: string, position?: number) => number;
                    localeCompare: {
                        (that: string): number;
                        (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                        (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                    };
                    match: {
                        (regexp: string | RegExp): RegExpMatchArray | null;
                        (matcher: {
                            [Symbol.match](string: string): RegExpMatchArray | null;
                        }): RegExpMatchArray | null;
                    };
                    replace: {
                        (searchValue: string | RegExp, replaceValue: string): string;
                        (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replaceValue: string): string;
                        }, replaceValue: string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                        }, replacer: (substring: string, ...args: any[]) => string): string;
                    };
                    search: {
                        (regexp: string | RegExp): number;
                        (searcher: {
                            [Symbol.search](string: string): number;
                        }): number;
                    };
                    slice: (start?: number, end?: number) => string;
                    split: {
                        (separator: string | RegExp, limit?: number): string[];
                        (splitter: {
                            [Symbol.split](string: string, limit?: number): string[];
                        }, limit?: number): string[];
                    };
                    substring: (start: number, end?: number) => string;
                    toLowerCase: () => string;
                    toLocaleLowerCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    toUpperCase: () => string;
                    toLocaleUpperCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    trim: () => string;
                    readonly length: number;
                    substr: (from: number, length?: number) => string;
                    valueOf: () => string;
                    codePointAt: (pos: number) => number | undefined;
                    includes: (searchString: string, position?: number) => boolean;
                    endsWith: (searchString: string, endPosition?: number) => boolean;
                    normalize: {
                        (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                        (form?: string): string;
                    };
                    repeat: (count: number) => string;
                    startsWith: (searchString: string, position?: number) => boolean;
                    anchor: (name: string) => string;
                    big: () => string;
                    blink: () => string;
                    bold: () => string;
                    fixed: () => string;
                    fontcolor: (color: string) => string;
                    fontsize: {
                        (size: number): string;
                        (size: string): string;
                    };
                    italics: () => string;
                    link: (url: string) => string;
                    small: () => string;
                    strike: () => string;
                    sub: () => string;
                    sup: () => string;
                    padStart: (maxLength: number, fillString?: string) => string;
                    padEnd: (maxLength: number, fillString?: string) => string;
                    trimEnd: () => string;
                    trimStart: () => string;
                    trimLeft: () => string;
                    trimRight: () => string;
                    matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                    [Symbol.iterator]: () => StringIterator<string>;
                    at: (index: number) => string | undefined;
                } | null | undefined;
                preventClicks?: boolean | undefined;
                preventClicksPropagation?: boolean | undefined;
                slideToClickedSlide?: boolean | undefined;
                watchSlidesProgress?: boolean | undefined;
                loop?: boolean | undefined;
                loopAddBlankSlides?: boolean | undefined;
                loopAdditionalSlides?: number | undefined;
                loopPreventsSliding?: boolean | undefined;
                rewind?: boolean | undefined;
                breakpoints?: {
                    [width: number]: import('swiper/types').SwiperOptions;
                    [ratio: string]: import('swiper/types').SwiperOptions;
                } | undefined;
                breakpointsBase?: ("window" | "container") | undefined;
                observer?: boolean | undefined;
                observeSlideChildren?: boolean | undefined;
                observeParents?: boolean | undefined;
                containerModifierClass?: string | undefined;
                slideClass?: string | undefined;
                slideActiveClass?: string | undefined;
                slideVisibleClass?: string | undefined;
                slideFullyVisibleClass?: string | undefined;
                slideBlankClass?: string | undefined;
                slideNextClass?: string | undefined;
                slidePrevClass?: string | undefined;
                wrapperClass?: string | undefined;
                lazyPreloaderClass?: string | undefined;
                lazyPreloadPrevNext?: number | undefined;
                a11y?: {
                    enabled?: boolean | undefined;
                    prevSlideMessage?: string | undefined;
                    nextSlideMessage?: string | undefined;
                    firstSlideMessage?: string | undefined;
                    lastSlideMessage?: string | undefined;
                    paginationBulletMessage?: string | undefined;
                    notificationClass?: string | undefined;
                    containerMessage?: (string | null) | undefined;
                    containerRoleDescriptionMessage?: (string | null) | undefined;
                    containerRole?: (string | null) | undefined;
                    itemRoleDescriptionMessage?: (string | null) | undefined;
                    slideLabelMessage?: string | undefined;
                    slideRole?: string | undefined;
                    id?: (string | number | null) | undefined;
                    scrollOnFocus?: boolean | undefined;
                } | undefined;
                autoplay?: boolean | {
                    delay?: number | undefined;
                    stopOnLastSlide?: boolean | undefined;
                    disableOnInteraction?: boolean | undefined;
                    reverseDirection?: boolean | undefined;
                    waitForTransition?: boolean | undefined;
                    pauseOnMouseEnter?: boolean | undefined;
                } | undefined;
                controller?: {
                    control?: string | HTMLElement | any | any[] | null | undefined;
                    inverse?: boolean | undefined;
                    by?: ("slide" | "container") | undefined;
                } | undefined;
                coverflowEffect?: {
                    slideShadows?: boolean | undefined;
                    rotate?: number | undefined;
                    stretch?: number | undefined;
                    depth?: number | undefined;
                    scale?: number | undefined;
                    modifier?: number | undefined;
                } | undefined;
                cubeEffect?: {
                    slideShadows?: boolean | undefined;
                    shadow?: boolean | undefined;
                    shadowOffset?: number | undefined;
                    shadowScale?: number | undefined;
                } | undefined;
                fadeEffect?: {
                    crossFade?: boolean | undefined;
                } | undefined;
                flipEffect?: {
                    slideShadows?: boolean | undefined;
                    limitRotation?: boolean | undefined;
                } | undefined;
                creativeEffect?: {
                    prev?: {
                        translate?: (string | number)[] | undefined;
                        rotate?: number[] | undefined;
                        opacity?: number | undefined;
                        scale?: number | undefined;
                        shadow?: boolean | undefined;
                        origin?: string | undefined;
                    } | undefined;
                    next?: {
                        translate?: (string | number)[] | undefined;
                        rotate?: number[] | undefined;
                        opacity?: number | undefined;
                        scale?: number | undefined;
                        shadow?: boolean | undefined;
                        origin?: string | undefined;
                    } | undefined;
                    limitProgress?: number | undefined;
                    shadowPerProgress?: boolean | undefined;
                    progressMultiplier?: number | undefined;
                    perspective?: boolean | undefined;
                } | undefined;
                cardsEffect?: {
                    slideShadows?: boolean | undefined;
                    rotate?: boolean | undefined;
                    perSlideRotate?: number | undefined;
                    perSlideOffset?: number | undefined;
                } | undefined;
                hashNavigation?: boolean | {
                    watchState?: boolean | undefined;
                    replaceState?: boolean | undefined;
                    getSlideIndex?: ((swiper: import('swiper/types').Swiper, hash: string) => number) | undefined;
                } | undefined;
                history?: boolean | {
                    enabled?: boolean | undefined;
                    root?: string | undefined;
                    replaceState?: boolean | undefined;
                    key?: string | undefined;
                    keepQuery?: boolean | undefined;
                } | undefined;
                keyboard?: boolean | {
                    enabled?: boolean | undefined;
                    onlyInViewport?: boolean | undefined;
                    pageUpDown?: boolean | undefined;
                } | undefined;
                mousewheel?: boolean | {
                    enabled?: boolean | undefined;
                    forceToAxis?: boolean | undefined;
                    releaseOnEdges?: boolean | undefined;
                    invert?: boolean | undefined;
                    sensitivity?: number | undefined;
                    eventsTarget?: HTMLElement | "container" | "wrapper" | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | undefined;
                    thresholdDelta?: (number | null) | undefined;
                    thresholdTime?: (number | null) | undefined;
                    noMousewheelClass?: string | undefined;
                } | undefined;
                navigation?: boolean | {
                    enabled?: boolean | undefined;
                    nextEl?: HTMLElement | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | null | undefined;
                    prevEl?: HTMLElement | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | null | undefined;
                    hideOnClick?: boolean | undefined;
                    disabledClass?: string | undefined;
                    hiddenClass?: string | undefined;
                    lockClass?: string | undefined;
                    navigationDisabledClass?: string | undefined;
                } | undefined;
                pagination?: boolean | {
                    enabled?: boolean | undefined;
                    el?: HTMLElement | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | null | undefined;
                    type?: ("bullets" | "fraction" | "progressbar" | "custom") | undefined;
                    bulletElement?: string | undefined;
                    dynamicBullets?: boolean | undefined;
                    dynamicMainBullets?: number | undefined;
                    hideOnClick?: boolean | undefined;
                    clickable?: boolean | undefined;
                    progressbarOpposite?: boolean | undefined;
                    formatFractionCurrent?: ((number: number) => number | string) | undefined;
                    formatFractionTotal?: ((number: number) => number | string) | undefined;
                    renderBullet?: ((index: number, className: string) => string) | undefined;
                    renderFraction?: ((currentClass: string, totalClass: string) => string) | undefined;
                    renderProgressbar?: ((progressbarFillClass: string) => string) | undefined;
                    renderCustom?: ((swiper: import('swiper/types').Swiper, current: number, total: number) => string) | undefined;
                    bulletClass?: string | undefined;
                    bulletActiveClass?: string | undefined;
                    modifierClass?: string | undefined;
                    currentClass?: string | undefined;
                    totalClass?: string | undefined;
                    hiddenClass?: string | undefined;
                    progressbarFillClass?: string | undefined;
                    progressbarOppositeClass?: string | undefined;
                    clickableClass?: string | undefined;
                    lockClass?: string | undefined;
                    horizontalClass?: string | undefined;
                    verticalClass?: string | undefined;
                    paginationDisabledClass?: string | undefined;
                } | undefined;
                parallax?: boolean | {
                    enabled?: boolean | undefined;
                } | undefined;
                scrollbar?: boolean | {
                    enabled?: boolean | undefined;
                    el?: HTMLElement | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | null | undefined;
                    hide?: boolean | undefined;
                    draggable?: boolean | undefined;
                    snapOnRelease?: boolean | undefined;
                    dragSize?: ("auto" | number) | undefined;
                    lockClass?: string | undefined;
                    dragClass?: string | undefined;
                    scrollbarDisabledClass?: string | undefined;
                    horizontalClass?: string | undefined;
                    verticalClass?: string | undefined;
                } | undefined;
                thumbs?: {
                    swiper?: string | any | null | undefined;
                    slideThumbActiveClass?: string | undefined;
                    thumbsContainerClass?: string | undefined;
                    multipleActiveThumbs?: boolean | undefined;
                    autoScrollOffset?: number | undefined;
                } | undefined;
                virtual?: boolean | {
                    enabled?: boolean | undefined;
                    slides?: any[] | undefined;
                    cache?: boolean | undefined;
                    addSlidesBefore?: number | undefined;
                    addSlidesAfter?: number | undefined;
                    renderSlide?: ((slide: any, index: any) => any | null) | undefined;
                    renderExternal?: ((data: import('swiper/types').VirtualData<any>) => any | null) | undefined;
                    renderExternalUpdate?: boolean | undefined;
                } | undefined;
                zoom?: boolean | {
                    limitToOriginalSize?: boolean | undefined;
                    maxRatio?: number | undefined;
                    minRatio?: number | undefined;
                    toggle?: boolean | undefined;
                    containerClass?: string | undefined;
                    zoomedSlideClass?: string | undefined;
                } | undefined;
                freeMode?: boolean | {
                    enabled?: boolean | undefined;
                    momentum?: boolean | undefined;
                    momentumRatio?: number | undefined;
                    momentumVelocityRatio?: number | undefined;
                    momentumBounce?: boolean | undefined;
                    momentumBounceRatio?: number | undefined;
                    minimumVelocity?: number | undefined;
                    sticky?: boolean | undefined;
                } | undefined;
                grid?: {
                    rows?: number | undefined;
                    fill?: ("row" | "column") | undefined;
                } | undefined;
                _emitClasses?: boolean | undefined;
            };
            el: HTMLElement;
            wrapperEl: HTMLElement;
            slidesEl: HTMLElement;
            slides: HTMLElement[];
            loopedSlides: number | null;
            width: number;
            height: number;
            translate: number;
            progress: number;
            activeIndex: number;
            realIndex: number;
            previousIndex: number;
            snapIndex: number;
            snapGrid: number[];
            slidesGrid: number[];
            slidesSizesGrid: number[];
            isBeginning: boolean;
            isEnd: boolean;
            isLocked: boolean;
            animating: boolean;
            touches: {
                startX: number;
                startY: number;
                currentX: number;
                currentY: number;
                diff: number;
            };
            clickedIndex: number;
            clickedSlide: HTMLElement;
            allowSlideNext: boolean;
            allowSlidePrev: boolean;
            allowTouchMove: boolean;
            swipeDirection: "prev" | "next";
            rtlTranslate: boolean;
            disable: () => void;
            enable: () => void;
            setProgress: (progress: number, speed?: number) => void;
            slideNext: (speed?: number, runCallbacks?: boolean) => boolean;
            slidePrev: (speed?: number, runCallbacks?: boolean) => boolean;
            slideTo: (index: number, speed?: number, runCallbacks?: boolean) => boolean;
            slideToLoop: (index: number, speed?: number, runCallbacks?: boolean) => import('swiper/types').Swiper;
            slideReset: (speed?: number, runCallbacks?: boolean) => boolean;
            slideToClosest: (speed?: number, runCallbacks?: boolean) => boolean;
            slidesPerViewDynamic: () => number;
            updateAutoHeight: (speed?: number) => void;
            update: () => void;
            updateSize: () => void;
            updateSlides: () => void;
            updateProgress: () => void;
            updateSlidesClasses: () => void;
            changeDirection: (direction?: "horizontal" | "vertical", needUpdate?: boolean) => void;
            changeLanguageDirection: (direction: "rtl" | "ltr") => void;
            detachEvents: () => void;
            attachEvents: () => void;
            loopCreate: () => void;
            loopDestroy: () => void;
            init: (el?: HTMLElement) => import('swiper/types').Swiper;
            destroy: (deleteInstance?: boolean, cleanStyles?: boolean) => void;
            setTranslate: (translate: any) => void;
            getTranslate: () => any;
            translateTo: (translate: number, speed: number, runCallbacks?: boolean, translateBounds?: boolean) => any;
            minTranslate: () => number;
            maxTranslate: () => number;
            unsetGrabCursor: () => void;
            setGrabCursor: () => void;
            onAny: (handler: (eventName: string, ...args: any[]) => void) => void;
            offAny: (handler: (eventName: string, ...args: any[]) => void) => void;
            isHorizontal: () => boolean;
            getBreakpoint: (breakpoints: import('swiper/types').SwiperOptions["breakpoints"]) => string;
            setBreakpoint: () => void;
            currentBreakpoint: any;
            destroyed: boolean;
            modules: Array<import('swiper/types').SwiperModule>;
            a11y: import('swiper/types').A11yMethods;
            autoplay: {
                running: boolean;
                paused: boolean;
                timeLeft: number;
                pause: () => void;
                resume: () => void;
                start: () => boolean;
                stop: () => boolean;
            };
            controller: {
                control?: any | any[] | undefined;
            };
            coverflowEffect: import('swiper/types').CoverflowEffectMethods;
            cubeEffect: import('swiper/types').CubeEffectMethods;
            fadeEffect: import('swiper/types').FadeEffectMethods;
            flipEffect: import('swiper/types').FlipEffectMethods;
            creativeEffect: import('swiper/types').CreativeEffectMethods;
            cardsEffect: import('swiper/types').CardsEffectMethods;
            hashNavigation: import('swiper/types').HashNavigationMethods;
            history: import('swiper/types').HistoryMethods;
            keyboard: {
                enabled: boolean;
                enable: () => void;
                disable: () => void;
            };
            mousewheel: {
                enabled: boolean;
                enable: () => void;
                disable: () => void;
            };
            navigation: {
                nextEl: HTMLElement;
                prevEl: HTMLElement;
                update: () => void;
                init: () => void;
                destroy: () => void;
            };
            pagination: {
                el: HTMLElement;
                bullets: HTMLElement[];
                render: () => void;
                update: () => void;
                init: () => void;
                destroy: () => void;
            };
            parallax: import('swiper/types').ParallaxMethods;
            scrollbar: {
                el: HTMLElement;
                dragEl: HTMLElement;
                updateSize: () => void;
                setTranslate: () => void;
                init: () => void;
                destroy: () => void;
            };
            thumbs: {
                swiper: any;
                update: (initial: boolean) => void;
                init: () => boolean;
            };
            virtual: {
                cache: object;
                from: number;
                to: number;
                slides: any[];
                appendSlide: (slide: HTMLElement | string | HTMLElement[] | string[]) => void;
                prependSlide: (slide: HTMLElement | string | HTMLElement[] | string[]) => void;
                removeSlide: (slideIndexes: number[]) => void;
                removeAllSlides: () => void;
                update: (force: boolean) => void;
            };
            zoom: {
                enabled: boolean;
                scale: number;
                enable: () => void;
                disable: () => void;
                in: (ratio?: number) => void;
                out: () => void;
                toggle: (event?: MouseEvent | TouchEvent | PointerEvent) => void;
            };
            freeMode: {
                onTouchMove: () => void;
                onTouchEnd: () => void;
            };
            on: <E extends keyof import('swiper/types').SwiperEvents>(event: E, handler: import('swiper/types').SwiperEvents[E]) => void;
            once: <E extends keyof import('swiper/types').SwiperEvents>(event: E, handler: import('swiper/types').SwiperEvents[E]) => void;
            off: {
                <E extends keyof import('swiper/types').SwiperEvents>(event: E, handler: import('swiper/types').SwiperEvents[E]): void;
                <E extends keyof import('swiper/types').SwiperEvents>(event: E): void;
            };
            emit: <E extends keyof import('swiper/types').SwiperEvents>(event: E, ...args: any[]) => void;
            appendSlide: (slides: HTMLElement | string | string[] | HTMLElement[]) => void;
            prependSlide: (slides: HTMLElement | string | string[] | HTMLElement[]) => void;
            addSlide: (index: number, slides: HTMLElement | string | string[] | HTMLElement[]) => void;
            removeSlide: (slideIndex: number | number[]) => void;
            removeAllSlides: () => void;
        } | null>;
    }, {}, {}, {}, {
        width: string | number;
        height: string | number;
        direction: "horizontal" | "vertical";
        transitionDelay: number | string;
        initialSlide: number;
        slidesPerView: number;
        mousewheel: boolean;
        navigation: boolean;
        navDirection: "horizontal" | "vertical";
        navAlign: "center" | "start" | "end";
        navSize: string | number;
        navColor: string;
        navDisabledColor: string;
        transitionFun: string;
        transitionSpeed: number;
        swiperOverflow: string;
        enableSlideClick: boolean;
        slideClickHandler: (swiper: import('swiper/types').Swiper) => void;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<{
    activeSlideIdx?: number;
} & {
    width?: string | number;
    height?: string | number;
    initialSlide?: number;
    direction?: "horizontal" | "vertical";
    slidesPerView?: number;
    slidesOffsetBefore?: number;
    slidesOffsetAfter?: number;
    mousewheel?: boolean;
    navigation?: boolean;
    navDirection?: "horizontal" | "vertical";
    navAlign?: "center" | "start" | "end";
    navSize?: string | number;
    navColor?: string;
    navDisabledColor?: string;
    transitionFun?: string;
    transitionSpeed?: number;
    transitionDelay?: number | string;
    controlSwiper?: import('swiper/types').Swiper | import('swiper/types').Swiper[];
    swiperOverflow?: string;
    enableSlideClick?: boolean;
    slideClickHandler?: (swiper: import('swiper/types').Swiper) => void;
}> & Readonly<{
    "onUpdate:activeSlideIdx"?: ((activeSlideIdx: number) => any) | undefined;
}>, {
    swiper: import('vue').Ref<{
        params: {
            modules?: import('swiper/types').SwiperModule[] | undefined;
            injectStyles?: string[] | undefined;
            injectStylesUrls?: string[] | undefined;
            init?: boolean | undefined;
            enabled?: boolean | undefined;
            updateOnWindowResize?: boolean | undefined;
            resizeObserver?: boolean | undefined;
            initialSlide?: number | undefined;
            direction?: ("horizontal" | "vertical") | undefined;
            oneWayMovement?: boolean | undefined;
            swiperElementNodeName?: string | undefined;
            speed?: number | undefined;
            setWrapperSize?: boolean | undefined;
            virtualTranslate?: boolean | undefined;
            width?: (number | null) | undefined;
            height?: (number | null) | undefined;
            autoHeight?: boolean | undefined;
            roundLengths?: boolean | undefined;
            nested?: boolean | undefined;
            createElements?: boolean | undefined;
            eventsPrefix?: string | undefined;
            focusableElements?: string | undefined;
            uniqueNavElements?: boolean | undefined;
            effect?: ("slide" | "fade" | "cube" | "coverflow" | "flip" | "creative" | "cards" | string) | undefined;
            runCallbacksOnInit?: boolean | undefined;
            watchOverflow?: boolean | undefined;
            userAgent?: (string | null) | undefined;
            url?: (string | null) | undefined;
            on?: {
                init?: ((swiper: import('swiper/types').Swiper) => any) | undefined;
                beforeDestroy?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                slidesUpdated?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                slideChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                slideChangeTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                slideChangeTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                slideNextTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                slideNextTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                slidePrevTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                slidePrevTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                transitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                transitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                touchStart?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                touchMove?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                touchMoveOpposite?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                sliderMove?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                touchEnd?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                click?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                tap?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                doubleTap?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                progress?: ((swiper: import('swiper/types').Swiper, progress: number) => void) | undefined;
                reachBeginning?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                reachEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                toEdge?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                fromEdge?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                setTranslate?: ((swiper: import('swiper/types').Swiper, translate: number) => void) | undefined;
                setTransition?: ((swiper: import('swiper/types').Swiper, transition: number) => void) | undefined;
                resize?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                observerUpdate?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                beforeLoopFix?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                loopFix?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                breakpoint?: ((swiper: import('swiper/types').Swiper, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                _beforeBreakpoint?: ((swiper: import('swiper/types').Swiper, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                _containerClasses?: ((swiper: import('swiper/types').Swiper, classNames: string) => void) | undefined;
                _slideClass?: ((swiper: import('swiper/types').Swiper, slideEl: HTMLElement, classNames: string) => void) | undefined;
                _slideClasses?: ((swiper: import('swiper/types').Swiper, slides: {
                    slideEl: HTMLElement;
                    classNames: string;
                    index: number;
                }[]) => void) | undefined;
                _swiper?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                _freeModeNoMomentumRelease?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                activeIndexChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                snapIndexChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                realIndexChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                afterInit?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                beforeInit?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                beforeResize?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                beforeSlideChangeStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                beforeTransitionStart?: ((swiper: import('swiper/types').Swiper, speed: number, internal: any) => void) | undefined;
                changeDirection?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                doubleClick?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                destroy?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                momentumBounce?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                orientationchange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                slideResetTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                slideResetTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                sliderFirstMove?: ((swiper: import('swiper/types').Swiper, event: TouchEvent) => void) | undefined;
                slidesLengthChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                slidesGridLengthChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                snapGridLengthChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                update?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                lock?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                unlock?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                autoplayStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                autoplayStop?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                autoplayPause?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                autoplayResume?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                autoplayTimeLeft?: ((swiper: import('swiper/types').Swiper, timeLeft: number, percentage: number) => void) | undefined;
                autoplay?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                hashChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                hashSet?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                keyPress?: ((swiper: import('swiper/types').Swiper, keyCode: string) => void) | undefined;
                scroll?: ((swiper: import('swiper/types').Swiper, event: WheelEvent) => void) | undefined;
                navigationHide?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                navigationShow?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                navigationPrev?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                navigationNext?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                paginationRender?: ((swiper: import('swiper/types').Swiper, paginationEl: HTMLElement) => void) | undefined;
                paginationUpdate?: ((swiper: import('swiper/types').Swiper, paginationEl: HTMLElement) => void) | undefined;
                paginationHide?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                paginationShow?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                scrollbarDragStart?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                scrollbarDragMove?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                scrollbarDragEnd?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                zoomChange?: ((swiper: import('swiper/types').Swiper, scale: number, imageEl: HTMLElement, slideEl: HTMLElement) => void) | undefined;
            } | undefined;
            onAny?: ((handler: (eventName: string, ...args: any[]) => void) => void) | undefined;
            cssMode?: boolean | undefined;
            spaceBetween?: (number | string) | undefined;
            slidesPerView?: (number | "auto") | undefined;
            maxBackfaceHiddenSlides?: number | undefined;
            slidesPerGroup?: number | undefined;
            slidesPerGroupSkip?: number | undefined;
            slidesPerGroupAuto?: boolean | undefined;
            centeredSlides?: boolean | undefined;
            centeredSlidesBounds?: boolean | undefined;
            slidesOffsetBefore?: number | undefined;
            slidesOffsetAfter?: number | undefined;
            normalizeSlideIndex?: boolean | undefined;
            centerInsufficientSlides?: boolean | undefined;
            grabCursor?: boolean | undefined;
            touchEventsTarget?: ("container" | "wrapper") | undefined;
            touchRatio?: number | undefined;
            touchAngle?: number | undefined;
            simulateTouch?: boolean | undefined;
            shortSwipes?: boolean | undefined;
            longSwipes?: boolean | undefined;
            longSwipesRatio?: number | undefined;
            longSwipesMs?: number | undefined;
            followFinger?: boolean | undefined;
            allowTouchMove?: boolean | undefined;
            threshold?: number | undefined;
            touchStartPreventDefault?: boolean | undefined;
            touchStartForcePreventDefault?: boolean | undefined;
            touchMoveStopPropagation?: boolean | undefined;
            edgeSwipeDetection?: (boolean | string) | undefined;
            edgeSwipeThreshold?: number | undefined;
            touchReleaseOnEdges?: boolean | undefined;
            passiveListeners?: boolean | undefined;
            resistance?: boolean | undefined;
            resistanceRatio?: number | undefined;
            preventInteractionOnTransition?: boolean | undefined;
            allowSlidePrev?: boolean | undefined;
            allowSlideNext?: boolean | undefined;
            noSwiping?: boolean | undefined;
            noSwipingClass?: string | undefined;
            noSwipingSelector?: string | undefined;
            swipeHandler?: HTMLElement | {
                readonly [x: number]: string;
                toString: () => string;
                charAt: (pos: number) => string;
                charCodeAt: (index: number) => number;
                concat: (...strings: string[]) => string;
                indexOf: (searchString: string, position?: number) => number;
                lastIndexOf: (searchString: string, position?: number) => number;
                localeCompare: {
                    (that: string): number;
                    (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                    (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                };
                match: {
                    (regexp: string | RegExp): RegExpMatchArray | null;
                    (matcher: {
                        [Symbol.match](string: string): RegExpMatchArray | null;
                    }): RegExpMatchArray | null;
                };
                replace: {
                    (searchValue: string | RegExp, replaceValue: string): string;
                    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                    (searchValue: {
                        [Symbol.replace](string: string, replaceValue: string): string;
                    }, replaceValue: string): string;
                    (searchValue: {
                        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                    }, replacer: (substring: string, ...args: any[]) => string): string;
                };
                search: {
                    (regexp: string | RegExp): number;
                    (searcher: {
                        [Symbol.search](string: string): number;
                    }): number;
                };
                slice: (start?: number, end?: number) => string;
                split: {
                    (separator: string | RegExp, limit?: number): string[];
                    (splitter: {
                        [Symbol.split](string: string, limit?: number): string[];
                    }, limit?: number): string[];
                };
                substring: (start: number, end?: number) => string;
                toLowerCase: () => string;
                toLocaleLowerCase: {
                    (locales?: string | string[]): string;
                    (locales?: Intl.LocalesArgument): string;
                };
                toUpperCase: () => string;
                toLocaleUpperCase: {
                    (locales?: string | string[]): string;
                    (locales?: Intl.LocalesArgument): string;
                };
                trim: () => string;
                readonly length: number;
                substr: (from: number, length?: number) => string;
                valueOf: () => string;
                codePointAt: (pos: number) => number | undefined;
                includes: (searchString: string, position?: number) => boolean;
                endsWith: (searchString: string, endPosition?: number) => boolean;
                normalize: {
                    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                    (form?: string): string;
                };
                repeat: (count: number) => string;
                startsWith: (searchString: string, position?: number) => boolean;
                anchor: (name: string) => string;
                big: () => string;
                blink: () => string;
                bold: () => string;
                fixed: () => string;
                fontcolor: (color: string) => string;
                fontsize: {
                    (size: number): string;
                    (size: string): string;
                };
                italics: () => string;
                link: (url: string) => string;
                small: () => string;
                strike: () => string;
                sub: () => string;
                sup: () => string;
                padStart: (maxLength: number, fillString?: string) => string;
                padEnd: (maxLength: number, fillString?: string) => string;
                trimEnd: () => string;
                trimStart: () => string;
                trimLeft: () => string;
                trimRight: () => string;
                matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                [Symbol.iterator]: () => StringIterator<string>;
                at: (index: number) => string | undefined;
            } | null | undefined;
            preventClicks?: boolean | undefined;
            preventClicksPropagation?: boolean | undefined;
            slideToClickedSlide?: boolean | undefined;
            watchSlidesProgress?: boolean | undefined;
            loop?: boolean | undefined;
            loopAddBlankSlides?: boolean | undefined;
            loopAdditionalSlides?: number | undefined;
            loopPreventsSliding?: boolean | undefined;
            rewind?: boolean | undefined;
            breakpoints?: {
                [width: number]: import('swiper/types').SwiperOptions;
                [ratio: string]: import('swiper/types').SwiperOptions;
            } | undefined;
            breakpointsBase?: ("window" | "container") | undefined;
            observer?: boolean | undefined;
            observeSlideChildren?: boolean | undefined;
            observeParents?: boolean | undefined;
            containerModifierClass?: string | undefined;
            slideClass?: string | undefined;
            slideActiveClass?: string | undefined;
            slideVisibleClass?: string | undefined;
            slideFullyVisibleClass?: string | undefined;
            slideBlankClass?: string | undefined;
            slideNextClass?: string | undefined;
            slidePrevClass?: string | undefined;
            wrapperClass?: string | undefined;
            lazyPreloaderClass?: string | undefined;
            lazyPreloadPrevNext?: number | undefined;
            a11y?: {
                enabled?: boolean | undefined;
                prevSlideMessage?: string | undefined;
                nextSlideMessage?: string | undefined;
                firstSlideMessage?: string | undefined;
                lastSlideMessage?: string | undefined;
                paginationBulletMessage?: string | undefined;
                notificationClass?: string | undefined;
                containerMessage?: (string | null) | undefined;
                containerRoleDescriptionMessage?: (string | null) | undefined;
                containerRole?: (string | null) | undefined;
                itemRoleDescriptionMessage?: (string | null) | undefined;
                slideLabelMessage?: string | undefined;
                slideRole?: string | undefined;
                id?: (string | number | null) | undefined;
                scrollOnFocus?: boolean | undefined;
            } | undefined;
            autoplay?: boolean | {
                delay?: number | undefined;
                stopOnLastSlide?: boolean | undefined;
                disableOnInteraction?: boolean | undefined;
                reverseDirection?: boolean | undefined;
                waitForTransition?: boolean | undefined;
                pauseOnMouseEnter?: boolean | undefined;
            } | undefined;
            controller?: {
                control?: string | HTMLElement | any | any[] | null | undefined;
                inverse?: boolean | undefined;
                by?: ("slide" | "container") | undefined;
            } | undefined;
            coverflowEffect?: {
                slideShadows?: boolean | undefined;
                rotate?: number | undefined;
                stretch?: number | undefined;
                depth?: number | undefined;
                scale?: number | undefined;
                modifier?: number | undefined;
            } | undefined;
            cubeEffect?: {
                slideShadows?: boolean | undefined;
                shadow?: boolean | undefined;
                shadowOffset?: number | undefined;
                shadowScale?: number | undefined;
            } | undefined;
            fadeEffect?: {
                crossFade?: boolean | undefined;
            } | undefined;
            flipEffect?: {
                slideShadows?: boolean | undefined;
                limitRotation?: boolean | undefined;
            } | undefined;
            creativeEffect?: {
                prev?: {
                    translate?: (string | number)[] | undefined;
                    rotate?: number[] | undefined;
                    opacity?: number | undefined;
                    scale?: number | undefined;
                    shadow?: boolean | undefined;
                    origin?: string | undefined;
                } | undefined;
                next?: {
                    translate?: (string | number)[] | undefined;
                    rotate?: number[] | undefined;
                    opacity?: number | undefined;
                    scale?: number | undefined;
                    shadow?: boolean | undefined;
                    origin?: string | undefined;
                } | undefined;
                limitProgress?: number | undefined;
                shadowPerProgress?: boolean | undefined;
                progressMultiplier?: number | undefined;
                perspective?: boolean | undefined;
            } | undefined;
            cardsEffect?: {
                slideShadows?: boolean | undefined;
                rotate?: boolean | undefined;
                perSlideRotate?: number | undefined;
                perSlideOffset?: number | undefined;
            } | undefined;
            hashNavigation?: boolean | {
                watchState?: boolean | undefined;
                replaceState?: boolean | undefined;
                getSlideIndex?: ((swiper: import('swiper/types').Swiper, hash: string) => number) | undefined;
            } | undefined;
            history?: boolean | {
                enabled?: boolean | undefined;
                root?: string | undefined;
                replaceState?: boolean | undefined;
                key?: string | undefined;
                keepQuery?: boolean | undefined;
            } | undefined;
            keyboard?: boolean | {
                enabled?: boolean | undefined;
                onlyInViewport?: boolean | undefined;
                pageUpDown?: boolean | undefined;
            } | undefined;
            mousewheel?: boolean | {
                enabled?: boolean | undefined;
                forceToAxis?: boolean | undefined;
                releaseOnEdges?: boolean | undefined;
                invert?: boolean | undefined;
                sensitivity?: number | undefined;
                eventsTarget?: HTMLElement | "container" | "wrapper" | {
                    readonly [x: number]: string;
                    toString: () => string;
                    charAt: (pos: number) => string;
                    charCodeAt: (index: number) => number;
                    concat: (...strings: string[]) => string;
                    indexOf: (searchString: string, position?: number) => number;
                    lastIndexOf: (searchString: string, position?: number) => number;
                    localeCompare: {
                        (that: string): number;
                        (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                        (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                    };
                    match: {
                        (regexp: string | RegExp): RegExpMatchArray | null;
                        (matcher: {
                            [Symbol.match](string: string): RegExpMatchArray | null;
                        }): RegExpMatchArray | null;
                    };
                    replace: {
                        (searchValue: string | RegExp, replaceValue: string): string;
                        (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replaceValue: string): string;
                        }, replaceValue: string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                        }, replacer: (substring: string, ...args: any[]) => string): string;
                    };
                    search: {
                        (regexp: string | RegExp): number;
                        (searcher: {
                            [Symbol.search](string: string): number;
                        }): number;
                    };
                    slice: (start?: number, end?: number) => string;
                    split: {
                        (separator: string | RegExp, limit?: number): string[];
                        (splitter: {
                            [Symbol.split](string: string, limit?: number): string[];
                        }, limit?: number): string[];
                    };
                    substring: (start: number, end?: number) => string;
                    toLowerCase: () => string;
                    toLocaleLowerCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    toUpperCase: () => string;
                    toLocaleUpperCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    trim: () => string;
                    readonly length: number;
                    substr: (from: number, length?: number) => string;
                    valueOf: () => string;
                    codePointAt: (pos: number) => number | undefined;
                    includes: (searchString: string, position?: number) => boolean;
                    endsWith: (searchString: string, endPosition?: number) => boolean;
                    normalize: {
                        (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                        (form?: string): string;
                    };
                    repeat: (count: number) => string;
                    startsWith: (searchString: string, position?: number) => boolean;
                    anchor: (name: string) => string;
                    big: () => string;
                    blink: () => string;
                    bold: () => string;
                    fixed: () => string;
                    fontcolor: (color: string) => string;
                    fontsize: {
                        (size: number): string;
                        (size: string): string;
                    };
                    italics: () => string;
                    link: (url: string) => string;
                    small: () => string;
                    strike: () => string;
                    sub: () => string;
                    sup: () => string;
                    padStart: (maxLength: number, fillString?: string) => string;
                    padEnd: (maxLength: number, fillString?: string) => string;
                    trimEnd: () => string;
                    trimStart: () => string;
                    trimLeft: () => string;
                    trimRight: () => string;
                    matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                    [Symbol.iterator]: () => StringIterator<string>;
                    at: (index: number) => string | undefined;
                } | undefined;
                thresholdDelta?: (number | null) | undefined;
                thresholdTime?: (number | null) | undefined;
                noMousewheelClass?: string | undefined;
            } | undefined;
            navigation?: boolean | {
                enabled?: boolean | undefined;
                nextEl?: HTMLElement | {
                    readonly [x: number]: string;
                    toString: () => string;
                    charAt: (pos: number) => string;
                    charCodeAt: (index: number) => number;
                    concat: (...strings: string[]) => string;
                    indexOf: (searchString: string, position?: number) => number;
                    lastIndexOf: (searchString: string, position?: number) => number;
                    localeCompare: {
                        (that: string): number;
                        (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                        (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                    };
                    match: {
                        (regexp: string | RegExp): RegExpMatchArray | null;
                        (matcher: {
                            [Symbol.match](string: string): RegExpMatchArray | null;
                        }): RegExpMatchArray | null;
                    };
                    replace: {
                        (searchValue: string | RegExp, replaceValue: string): string;
                        (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replaceValue: string): string;
                        }, replaceValue: string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                        }, replacer: (substring: string, ...args: any[]) => string): string;
                    };
                    search: {
                        (regexp: string | RegExp): number;
                        (searcher: {
                            [Symbol.search](string: string): number;
                        }): number;
                    };
                    slice: (start?: number, end?: number) => string;
                    split: {
                        (separator: string | RegExp, limit?: number): string[];
                        (splitter: {
                            [Symbol.split](string: string, limit?: number): string[];
                        }, limit?: number): string[];
                    };
                    substring: (start: number, end?: number) => string;
                    toLowerCase: () => string;
                    toLocaleLowerCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    toUpperCase: () => string;
                    toLocaleUpperCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    trim: () => string;
                    readonly length: number;
                    substr: (from: number, length?: number) => string;
                    valueOf: () => string;
                    codePointAt: (pos: number) => number | undefined;
                    includes: (searchString: string, position?: number) => boolean;
                    endsWith: (searchString: string, endPosition?: number) => boolean;
                    normalize: {
                        (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                        (form?: string): string;
                    };
                    repeat: (count: number) => string;
                    startsWith: (searchString: string, position?: number) => boolean;
                    anchor: (name: string) => string;
                    big: () => string;
                    blink: () => string;
                    bold: () => string;
                    fixed: () => string;
                    fontcolor: (color: string) => string;
                    fontsize: {
                        (size: number): string;
                        (size: string): string;
                    };
                    italics: () => string;
                    link: (url: string) => string;
                    small: () => string;
                    strike: () => string;
                    sub: () => string;
                    sup: () => string;
                    padStart: (maxLength: number, fillString?: string) => string;
                    padEnd: (maxLength: number, fillString?: string) => string;
                    trimEnd: () => string;
                    trimStart: () => string;
                    trimLeft: () => string;
                    trimRight: () => string;
                    matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                    [Symbol.iterator]: () => StringIterator<string>;
                    at: (index: number) => string | undefined;
                } | null | undefined;
                prevEl?: HTMLElement | {
                    readonly [x: number]: string;
                    toString: () => string;
                    charAt: (pos: number) => string;
                    charCodeAt: (index: number) => number;
                    concat: (...strings: string[]) => string;
                    indexOf: (searchString: string, position?: number) => number;
                    lastIndexOf: (searchString: string, position?: number) => number;
                    localeCompare: {
                        (that: string): number;
                        (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                        (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                    };
                    match: {
                        (regexp: string | RegExp): RegExpMatchArray | null;
                        (matcher: {
                            [Symbol.match](string: string): RegExpMatchArray | null;
                        }): RegExpMatchArray | null;
                    };
                    replace: {
                        (searchValue: string | RegExp, replaceValue: string): string;
                        (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replaceValue: string): string;
                        }, replaceValue: string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                        }, replacer: (substring: string, ...args: any[]) => string): string;
                    };
                    search: {
                        (regexp: string | RegExp): number;
                        (searcher: {
                            [Symbol.search](string: string): number;
                        }): number;
                    };
                    slice: (start?: number, end?: number) => string;
                    split: {
                        (separator: string | RegExp, limit?: number): string[];
                        (splitter: {
                            [Symbol.split](string: string, limit?: number): string[];
                        }, limit?: number): string[];
                    };
                    substring: (start: number, end?: number) => string;
                    toLowerCase: () => string;
                    toLocaleLowerCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    toUpperCase: () => string;
                    toLocaleUpperCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    trim: () => string;
                    readonly length: number;
                    substr: (from: number, length?: number) => string;
                    valueOf: () => string;
                    codePointAt: (pos: number) => number | undefined;
                    includes: (searchString: string, position?: number) => boolean;
                    endsWith: (searchString: string, endPosition?: number) => boolean;
                    normalize: {
                        (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                        (form?: string): string;
                    };
                    repeat: (count: number) => string;
                    startsWith: (searchString: string, position?: number) => boolean;
                    anchor: (name: string) => string;
                    big: () => string;
                    blink: () => string;
                    bold: () => string;
                    fixed: () => string;
                    fontcolor: (color: string) => string;
                    fontsize: {
                        (size: number): string;
                        (size: string): string;
                    };
                    italics: () => string;
                    link: (url: string) => string;
                    small: () => string;
                    strike: () => string;
                    sub: () => string;
                    sup: () => string;
                    padStart: (maxLength: number, fillString?: string) => string;
                    padEnd: (maxLength: number, fillString?: string) => string;
                    trimEnd: () => string;
                    trimStart: () => string;
                    trimLeft: () => string;
                    trimRight: () => string;
                    matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                    [Symbol.iterator]: () => StringIterator<string>;
                    at: (index: number) => string | undefined;
                } | null | undefined;
                hideOnClick?: boolean | undefined;
                disabledClass?: string | undefined;
                hiddenClass?: string | undefined;
                lockClass?: string | undefined;
                navigationDisabledClass?: string | undefined;
            } | undefined;
            pagination?: boolean | {
                enabled?: boolean | undefined;
                el?: HTMLElement | {
                    readonly [x: number]: string;
                    toString: () => string;
                    charAt: (pos: number) => string;
                    charCodeAt: (index: number) => number;
                    concat: (...strings: string[]) => string;
                    indexOf: (searchString: string, position?: number) => number;
                    lastIndexOf: (searchString: string, position?: number) => number;
                    localeCompare: {
                        (that: string): number;
                        (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                        (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                    };
                    match: {
                        (regexp: string | RegExp): RegExpMatchArray | null;
                        (matcher: {
                            [Symbol.match](string: string): RegExpMatchArray | null;
                        }): RegExpMatchArray | null;
                    };
                    replace: {
                        (searchValue: string | RegExp, replaceValue: string): string;
                        (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replaceValue: string): string;
                        }, replaceValue: string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                        }, replacer: (substring: string, ...args: any[]) => string): string;
                    };
                    search: {
                        (regexp: string | RegExp): number;
                        (searcher: {
                            [Symbol.search](string: string): number;
                        }): number;
                    };
                    slice: (start?: number, end?: number) => string;
                    split: {
                        (separator: string | RegExp, limit?: number): string[];
                        (splitter: {
                            [Symbol.split](string: string, limit?: number): string[];
                        }, limit?: number): string[];
                    };
                    substring: (start: number, end?: number) => string;
                    toLowerCase: () => string;
                    toLocaleLowerCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    toUpperCase: () => string;
                    toLocaleUpperCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    trim: () => string;
                    readonly length: number;
                    substr: (from: number, length?: number) => string;
                    valueOf: () => string;
                    codePointAt: (pos: number) => number | undefined;
                    includes: (searchString: string, position?: number) => boolean;
                    endsWith: (searchString: string, endPosition?: number) => boolean;
                    normalize: {
                        (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                        (form?: string): string;
                    };
                    repeat: (count: number) => string;
                    startsWith: (searchString: string, position?: number) => boolean;
                    anchor: (name: string) => string;
                    big: () => string;
                    blink: () => string;
                    bold: () => string;
                    fixed: () => string;
                    fontcolor: (color: string) => string;
                    fontsize: {
                        (size: number): string;
                        (size: string): string;
                    };
                    italics: () => string;
                    link: (url: string) => string;
                    small: () => string;
                    strike: () => string;
                    sub: () => string;
                    sup: () => string;
                    padStart: (maxLength: number, fillString?: string) => string;
                    padEnd: (maxLength: number, fillString?: string) => string;
                    trimEnd: () => string;
                    trimStart: () => string;
                    trimLeft: () => string;
                    trimRight: () => string;
                    matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                    [Symbol.iterator]: () => StringIterator<string>;
                    at: (index: number) => string | undefined;
                } | null | undefined;
                type?: ("bullets" | "fraction" | "progressbar" | "custom") | undefined;
                bulletElement?: string | undefined;
                dynamicBullets?: boolean | undefined;
                dynamicMainBullets?: number | undefined;
                hideOnClick?: boolean | undefined;
                clickable?: boolean | undefined;
                progressbarOpposite?: boolean | undefined;
                formatFractionCurrent?: ((number: number) => number | string) | undefined;
                formatFractionTotal?: ((number: number) => number | string) | undefined;
                renderBullet?: ((index: number, className: string) => string) | undefined;
                renderFraction?: ((currentClass: string, totalClass: string) => string) | undefined;
                renderProgressbar?: ((progressbarFillClass: string) => string) | undefined;
                renderCustom?: ((swiper: import('swiper/types').Swiper, current: number, total: number) => string) | undefined;
                bulletClass?: string | undefined;
                bulletActiveClass?: string | undefined;
                modifierClass?: string | undefined;
                currentClass?: string | undefined;
                totalClass?: string | undefined;
                hiddenClass?: string | undefined;
                progressbarFillClass?: string | undefined;
                progressbarOppositeClass?: string | undefined;
                clickableClass?: string | undefined;
                lockClass?: string | undefined;
                horizontalClass?: string | undefined;
                verticalClass?: string | undefined;
                paginationDisabledClass?: string | undefined;
            } | undefined;
            parallax?: boolean | {
                enabled?: boolean | undefined;
            } | undefined;
            scrollbar?: boolean | {
                enabled?: boolean | undefined;
                el?: HTMLElement | {
                    readonly [x: number]: string;
                    toString: () => string;
                    charAt: (pos: number) => string;
                    charCodeAt: (index: number) => number;
                    concat: (...strings: string[]) => string;
                    indexOf: (searchString: string, position?: number) => number;
                    lastIndexOf: (searchString: string, position?: number) => number;
                    localeCompare: {
                        (that: string): number;
                        (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                        (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                    };
                    match: {
                        (regexp: string | RegExp): RegExpMatchArray | null;
                        (matcher: {
                            [Symbol.match](string: string): RegExpMatchArray | null;
                        }): RegExpMatchArray | null;
                    };
                    replace: {
                        (searchValue: string | RegExp, replaceValue: string): string;
                        (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replaceValue: string): string;
                        }, replaceValue: string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                        }, replacer: (substring: string, ...args: any[]) => string): string;
                    };
                    search: {
                        (regexp: string | RegExp): number;
                        (searcher: {
                            [Symbol.search](string: string): number;
                        }): number;
                    };
                    slice: (start?: number, end?: number) => string;
                    split: {
                        (separator: string | RegExp, limit?: number): string[];
                        (splitter: {
                            [Symbol.split](string: string, limit?: number): string[];
                        }, limit?: number): string[];
                    };
                    substring: (start: number, end?: number) => string;
                    toLowerCase: () => string;
                    toLocaleLowerCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    toUpperCase: () => string;
                    toLocaleUpperCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    trim: () => string;
                    readonly length: number;
                    substr: (from: number, length?: number) => string;
                    valueOf: () => string;
                    codePointAt: (pos: number) => number | undefined;
                    includes: (searchString: string, position?: number) => boolean;
                    endsWith: (searchString: string, endPosition?: number) => boolean;
                    normalize: {
                        (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                        (form?: string): string;
                    };
                    repeat: (count: number) => string;
                    startsWith: (searchString: string, position?: number) => boolean;
                    anchor: (name: string) => string;
                    big: () => string;
                    blink: () => string;
                    bold: () => string;
                    fixed: () => string;
                    fontcolor: (color: string) => string;
                    fontsize: {
                        (size: number): string;
                        (size: string): string;
                    };
                    italics: () => string;
                    link: (url: string) => string;
                    small: () => string;
                    strike: () => string;
                    sub: () => string;
                    sup: () => string;
                    padStart: (maxLength: number, fillString?: string) => string;
                    padEnd: (maxLength: number, fillString?: string) => string;
                    trimEnd: () => string;
                    trimStart: () => string;
                    trimLeft: () => string;
                    trimRight: () => string;
                    matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                    [Symbol.iterator]: () => StringIterator<string>;
                    at: (index: number) => string | undefined;
                } | null | undefined;
                hide?: boolean | undefined;
                draggable?: boolean | undefined;
                snapOnRelease?: boolean | undefined;
                dragSize?: ("auto" | number) | undefined;
                lockClass?: string | undefined;
                dragClass?: string | undefined;
                scrollbarDisabledClass?: string | undefined;
                horizontalClass?: string | undefined;
                verticalClass?: string | undefined;
            } | undefined;
            thumbs?: {
                swiper?: string | any | null | undefined;
                slideThumbActiveClass?: string | undefined;
                thumbsContainerClass?: string | undefined;
                multipleActiveThumbs?: boolean | undefined;
                autoScrollOffset?: number | undefined;
            } | undefined;
            virtual?: boolean | {
                enabled?: boolean | undefined;
                slides?: any[] | undefined;
                cache?: boolean | undefined;
                addSlidesBefore?: number | undefined;
                addSlidesAfter?: number | undefined;
                renderSlide?: ((slide: any, index: any) => any | null) | undefined;
                renderExternal?: ((data: import('swiper/types').VirtualData<any>) => any | null) | undefined;
                renderExternalUpdate?: boolean | undefined;
            } | undefined;
            zoom?: boolean | {
                limitToOriginalSize?: boolean | undefined;
                maxRatio?: number | undefined;
                minRatio?: number | undefined;
                toggle?: boolean | undefined;
                containerClass?: string | undefined;
                zoomedSlideClass?: string | undefined;
            } | undefined;
            freeMode?: boolean | {
                enabled?: boolean | undefined;
                momentum?: boolean | undefined;
                momentumRatio?: number | undefined;
                momentumVelocityRatio?: number | undefined;
                momentumBounce?: boolean | undefined;
                momentumBounceRatio?: number | undefined;
                minimumVelocity?: number | undefined;
                sticky?: boolean | undefined;
            } | undefined;
            grid?: {
                rows?: number | undefined;
                fill?: ("row" | "column") | undefined;
            } | undefined;
            _emitClasses?: boolean | undefined;
        };
        originalParams: {
            modules?: import('swiper/types').SwiperModule[] | undefined;
            injectStyles?: string[] | undefined;
            injectStylesUrls?: string[] | undefined;
            init?: boolean | undefined;
            enabled?: boolean | undefined;
            updateOnWindowResize?: boolean | undefined;
            resizeObserver?: boolean | undefined;
            initialSlide?: number | undefined;
            direction?: ("horizontal" | "vertical") | undefined;
            oneWayMovement?: boolean | undefined;
            swiperElementNodeName?: string | undefined;
            speed?: number | undefined;
            setWrapperSize?: boolean | undefined;
            virtualTranslate?: boolean | undefined;
            width?: (number | null) | undefined;
            height?: (number | null) | undefined;
            autoHeight?: boolean | undefined;
            roundLengths?: boolean | undefined;
            nested?: boolean | undefined;
            createElements?: boolean | undefined;
            eventsPrefix?: string | undefined;
            focusableElements?: string | undefined;
            uniqueNavElements?: boolean | undefined;
            effect?: ("slide" | "fade" | "cube" | "coverflow" | "flip" | "creative" | "cards" | string) | undefined;
            runCallbacksOnInit?: boolean | undefined;
            watchOverflow?: boolean | undefined;
            userAgent?: (string | null) | undefined;
            url?: (string | null) | undefined;
            on?: {
                init?: ((swiper: import('swiper/types').Swiper) => any) | undefined;
                beforeDestroy?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                slidesUpdated?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                slideChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                slideChangeTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                slideChangeTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                slideNextTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                slideNextTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                slidePrevTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                slidePrevTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                transitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                transitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                touchStart?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                touchMove?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                touchMoveOpposite?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                sliderMove?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                touchEnd?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                click?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                tap?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                doubleTap?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                progress?: ((swiper: import('swiper/types').Swiper, progress: number) => void) | undefined;
                reachBeginning?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                reachEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                toEdge?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                fromEdge?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                setTranslate?: ((swiper: import('swiper/types').Swiper, translate: number) => void) | undefined;
                setTransition?: ((swiper: import('swiper/types').Swiper, transition: number) => void) | undefined;
                resize?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                observerUpdate?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                beforeLoopFix?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                loopFix?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                breakpoint?: ((swiper: import('swiper/types').Swiper, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                _beforeBreakpoint?: ((swiper: import('swiper/types').Swiper, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                _containerClasses?: ((swiper: import('swiper/types').Swiper, classNames: string) => void) | undefined;
                _slideClass?: ((swiper: import('swiper/types').Swiper, slideEl: HTMLElement, classNames: string) => void) | undefined;
                _slideClasses?: ((swiper: import('swiper/types').Swiper, slides: {
                    slideEl: HTMLElement;
                    classNames: string;
                    index: number;
                }[]) => void) | undefined;
                _swiper?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                _freeModeNoMomentumRelease?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                activeIndexChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                snapIndexChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                realIndexChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                afterInit?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                beforeInit?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                beforeResize?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                beforeSlideChangeStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                beforeTransitionStart?: ((swiper: import('swiper/types').Swiper, speed: number, internal: any) => void) | undefined;
                changeDirection?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                doubleClick?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                destroy?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                momentumBounce?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                orientationchange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                slideResetTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                slideResetTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                sliderFirstMove?: ((swiper: import('swiper/types').Swiper, event: TouchEvent) => void) | undefined;
                slidesLengthChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                slidesGridLengthChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                snapGridLengthChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                update?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                lock?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                unlock?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                autoplayStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                autoplayStop?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                autoplayPause?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                autoplayResume?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                autoplayTimeLeft?: ((swiper: import('swiper/types').Swiper, timeLeft: number, percentage: number) => void) | undefined;
                autoplay?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                hashChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                hashSet?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                keyPress?: ((swiper: import('swiper/types').Swiper, keyCode: string) => void) | undefined;
                scroll?: ((swiper: import('swiper/types').Swiper, event: WheelEvent) => void) | undefined;
                navigationHide?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                navigationShow?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                navigationPrev?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                navigationNext?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                paginationRender?: ((swiper: import('swiper/types').Swiper, paginationEl: HTMLElement) => void) | undefined;
                paginationUpdate?: ((swiper: import('swiper/types').Swiper, paginationEl: HTMLElement) => void) | undefined;
                paginationHide?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                paginationShow?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                scrollbarDragStart?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                scrollbarDragMove?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                scrollbarDragEnd?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                zoomChange?: ((swiper: import('swiper/types').Swiper, scale: number, imageEl: HTMLElement, slideEl: HTMLElement) => void) | undefined;
            } | undefined;
            onAny?: ((handler: (eventName: string, ...args: any[]) => void) => void) | undefined;
            cssMode?: boolean | undefined;
            spaceBetween?: (number | string) | undefined;
            slidesPerView?: (number | "auto") | undefined;
            maxBackfaceHiddenSlides?: number | undefined;
            slidesPerGroup?: number | undefined;
            slidesPerGroupSkip?: number | undefined;
            slidesPerGroupAuto?: boolean | undefined;
            centeredSlides?: boolean | undefined;
            centeredSlidesBounds?: boolean | undefined;
            slidesOffsetBefore?: number | undefined;
            slidesOffsetAfter?: number | undefined;
            normalizeSlideIndex?: boolean | undefined;
            centerInsufficientSlides?: boolean | undefined;
            grabCursor?: boolean | undefined;
            touchEventsTarget?: ("container" | "wrapper") | undefined;
            touchRatio?: number | undefined;
            touchAngle?: number | undefined;
            simulateTouch?: boolean | undefined;
            shortSwipes?: boolean | undefined;
            longSwipes?: boolean | undefined;
            longSwipesRatio?: number | undefined;
            longSwipesMs?: number | undefined;
            followFinger?: boolean | undefined;
            allowTouchMove?: boolean | undefined;
            threshold?: number | undefined;
            touchStartPreventDefault?: boolean | undefined;
            touchStartForcePreventDefault?: boolean | undefined;
            touchMoveStopPropagation?: boolean | undefined;
            edgeSwipeDetection?: (boolean | string) | undefined;
            edgeSwipeThreshold?: number | undefined;
            touchReleaseOnEdges?: boolean | undefined;
            passiveListeners?: boolean | undefined;
            resistance?: boolean | undefined;
            resistanceRatio?: number | undefined;
            preventInteractionOnTransition?: boolean | undefined;
            allowSlidePrev?: boolean | undefined;
            allowSlideNext?: boolean | undefined;
            noSwiping?: boolean | undefined;
            noSwipingClass?: string | undefined;
            noSwipingSelector?: string | undefined;
            swipeHandler?: HTMLElement | {
                readonly [x: number]: string;
                toString: () => string;
                charAt: (pos: number) => string;
                charCodeAt: (index: number) => number;
                concat: (...strings: string[]) => string;
                indexOf: (searchString: string, position?: number) => number;
                lastIndexOf: (searchString: string, position?: number) => number;
                localeCompare: {
                    (that: string): number;
                    (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                    (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                };
                match: {
                    (regexp: string | RegExp): RegExpMatchArray | null;
                    (matcher: {
                        [Symbol.match](string: string): RegExpMatchArray | null;
                    }): RegExpMatchArray | null;
                };
                replace: {
                    (searchValue: string | RegExp, replaceValue: string): string;
                    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                    (searchValue: {
                        [Symbol.replace](string: string, replaceValue: string): string;
                    }, replaceValue: string): string;
                    (searchValue: {
                        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                    }, replacer: (substring: string, ...args: any[]) => string): string;
                };
                search: {
                    (regexp: string | RegExp): number;
                    (searcher: {
                        [Symbol.search](string: string): number;
                    }): number;
                };
                slice: (start?: number, end?: number) => string;
                split: {
                    (separator: string | RegExp, limit?: number): string[];
                    (splitter: {
                        [Symbol.split](string: string, limit?: number): string[];
                    }, limit?: number): string[];
                };
                substring: (start: number, end?: number) => string;
                toLowerCase: () => string;
                toLocaleLowerCase: {
                    (locales?: string | string[]): string;
                    (locales?: Intl.LocalesArgument): string;
                };
                toUpperCase: () => string;
                toLocaleUpperCase: {
                    (locales?: string | string[]): string;
                    (locales?: Intl.LocalesArgument): string;
                };
                trim: () => string;
                readonly length: number;
                substr: (from: number, length?: number) => string;
                valueOf: () => string;
                codePointAt: (pos: number) => number | undefined;
                includes: (searchString: string, position?: number) => boolean;
                endsWith: (searchString: string, endPosition?: number) => boolean;
                normalize: {
                    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                    (form?: string): string;
                };
                repeat: (count: number) => string;
                startsWith: (searchString: string, position?: number) => boolean;
                anchor: (name: string) => string;
                big: () => string;
                blink: () => string;
                bold: () => string;
                fixed: () => string;
                fontcolor: (color: string) => string;
                fontsize: {
                    (size: number): string;
                    (size: string): string;
                };
                italics: () => string;
                link: (url: string) => string;
                small: () => string;
                strike: () => string;
                sub: () => string;
                sup: () => string;
                padStart: (maxLength: number, fillString?: string) => string;
                padEnd: (maxLength: number, fillString?: string) => string;
                trimEnd: () => string;
                trimStart: () => string;
                trimLeft: () => string;
                trimRight: () => string;
                matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                [Symbol.iterator]: () => StringIterator<string>;
                at: (index: number) => string | undefined;
            } | null | undefined;
            preventClicks?: boolean | undefined;
            preventClicksPropagation?: boolean | undefined;
            slideToClickedSlide?: boolean | undefined;
            watchSlidesProgress?: boolean | undefined;
            loop?: boolean | undefined;
            loopAddBlankSlides?: boolean | undefined;
            loopAdditionalSlides?: number | undefined;
            loopPreventsSliding?: boolean | undefined;
            rewind?: boolean | undefined;
            breakpoints?: {
                [width: number]: import('swiper/types').SwiperOptions;
                [ratio: string]: import('swiper/types').SwiperOptions;
            } | undefined;
            breakpointsBase?: ("window" | "container") | undefined;
            observer?: boolean | undefined;
            observeSlideChildren?: boolean | undefined;
            observeParents?: boolean | undefined;
            containerModifierClass?: string | undefined;
            slideClass?: string | undefined;
            slideActiveClass?: string | undefined;
            slideVisibleClass?: string | undefined;
            slideFullyVisibleClass?: string | undefined;
            slideBlankClass?: string | undefined;
            slideNextClass?: string | undefined;
            slidePrevClass?: string | undefined;
            wrapperClass?: string | undefined;
            lazyPreloaderClass?: string | undefined;
            lazyPreloadPrevNext?: number | undefined;
            a11y?: {
                enabled?: boolean | undefined;
                prevSlideMessage?: string | undefined;
                nextSlideMessage?: string | undefined;
                firstSlideMessage?: string | undefined;
                lastSlideMessage?: string | undefined;
                paginationBulletMessage?: string | undefined;
                notificationClass?: string | undefined;
                containerMessage?: (string | null) | undefined;
                containerRoleDescriptionMessage?: (string | null) | undefined;
                containerRole?: (string | null) | undefined;
                itemRoleDescriptionMessage?: (string | null) | undefined;
                slideLabelMessage?: string | undefined;
                slideRole?: string | undefined;
                id?: (string | number | null) | undefined;
                scrollOnFocus?: boolean | undefined;
            } | undefined;
            autoplay?: boolean | {
                delay?: number | undefined;
                stopOnLastSlide?: boolean | undefined;
                disableOnInteraction?: boolean | undefined;
                reverseDirection?: boolean | undefined;
                waitForTransition?: boolean | undefined;
                pauseOnMouseEnter?: boolean | undefined;
            } | undefined;
            controller?: {
                control?: string | HTMLElement | any | any[] | null | undefined;
                inverse?: boolean | undefined;
                by?: ("slide" | "container") | undefined;
            } | undefined;
            coverflowEffect?: {
                slideShadows?: boolean | undefined;
                rotate?: number | undefined;
                stretch?: number | undefined;
                depth?: number | undefined;
                scale?: number | undefined;
                modifier?: number | undefined;
            } | undefined;
            cubeEffect?: {
                slideShadows?: boolean | undefined;
                shadow?: boolean | undefined;
                shadowOffset?: number | undefined;
                shadowScale?: number | undefined;
            } | undefined;
            fadeEffect?: {
                crossFade?: boolean | undefined;
            } | undefined;
            flipEffect?: {
                slideShadows?: boolean | undefined;
                limitRotation?: boolean | undefined;
            } | undefined;
            creativeEffect?: {
                prev?: {
                    translate?: (string | number)[] | undefined;
                    rotate?: number[] | undefined;
                    opacity?: number | undefined;
                    scale?: number | undefined;
                    shadow?: boolean | undefined;
                    origin?: string | undefined;
                } | undefined;
                next?: {
                    translate?: (string | number)[] | undefined;
                    rotate?: number[] | undefined;
                    opacity?: number | undefined;
                    scale?: number | undefined;
                    shadow?: boolean | undefined;
                    origin?: string | undefined;
                } | undefined;
                limitProgress?: number | undefined;
                shadowPerProgress?: boolean | undefined;
                progressMultiplier?: number | undefined;
                perspective?: boolean | undefined;
            } | undefined;
            cardsEffect?: {
                slideShadows?: boolean | undefined;
                rotate?: boolean | undefined;
                perSlideRotate?: number | undefined;
                perSlideOffset?: number | undefined;
            } | undefined;
            hashNavigation?: boolean | {
                watchState?: boolean | undefined;
                replaceState?: boolean | undefined;
                getSlideIndex?: ((swiper: import('swiper/types').Swiper, hash: string) => number) | undefined;
            } | undefined;
            history?: boolean | {
                enabled?: boolean | undefined;
                root?: string | undefined;
                replaceState?: boolean | undefined;
                key?: string | undefined;
                keepQuery?: boolean | undefined;
            } | undefined;
            keyboard?: boolean | {
                enabled?: boolean | undefined;
                onlyInViewport?: boolean | undefined;
                pageUpDown?: boolean | undefined;
            } | undefined;
            mousewheel?: boolean | {
                enabled?: boolean | undefined;
                forceToAxis?: boolean | undefined;
                releaseOnEdges?: boolean | undefined;
                invert?: boolean | undefined;
                sensitivity?: number | undefined;
                eventsTarget?: HTMLElement | "container" | "wrapper" | {
                    readonly [x: number]: string;
                    toString: () => string;
                    charAt: (pos: number) => string;
                    charCodeAt: (index: number) => number;
                    concat: (...strings: string[]) => string;
                    indexOf: (searchString: string, position?: number) => number;
                    lastIndexOf: (searchString: string, position?: number) => number;
                    localeCompare: {
                        (that: string): number;
                        (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                        (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                    };
                    match: {
                        (regexp: string | RegExp): RegExpMatchArray | null;
                        (matcher: {
                            [Symbol.match](string: string): RegExpMatchArray | null;
                        }): RegExpMatchArray | null;
                    };
                    replace: {
                        (searchValue: string | RegExp, replaceValue: string): string;
                        (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replaceValue: string): string;
                        }, replaceValue: string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                        }, replacer: (substring: string, ...args: any[]) => string): string;
                    };
                    search: {
                        (regexp: string | RegExp): number;
                        (searcher: {
                            [Symbol.search](string: string): number;
                        }): number;
                    };
                    slice: (start?: number, end?: number) => string;
                    split: {
                        (separator: string | RegExp, limit?: number): string[];
                        (splitter: {
                            [Symbol.split](string: string, limit?: number): string[];
                        }, limit?: number): string[];
                    };
                    substring: (start: number, end?: number) => string;
                    toLowerCase: () => string;
                    toLocaleLowerCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    toUpperCase: () => string;
                    toLocaleUpperCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    trim: () => string;
                    readonly length: number;
                    substr: (from: number, length?: number) => string;
                    valueOf: () => string;
                    codePointAt: (pos: number) => number | undefined;
                    includes: (searchString: string, position?: number) => boolean;
                    endsWith: (searchString: string, endPosition?: number) => boolean;
                    normalize: {
                        (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                        (form?: string): string;
                    };
                    repeat: (count: number) => string;
                    startsWith: (searchString: string, position?: number) => boolean;
                    anchor: (name: string) => string;
                    big: () => string;
                    blink: () => string;
                    bold: () => string;
                    fixed: () => string;
                    fontcolor: (color: string) => string;
                    fontsize: {
                        (size: number): string;
                        (size: string): string;
                    };
                    italics: () => string;
                    link: (url: string) => string;
                    small: () => string;
                    strike: () => string;
                    sub: () => string;
                    sup: () => string;
                    padStart: (maxLength: number, fillString?: string) => string;
                    padEnd: (maxLength: number, fillString?: string) => string;
                    trimEnd: () => string;
                    trimStart: () => string;
                    trimLeft: () => string;
                    trimRight: () => string;
                    matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                    [Symbol.iterator]: () => StringIterator<string>;
                    at: (index: number) => string | undefined;
                } | undefined;
                thresholdDelta?: (number | null) | undefined;
                thresholdTime?: (number | null) | undefined;
                noMousewheelClass?: string | undefined;
            } | undefined;
            navigation?: boolean | {
                enabled?: boolean | undefined;
                nextEl?: HTMLElement | {
                    readonly [x: number]: string;
                    toString: () => string;
                    charAt: (pos: number) => string;
                    charCodeAt: (index: number) => number;
                    concat: (...strings: string[]) => string;
                    indexOf: (searchString: string, position?: number) => number;
                    lastIndexOf: (searchString: string, position?: number) => number;
                    localeCompare: {
                        (that: string): number;
                        (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                        (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                    };
                    match: {
                        (regexp: string | RegExp): RegExpMatchArray | null;
                        (matcher: {
                            [Symbol.match](string: string): RegExpMatchArray | null;
                        }): RegExpMatchArray | null;
                    };
                    replace: {
                        (searchValue: string | RegExp, replaceValue: string): string;
                        (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replaceValue: string): string;
                        }, replaceValue: string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                        }, replacer: (substring: string, ...args: any[]) => string): string;
                    };
                    search: {
                        (regexp: string | RegExp): number;
                        (searcher: {
                            [Symbol.search](string: string): number;
                        }): number;
                    };
                    slice: (start?: number, end?: number) => string;
                    split: {
                        (separator: string | RegExp, limit?: number): string[];
                        (splitter: {
                            [Symbol.split](string: string, limit?: number): string[];
                        }, limit?: number): string[];
                    };
                    substring: (start: number, end?: number) => string;
                    toLowerCase: () => string;
                    toLocaleLowerCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    toUpperCase: () => string;
                    toLocaleUpperCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    trim: () => string;
                    readonly length: number;
                    substr: (from: number, length?: number) => string;
                    valueOf: () => string;
                    codePointAt: (pos: number) => number | undefined;
                    includes: (searchString: string, position?: number) => boolean;
                    endsWith: (searchString: string, endPosition?: number) => boolean;
                    normalize: {
                        (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                        (form?: string): string;
                    };
                    repeat: (count: number) => string;
                    startsWith: (searchString: string, position?: number) => boolean;
                    anchor: (name: string) => string;
                    big: () => string;
                    blink: () => string;
                    bold: () => string;
                    fixed: () => string;
                    fontcolor: (color: string) => string;
                    fontsize: {
                        (size: number): string;
                        (size: string): string;
                    };
                    italics: () => string;
                    link: (url: string) => string;
                    small: () => string;
                    strike: () => string;
                    sub: () => string;
                    sup: () => string;
                    padStart: (maxLength: number, fillString?: string) => string;
                    padEnd: (maxLength: number, fillString?: string) => string;
                    trimEnd: () => string;
                    trimStart: () => string;
                    trimLeft: () => string;
                    trimRight: () => string;
                    matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                    [Symbol.iterator]: () => StringIterator<string>;
                    at: (index: number) => string | undefined;
                } | null | undefined;
                prevEl?: HTMLElement | {
                    readonly [x: number]: string;
                    toString: () => string;
                    charAt: (pos: number) => string;
                    charCodeAt: (index: number) => number;
                    concat: (...strings: string[]) => string;
                    indexOf: (searchString: string, position?: number) => number;
                    lastIndexOf: (searchString: string, position?: number) => number;
                    localeCompare: {
                        (that: string): number;
                        (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                        (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                    };
                    match: {
                        (regexp: string | RegExp): RegExpMatchArray | null;
                        (matcher: {
                            [Symbol.match](string: string): RegExpMatchArray | null;
                        }): RegExpMatchArray | null;
                    };
                    replace: {
                        (searchValue: string | RegExp, replaceValue: string): string;
                        (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replaceValue: string): string;
                        }, replaceValue: string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                        }, replacer: (substring: string, ...args: any[]) => string): string;
                    };
                    search: {
                        (regexp: string | RegExp): number;
                        (searcher: {
                            [Symbol.search](string: string): number;
                        }): number;
                    };
                    slice: (start?: number, end?: number) => string;
                    split: {
                        (separator: string | RegExp, limit?: number): string[];
                        (splitter: {
                            [Symbol.split](string: string, limit?: number): string[];
                        }, limit?: number): string[];
                    };
                    substring: (start: number, end?: number) => string;
                    toLowerCase: () => string;
                    toLocaleLowerCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    toUpperCase: () => string;
                    toLocaleUpperCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    trim: () => string;
                    readonly length: number;
                    substr: (from: number, length?: number) => string;
                    valueOf: () => string;
                    codePointAt: (pos: number) => number | undefined;
                    includes: (searchString: string, position?: number) => boolean;
                    endsWith: (searchString: string, endPosition?: number) => boolean;
                    normalize: {
                        (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                        (form?: string): string;
                    };
                    repeat: (count: number) => string;
                    startsWith: (searchString: string, position?: number) => boolean;
                    anchor: (name: string) => string;
                    big: () => string;
                    blink: () => string;
                    bold: () => string;
                    fixed: () => string;
                    fontcolor: (color: string) => string;
                    fontsize: {
                        (size: number): string;
                        (size: string): string;
                    };
                    italics: () => string;
                    link: (url: string) => string;
                    small: () => string;
                    strike: () => string;
                    sub: () => string;
                    sup: () => string;
                    padStart: (maxLength: number, fillString?: string) => string;
                    padEnd: (maxLength: number, fillString?: string) => string;
                    trimEnd: () => string;
                    trimStart: () => string;
                    trimLeft: () => string;
                    trimRight: () => string;
                    matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                    [Symbol.iterator]: () => StringIterator<string>;
                    at: (index: number) => string | undefined;
                } | null | undefined;
                hideOnClick?: boolean | undefined;
                disabledClass?: string | undefined;
                hiddenClass?: string | undefined;
                lockClass?: string | undefined;
                navigationDisabledClass?: string | undefined;
            } | undefined;
            pagination?: boolean | {
                enabled?: boolean | undefined;
                el?: HTMLElement | {
                    readonly [x: number]: string;
                    toString: () => string;
                    charAt: (pos: number) => string;
                    charCodeAt: (index: number) => number;
                    concat: (...strings: string[]) => string;
                    indexOf: (searchString: string, position?: number) => number;
                    lastIndexOf: (searchString: string, position?: number) => number;
                    localeCompare: {
                        (that: string): number;
                        (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                        (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                    };
                    match: {
                        (regexp: string | RegExp): RegExpMatchArray | null;
                        (matcher: {
                            [Symbol.match](string: string): RegExpMatchArray | null;
                        }): RegExpMatchArray | null;
                    };
                    replace: {
                        (searchValue: string | RegExp, replaceValue: string): string;
                        (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replaceValue: string): string;
                        }, replaceValue: string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                        }, replacer: (substring: string, ...args: any[]) => string): string;
                    };
                    search: {
                        (regexp: string | RegExp): number;
                        (searcher: {
                            [Symbol.search](string: string): number;
                        }): number;
                    };
                    slice: (start?: number, end?: number) => string;
                    split: {
                        (separator: string | RegExp, limit?: number): string[];
                        (splitter: {
                            [Symbol.split](string: string, limit?: number): string[];
                        }, limit?: number): string[];
                    };
                    substring: (start: number, end?: number) => string;
                    toLowerCase: () => string;
                    toLocaleLowerCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    toUpperCase: () => string;
                    toLocaleUpperCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    trim: () => string;
                    readonly length: number;
                    substr: (from: number, length?: number) => string;
                    valueOf: () => string;
                    codePointAt: (pos: number) => number | undefined;
                    includes: (searchString: string, position?: number) => boolean;
                    endsWith: (searchString: string, endPosition?: number) => boolean;
                    normalize: {
                        (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                        (form?: string): string;
                    };
                    repeat: (count: number) => string;
                    startsWith: (searchString: string, position?: number) => boolean;
                    anchor: (name: string) => string;
                    big: () => string;
                    blink: () => string;
                    bold: () => string;
                    fixed: () => string;
                    fontcolor: (color: string) => string;
                    fontsize: {
                        (size: number): string;
                        (size: string): string;
                    };
                    italics: () => string;
                    link: (url: string) => string;
                    small: () => string;
                    strike: () => string;
                    sub: () => string;
                    sup: () => string;
                    padStart: (maxLength: number, fillString?: string) => string;
                    padEnd: (maxLength: number, fillString?: string) => string;
                    trimEnd: () => string;
                    trimStart: () => string;
                    trimLeft: () => string;
                    trimRight: () => string;
                    matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                    [Symbol.iterator]: () => StringIterator<string>;
                    at: (index: number) => string | undefined;
                } | null | undefined;
                type?: ("bullets" | "fraction" | "progressbar" | "custom") | undefined;
                bulletElement?: string | undefined;
                dynamicBullets?: boolean | undefined;
                dynamicMainBullets?: number | undefined;
                hideOnClick?: boolean | undefined;
                clickable?: boolean | undefined;
                progressbarOpposite?: boolean | undefined;
                formatFractionCurrent?: ((number: number) => number | string) | undefined;
                formatFractionTotal?: ((number: number) => number | string) | undefined;
                renderBullet?: ((index: number, className: string) => string) | undefined;
                renderFraction?: ((currentClass: string, totalClass: string) => string) | undefined;
                renderProgressbar?: ((progressbarFillClass: string) => string) | undefined;
                renderCustom?: ((swiper: import('swiper/types').Swiper, current: number, total: number) => string) | undefined;
                bulletClass?: string | undefined;
                bulletActiveClass?: string | undefined;
                modifierClass?: string | undefined;
                currentClass?: string | undefined;
                totalClass?: string | undefined;
                hiddenClass?: string | undefined;
                progressbarFillClass?: string | undefined;
                progressbarOppositeClass?: string | undefined;
                clickableClass?: string | undefined;
                lockClass?: string | undefined;
                horizontalClass?: string | undefined;
                verticalClass?: string | undefined;
                paginationDisabledClass?: string | undefined;
            } | undefined;
            parallax?: boolean | {
                enabled?: boolean | undefined;
            } | undefined;
            scrollbar?: boolean | {
                enabled?: boolean | undefined;
                el?: HTMLElement | {
                    readonly [x: number]: string;
                    toString: () => string;
                    charAt: (pos: number) => string;
                    charCodeAt: (index: number) => number;
                    concat: (...strings: string[]) => string;
                    indexOf: (searchString: string, position?: number) => number;
                    lastIndexOf: (searchString: string, position?: number) => number;
                    localeCompare: {
                        (that: string): number;
                        (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                        (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                    };
                    match: {
                        (regexp: string | RegExp): RegExpMatchArray | null;
                        (matcher: {
                            [Symbol.match](string: string): RegExpMatchArray | null;
                        }): RegExpMatchArray | null;
                    };
                    replace: {
                        (searchValue: string | RegExp, replaceValue: string): string;
                        (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replaceValue: string): string;
                        }, replaceValue: string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                        }, replacer: (substring: string, ...args: any[]) => string): string;
                    };
                    search: {
                        (regexp: string | RegExp): number;
                        (searcher: {
                            [Symbol.search](string: string): number;
                        }): number;
                    };
                    slice: (start?: number, end?: number) => string;
                    split: {
                        (separator: string | RegExp, limit?: number): string[];
                        (splitter: {
                            [Symbol.split](string: string, limit?: number): string[];
                        }, limit?: number): string[];
                    };
                    substring: (start: number, end?: number) => string;
                    toLowerCase: () => string;
                    toLocaleLowerCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    toUpperCase: () => string;
                    toLocaleUpperCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    trim: () => string;
                    readonly length: number;
                    substr: (from: number, length?: number) => string;
                    valueOf: () => string;
                    codePointAt: (pos: number) => number | undefined;
                    includes: (searchString: string, position?: number) => boolean;
                    endsWith: (searchString: string, endPosition?: number) => boolean;
                    normalize: {
                        (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                        (form?: string): string;
                    };
                    repeat: (count: number) => string;
                    startsWith: (searchString: string, position?: number) => boolean;
                    anchor: (name: string) => string;
                    big: () => string;
                    blink: () => string;
                    bold: () => string;
                    fixed: () => string;
                    fontcolor: (color: string) => string;
                    fontsize: {
                        (size: number): string;
                        (size: string): string;
                    };
                    italics: () => string;
                    link: (url: string) => string;
                    small: () => string;
                    strike: () => string;
                    sub: () => string;
                    sup: () => string;
                    padStart: (maxLength: number, fillString?: string) => string;
                    padEnd: (maxLength: number, fillString?: string) => string;
                    trimEnd: () => string;
                    trimStart: () => string;
                    trimLeft: () => string;
                    trimRight: () => string;
                    matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                    [Symbol.iterator]: () => StringIterator<string>;
                    at: (index: number) => string | undefined;
                } | null | undefined;
                hide?: boolean | undefined;
                draggable?: boolean | undefined;
                snapOnRelease?: boolean | undefined;
                dragSize?: ("auto" | number) | undefined;
                lockClass?: string | undefined;
                dragClass?: string | undefined;
                scrollbarDisabledClass?: string | undefined;
                horizontalClass?: string | undefined;
                verticalClass?: string | undefined;
            } | undefined;
            thumbs?: {
                swiper?: string | any | null | undefined;
                slideThumbActiveClass?: string | undefined;
                thumbsContainerClass?: string | undefined;
                multipleActiveThumbs?: boolean | undefined;
                autoScrollOffset?: number | undefined;
            } | undefined;
            virtual?: boolean | {
                enabled?: boolean | undefined;
                slides?: any[] | undefined;
                cache?: boolean | undefined;
                addSlidesBefore?: number | undefined;
                addSlidesAfter?: number | undefined;
                renderSlide?: ((slide: any, index: any) => any | null) | undefined;
                renderExternal?: ((data: import('swiper/types').VirtualData<any>) => any | null) | undefined;
                renderExternalUpdate?: boolean | undefined;
            } | undefined;
            zoom?: boolean | {
                limitToOriginalSize?: boolean | undefined;
                maxRatio?: number | undefined;
                minRatio?: number | undefined;
                toggle?: boolean | undefined;
                containerClass?: string | undefined;
                zoomedSlideClass?: string | undefined;
            } | undefined;
            freeMode?: boolean | {
                enabled?: boolean | undefined;
                momentum?: boolean | undefined;
                momentumRatio?: number | undefined;
                momentumVelocityRatio?: number | undefined;
                momentumBounce?: boolean | undefined;
                momentumBounceRatio?: number | undefined;
                minimumVelocity?: number | undefined;
                sticky?: boolean | undefined;
            } | undefined;
            grid?: {
                rows?: number | undefined;
                fill?: ("row" | "column") | undefined;
            } | undefined;
            _emitClasses?: boolean | undefined;
        };
        el: HTMLElement;
        wrapperEl: HTMLElement;
        slidesEl: HTMLElement;
        slides: HTMLElement[];
        loopedSlides: number | null;
        width: number;
        height: number;
        translate: number;
        progress: number;
        activeIndex: number;
        realIndex: number;
        previousIndex: number;
        snapIndex: number;
        snapGrid: number[];
        slidesGrid: number[];
        slidesSizesGrid: number[];
        isBeginning: boolean;
        isEnd: boolean;
        isLocked: boolean;
        animating: boolean;
        touches: {
            startX: number;
            startY: number;
            currentX: number;
            currentY: number;
            diff: number;
        };
        clickedIndex: number;
        clickedSlide: HTMLElement;
        allowSlideNext: boolean;
        allowSlidePrev: boolean;
        allowTouchMove: boolean;
        swipeDirection: "prev" | "next";
        rtlTranslate: boolean;
        disable: () => void;
        enable: () => void;
        setProgress: (progress: number, speed?: number) => void;
        slideNext: (speed?: number, runCallbacks?: boolean) => boolean;
        slidePrev: (speed?: number, runCallbacks?: boolean) => boolean;
        slideTo: (index: number, speed?: number, runCallbacks?: boolean) => boolean;
        slideToLoop: (index: number, speed?: number, runCallbacks?: boolean) => import('swiper/types').Swiper;
        slideReset: (speed?: number, runCallbacks?: boolean) => boolean;
        slideToClosest: (speed?: number, runCallbacks?: boolean) => boolean;
        slidesPerViewDynamic: () => number;
        updateAutoHeight: (speed?: number) => void;
        update: () => void;
        updateSize: () => void;
        updateSlides: () => void;
        updateProgress: () => void;
        updateSlidesClasses: () => void;
        changeDirection: (direction?: "horizontal" | "vertical", needUpdate?: boolean) => void;
        changeLanguageDirection: (direction: "rtl" | "ltr") => void;
        detachEvents: () => void;
        attachEvents: () => void;
        loopCreate: () => void;
        loopDestroy: () => void;
        init: (el?: HTMLElement) => import('swiper/types').Swiper;
        destroy: (deleteInstance?: boolean, cleanStyles?: boolean) => void;
        setTranslate: (translate: any) => void;
        getTranslate: () => any;
        translateTo: (translate: number, speed: number, runCallbacks?: boolean, translateBounds?: boolean) => any;
        minTranslate: () => number;
        maxTranslate: () => number;
        unsetGrabCursor: () => void;
        setGrabCursor: () => void;
        onAny: (handler: (eventName: string, ...args: any[]) => void) => void;
        offAny: (handler: (eventName: string, ...args: any[]) => void) => void;
        isHorizontal: () => boolean;
        getBreakpoint: (breakpoints: import('swiper/types').SwiperOptions["breakpoints"]) => string;
        setBreakpoint: () => void;
        currentBreakpoint: any;
        destroyed: boolean;
        modules: Array<import('swiper/types').SwiperModule>;
        a11y: import('swiper/types').A11yMethods;
        autoplay: {
            running: boolean;
            paused: boolean;
            timeLeft: number;
            pause: () => void;
            resume: () => void;
            start: () => boolean;
            stop: () => boolean;
        };
        controller: {
            control?: any | any[] | undefined;
        };
        coverflowEffect: import('swiper/types').CoverflowEffectMethods;
        cubeEffect: import('swiper/types').CubeEffectMethods;
        fadeEffect: import('swiper/types').FadeEffectMethods;
        flipEffect: import('swiper/types').FlipEffectMethods;
        creativeEffect: import('swiper/types').CreativeEffectMethods;
        cardsEffect: import('swiper/types').CardsEffectMethods;
        hashNavigation: import('swiper/types').HashNavigationMethods;
        history: import('swiper/types').HistoryMethods;
        keyboard: {
            enabled: boolean;
            enable: () => void;
            disable: () => void;
        };
        mousewheel: {
            enabled: boolean;
            enable: () => void;
            disable: () => void;
        };
        navigation: {
            nextEl: HTMLElement;
            prevEl: HTMLElement;
            update: () => void;
            init: () => void;
            destroy: () => void;
        };
        pagination: {
            el: HTMLElement;
            bullets: HTMLElement[];
            render: () => void;
            update: () => void;
            init: () => void;
            destroy: () => void;
        };
        parallax: import('swiper/types').ParallaxMethods;
        scrollbar: {
            el: HTMLElement;
            dragEl: HTMLElement;
            updateSize: () => void;
            setTranslate: () => void;
            init: () => void;
            destroy: () => void;
        };
        thumbs: {
            swiper: any;
            update: (initial: boolean) => void;
            init: () => boolean;
        };
        virtual: {
            cache: object;
            from: number;
            to: number;
            slides: any[];
            appendSlide: (slide: HTMLElement | string | HTMLElement[] | string[]) => void;
            prependSlide: (slide: HTMLElement | string | HTMLElement[] | string[]) => void;
            removeSlide: (slideIndexes: number[]) => void;
            removeAllSlides: () => void;
            update: (force: boolean) => void;
        };
        zoom: {
            enabled: boolean;
            scale: number;
            enable: () => void;
            disable: () => void;
            in: (ratio?: number) => void;
            out: () => void;
            toggle: (event?: MouseEvent | TouchEvent | PointerEvent) => void;
        };
        freeMode: {
            onTouchMove: () => void;
            onTouchEnd: () => void;
        };
        on: <E extends keyof import('swiper/types').SwiperEvents>(event: E, handler: import('swiper/types').SwiperEvents[E]) => void;
        once: <E extends keyof import('swiper/types').SwiperEvents>(event: E, handler: import('swiper/types').SwiperEvents[E]) => void;
        off: {
            <E extends keyof import('swiper/types').SwiperEvents>(event: E, handler: import('swiper/types').SwiperEvents[E]): void;
            <E extends keyof import('swiper/types').SwiperEvents>(event: E): void;
        };
        emit: <E extends keyof import('swiper/types').SwiperEvents>(event: E, ...args: any[]) => void;
        appendSlide: (slides: HTMLElement | string | string[] | HTMLElement[]) => void;
        prependSlide: (slides: HTMLElement | string | string[] | HTMLElement[]) => void;
        addSlide: (index: number, slides: HTMLElement | string | string[] | HTMLElement[]) => void;
        removeSlide: (slideIndex: number | number[]) => void;
        removeAllSlides: () => void;
    } | null, import('swiper/types').Swiper | {
        params: {
            modules?: import('swiper/types').SwiperModule[] | undefined;
            injectStyles?: string[] | undefined;
            injectStylesUrls?: string[] | undefined;
            init?: boolean | undefined;
            enabled?: boolean | undefined;
            updateOnWindowResize?: boolean | undefined;
            resizeObserver?: boolean | undefined;
            initialSlide?: number | undefined;
            direction?: ("horizontal" | "vertical") | undefined;
            oneWayMovement?: boolean | undefined;
            swiperElementNodeName?: string | undefined;
            speed?: number | undefined;
            setWrapperSize?: boolean | undefined;
            virtualTranslate?: boolean | undefined;
            width?: (number | null) | undefined;
            height?: (number | null) | undefined;
            autoHeight?: boolean | undefined;
            roundLengths?: boolean | undefined;
            nested?: boolean | undefined;
            createElements?: boolean | undefined;
            eventsPrefix?: string | undefined;
            focusableElements?: string | undefined;
            uniqueNavElements?: boolean | undefined;
            effect?: ("slide" | "fade" | "cube" | "coverflow" | "flip" | "creative" | "cards" | string) | undefined;
            runCallbacksOnInit?: boolean | undefined;
            watchOverflow?: boolean | undefined;
            userAgent?: (string | null) | undefined;
            url?: (string | null) | undefined;
            on?: {
                init?: ((swiper: import('swiper/types').Swiper) => any) | undefined;
                beforeDestroy?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                slidesUpdated?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                slideChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                slideChangeTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                slideChangeTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                slideNextTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                slideNextTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                slidePrevTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                slidePrevTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                transitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                transitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                touchStart?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                touchMove?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                touchMoveOpposite?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                sliderMove?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                touchEnd?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                click?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                tap?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                doubleTap?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                progress?: ((swiper: import('swiper/types').Swiper, progress: number) => void) | undefined;
                reachBeginning?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                reachEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                toEdge?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                fromEdge?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                setTranslate?: ((swiper: import('swiper/types').Swiper, translate: number) => void) | undefined;
                setTransition?: ((swiper: import('swiper/types').Swiper, transition: number) => void) | undefined;
                resize?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                observerUpdate?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                beforeLoopFix?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                loopFix?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                breakpoint?: ((swiper: import('swiper/types').Swiper, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                _beforeBreakpoint?: ((swiper: import('swiper/types').Swiper, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                _containerClasses?: ((swiper: import('swiper/types').Swiper, classNames: string) => void) | undefined;
                _slideClass?: ((swiper: import('swiper/types').Swiper, slideEl: HTMLElement, classNames: string) => void) | undefined;
                _slideClasses?: ((swiper: import('swiper/types').Swiper, slides: {
                    slideEl: HTMLElement;
                    classNames: string;
                    index: number;
                }[]) => void) | undefined;
                _swiper?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                _freeModeNoMomentumRelease?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                activeIndexChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                snapIndexChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                realIndexChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                afterInit?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                beforeInit?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                beforeResize?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                beforeSlideChangeStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                beforeTransitionStart?: ((swiper: import('swiper/types').Swiper, speed: number, internal: any) => void) | undefined;
                changeDirection?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                doubleClick?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                destroy?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                momentumBounce?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                orientationchange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                slideResetTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                slideResetTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                sliderFirstMove?: ((swiper: import('swiper/types').Swiper, event: TouchEvent) => void) | undefined;
                slidesLengthChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                slidesGridLengthChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                snapGridLengthChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                update?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                lock?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                unlock?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                autoplayStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                autoplayStop?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                autoplayPause?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                autoplayResume?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                autoplayTimeLeft?: ((swiper: import('swiper/types').Swiper, timeLeft: number, percentage: number) => void) | undefined;
                autoplay?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                hashChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                hashSet?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                keyPress?: ((swiper: import('swiper/types').Swiper, keyCode: string) => void) | undefined;
                scroll?: ((swiper: import('swiper/types').Swiper, event: WheelEvent) => void) | undefined;
                navigationHide?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                navigationShow?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                navigationPrev?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                navigationNext?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                paginationRender?: ((swiper: import('swiper/types').Swiper, paginationEl: HTMLElement) => void) | undefined;
                paginationUpdate?: ((swiper: import('swiper/types').Swiper, paginationEl: HTMLElement) => void) | undefined;
                paginationHide?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                paginationShow?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                scrollbarDragStart?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                scrollbarDragMove?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                scrollbarDragEnd?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                zoomChange?: ((swiper: import('swiper/types').Swiper, scale: number, imageEl: HTMLElement, slideEl: HTMLElement) => void) | undefined;
            } | undefined;
            onAny?: ((handler: (eventName: string, ...args: any[]) => void) => void) | undefined;
            cssMode?: boolean | undefined;
            spaceBetween?: (number | string) | undefined;
            slidesPerView?: (number | "auto") | undefined;
            maxBackfaceHiddenSlides?: number | undefined;
            slidesPerGroup?: number | undefined;
            slidesPerGroupSkip?: number | undefined;
            slidesPerGroupAuto?: boolean | undefined;
            centeredSlides?: boolean | undefined;
            centeredSlidesBounds?: boolean | undefined;
            slidesOffsetBefore?: number | undefined;
            slidesOffsetAfter?: number | undefined;
            normalizeSlideIndex?: boolean | undefined;
            centerInsufficientSlides?: boolean | undefined;
            grabCursor?: boolean | undefined;
            touchEventsTarget?: ("container" | "wrapper") | undefined;
            touchRatio?: number | undefined;
            touchAngle?: number | undefined;
            simulateTouch?: boolean | undefined;
            shortSwipes?: boolean | undefined;
            longSwipes?: boolean | undefined;
            longSwipesRatio?: number | undefined;
            longSwipesMs?: number | undefined;
            followFinger?: boolean | undefined;
            allowTouchMove?: boolean | undefined;
            threshold?: number | undefined;
            touchStartPreventDefault?: boolean | undefined;
            touchStartForcePreventDefault?: boolean | undefined;
            touchMoveStopPropagation?: boolean | undefined;
            edgeSwipeDetection?: (boolean | string) | undefined;
            edgeSwipeThreshold?: number | undefined;
            touchReleaseOnEdges?: boolean | undefined;
            passiveListeners?: boolean | undefined;
            resistance?: boolean | undefined;
            resistanceRatio?: number | undefined;
            preventInteractionOnTransition?: boolean | undefined;
            allowSlidePrev?: boolean | undefined;
            allowSlideNext?: boolean | undefined;
            noSwiping?: boolean | undefined;
            noSwipingClass?: string | undefined;
            noSwipingSelector?: string | undefined;
            swipeHandler?: HTMLElement | {
                readonly [x: number]: string;
                toString: () => string;
                charAt: (pos: number) => string;
                charCodeAt: (index: number) => number;
                concat: (...strings: string[]) => string;
                indexOf: (searchString: string, position?: number) => number;
                lastIndexOf: (searchString: string, position?: number) => number;
                localeCompare: {
                    (that: string): number;
                    (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                    (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                };
                match: {
                    (regexp: string | RegExp): RegExpMatchArray | null;
                    (matcher: {
                        [Symbol.match](string: string): RegExpMatchArray | null;
                    }): RegExpMatchArray | null;
                };
                replace: {
                    (searchValue: string | RegExp, replaceValue: string): string;
                    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                    (searchValue: {
                        [Symbol.replace](string: string, replaceValue: string): string;
                    }, replaceValue: string): string;
                    (searchValue: {
                        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                    }, replacer: (substring: string, ...args: any[]) => string): string;
                };
                search: {
                    (regexp: string | RegExp): number;
                    (searcher: {
                        [Symbol.search](string: string): number;
                    }): number;
                };
                slice: (start?: number, end?: number) => string;
                split: {
                    (separator: string | RegExp, limit?: number): string[];
                    (splitter: {
                        [Symbol.split](string: string, limit?: number): string[];
                    }, limit?: number): string[];
                };
                substring: (start: number, end?: number) => string;
                toLowerCase: () => string;
                toLocaleLowerCase: {
                    (locales?: string | string[]): string;
                    (locales?: Intl.LocalesArgument): string;
                };
                toUpperCase: () => string;
                toLocaleUpperCase: {
                    (locales?: string | string[]): string;
                    (locales?: Intl.LocalesArgument): string;
                };
                trim: () => string;
                readonly length: number;
                substr: (from: number, length?: number) => string;
                valueOf: () => string;
                codePointAt: (pos: number) => number | undefined;
                includes: (searchString: string, position?: number) => boolean;
                endsWith: (searchString: string, endPosition?: number) => boolean;
                normalize: {
                    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                    (form?: string): string;
                };
                repeat: (count: number) => string;
                startsWith: (searchString: string, position?: number) => boolean;
                anchor: (name: string) => string;
                big: () => string;
                blink: () => string;
                bold: () => string;
                fixed: () => string;
                fontcolor: (color: string) => string;
                fontsize: {
                    (size: number): string;
                    (size: string): string;
                };
                italics: () => string;
                link: (url: string) => string;
                small: () => string;
                strike: () => string;
                sub: () => string;
                sup: () => string;
                padStart: (maxLength: number, fillString?: string) => string;
                padEnd: (maxLength: number, fillString?: string) => string;
                trimEnd: () => string;
                trimStart: () => string;
                trimLeft: () => string;
                trimRight: () => string;
                matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                [Symbol.iterator]: () => StringIterator<string>;
                at: (index: number) => string | undefined;
            } | null | undefined;
            preventClicks?: boolean | undefined;
            preventClicksPropagation?: boolean | undefined;
            slideToClickedSlide?: boolean | undefined;
            watchSlidesProgress?: boolean | undefined;
            loop?: boolean | undefined;
            loopAddBlankSlides?: boolean | undefined;
            loopAdditionalSlides?: number | undefined;
            loopPreventsSliding?: boolean | undefined;
            rewind?: boolean | undefined;
            breakpoints?: {
                [width: number]: import('swiper/types').SwiperOptions;
                [ratio: string]: import('swiper/types').SwiperOptions;
            } | undefined;
            breakpointsBase?: ("window" | "container") | undefined;
            observer?: boolean | undefined;
            observeSlideChildren?: boolean | undefined;
            observeParents?: boolean | undefined;
            containerModifierClass?: string | undefined;
            slideClass?: string | undefined;
            slideActiveClass?: string | undefined;
            slideVisibleClass?: string | undefined;
            slideFullyVisibleClass?: string | undefined;
            slideBlankClass?: string | undefined;
            slideNextClass?: string | undefined;
            slidePrevClass?: string | undefined;
            wrapperClass?: string | undefined;
            lazyPreloaderClass?: string | undefined;
            lazyPreloadPrevNext?: number | undefined;
            a11y?: {
                enabled?: boolean | undefined;
                prevSlideMessage?: string | undefined;
                nextSlideMessage?: string | undefined;
                firstSlideMessage?: string | undefined;
                lastSlideMessage?: string | undefined;
                paginationBulletMessage?: string | undefined;
                notificationClass?: string | undefined;
                containerMessage?: (string | null) | undefined;
                containerRoleDescriptionMessage?: (string | null) | undefined;
                containerRole?: (string | null) | undefined;
                itemRoleDescriptionMessage?: (string | null) | undefined;
                slideLabelMessage?: string | undefined;
                slideRole?: string | undefined;
                id?: (string | number | null) | undefined;
                scrollOnFocus?: boolean | undefined;
            } | undefined;
            autoplay?: boolean | {
                delay?: number | undefined;
                stopOnLastSlide?: boolean | undefined;
                disableOnInteraction?: boolean | undefined;
                reverseDirection?: boolean | undefined;
                waitForTransition?: boolean | undefined;
                pauseOnMouseEnter?: boolean | undefined;
            } | undefined;
            controller?: {
                control?: string | HTMLElement | any | any[] | null | undefined;
                inverse?: boolean | undefined;
                by?: ("slide" | "container") | undefined;
            } | undefined;
            coverflowEffect?: {
                slideShadows?: boolean | undefined;
                rotate?: number | undefined;
                stretch?: number | undefined;
                depth?: number | undefined;
                scale?: number | undefined;
                modifier?: number | undefined;
            } | undefined;
            cubeEffect?: {
                slideShadows?: boolean | undefined;
                shadow?: boolean | undefined;
                shadowOffset?: number | undefined;
                shadowScale?: number | undefined;
            } | undefined;
            fadeEffect?: {
                crossFade?: boolean | undefined;
            } | undefined;
            flipEffect?: {
                slideShadows?: boolean | undefined;
                limitRotation?: boolean | undefined;
            } | undefined;
            creativeEffect?: {
                prev?: {
                    translate?: (string | number)[] | undefined;
                    rotate?: number[] | undefined;
                    opacity?: number | undefined;
                    scale?: number | undefined;
                    shadow?: boolean | undefined;
                    origin?: string | undefined;
                } | undefined;
                next?: {
                    translate?: (string | number)[] | undefined;
                    rotate?: number[] | undefined;
                    opacity?: number | undefined;
                    scale?: number | undefined;
                    shadow?: boolean | undefined;
                    origin?: string | undefined;
                } | undefined;
                limitProgress?: number | undefined;
                shadowPerProgress?: boolean | undefined;
                progressMultiplier?: number | undefined;
                perspective?: boolean | undefined;
            } | undefined;
            cardsEffect?: {
                slideShadows?: boolean | undefined;
                rotate?: boolean | undefined;
                perSlideRotate?: number | undefined;
                perSlideOffset?: number | undefined;
            } | undefined;
            hashNavigation?: boolean | {
                watchState?: boolean | undefined;
                replaceState?: boolean | undefined;
                getSlideIndex?: ((swiper: import('swiper/types').Swiper, hash: string) => number) | undefined;
            } | undefined;
            history?: boolean | {
                enabled?: boolean | undefined;
                root?: string | undefined;
                replaceState?: boolean | undefined;
                key?: string | undefined;
                keepQuery?: boolean | undefined;
            } | undefined;
            keyboard?: boolean | {
                enabled?: boolean | undefined;
                onlyInViewport?: boolean | undefined;
                pageUpDown?: boolean | undefined;
            } | undefined;
            mousewheel?: boolean | {
                enabled?: boolean | undefined;
                forceToAxis?: boolean | undefined;
                releaseOnEdges?: boolean | undefined;
                invert?: boolean | undefined;
                sensitivity?: number | undefined;
                eventsTarget?: HTMLElement | "container" | "wrapper" | {
                    readonly [x: number]: string;
                    toString: () => string;
                    charAt: (pos: number) => string;
                    charCodeAt: (index: number) => number;
                    concat: (...strings: string[]) => string;
                    indexOf: (searchString: string, position?: number) => number;
                    lastIndexOf: (searchString: string, position?: number) => number;
                    localeCompare: {
                        (that: string): number;
                        (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                        (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                    };
                    match: {
                        (regexp: string | RegExp): RegExpMatchArray | null;
                        (matcher: {
                            [Symbol.match](string: string): RegExpMatchArray | null;
                        }): RegExpMatchArray | null;
                    };
                    replace: {
                        (searchValue: string | RegExp, replaceValue: string): string;
                        (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replaceValue: string): string;
                        }, replaceValue: string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                        }, replacer: (substring: string, ...args: any[]) => string): string;
                    };
                    search: {
                        (regexp: string | RegExp): number;
                        (searcher: {
                            [Symbol.search](string: string): number;
                        }): number;
                    };
                    slice: (start?: number, end?: number) => string;
                    split: {
                        (separator: string | RegExp, limit?: number): string[];
                        (splitter: {
                            [Symbol.split](string: string, limit?: number): string[];
                        }, limit?: number): string[];
                    };
                    substring: (start: number, end?: number) => string;
                    toLowerCase: () => string;
                    toLocaleLowerCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    toUpperCase: () => string;
                    toLocaleUpperCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    trim: () => string;
                    readonly length: number;
                    substr: (from: number, length?: number) => string;
                    valueOf: () => string;
                    codePointAt: (pos: number) => number | undefined;
                    includes: (searchString: string, position?: number) => boolean;
                    endsWith: (searchString: string, endPosition?: number) => boolean;
                    normalize: {
                        (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                        (form?: string): string;
                    };
                    repeat: (count: number) => string;
                    startsWith: (searchString: string, position?: number) => boolean;
                    anchor: (name: string) => string;
                    big: () => string;
                    blink: () => string;
                    bold: () => string;
                    fixed: () => string;
                    fontcolor: (color: string) => string;
                    fontsize: {
                        (size: number): string;
                        (size: string): string;
                    };
                    italics: () => string;
                    link: (url: string) => string;
                    small: () => string;
                    strike: () => string;
                    sub: () => string;
                    sup: () => string;
                    padStart: (maxLength: number, fillString?: string) => string;
                    padEnd: (maxLength: number, fillString?: string) => string;
                    trimEnd: () => string;
                    trimStart: () => string;
                    trimLeft: () => string;
                    trimRight: () => string;
                    matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                    [Symbol.iterator]: () => StringIterator<string>;
                    at: (index: number) => string | undefined;
                } | undefined;
                thresholdDelta?: (number | null) | undefined;
                thresholdTime?: (number | null) | undefined;
                noMousewheelClass?: string | undefined;
            } | undefined;
            navigation?: boolean | {
                enabled?: boolean | undefined;
                nextEl?: HTMLElement | {
                    readonly [x: number]: string;
                    toString: () => string;
                    charAt: (pos: number) => string;
                    charCodeAt: (index: number) => number;
                    concat: (...strings: string[]) => string;
                    indexOf: (searchString: string, position?: number) => number;
                    lastIndexOf: (searchString: string, position?: number) => number;
                    localeCompare: {
                        (that: string): number;
                        (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                        (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                    };
                    match: {
                        (regexp: string | RegExp): RegExpMatchArray | null;
                        (matcher: {
                            [Symbol.match](string: string): RegExpMatchArray | null;
                        }): RegExpMatchArray | null;
                    };
                    replace: {
                        (searchValue: string | RegExp, replaceValue: string): string;
                        (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replaceValue: string): string;
                        }, replaceValue: string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                        }, replacer: (substring: string, ...args: any[]) => string): string;
                    };
                    search: {
                        (regexp: string | RegExp): number;
                        (searcher: {
                            [Symbol.search](string: string): number;
                        }): number;
                    };
                    slice: (start?: number, end?: number) => string;
                    split: {
                        (separator: string | RegExp, limit?: number): string[];
                        (splitter: {
                            [Symbol.split](string: string, limit?: number): string[];
                        }, limit?: number): string[];
                    };
                    substring: (start: number, end?: number) => string;
                    toLowerCase: () => string;
                    toLocaleLowerCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    toUpperCase: () => string;
                    toLocaleUpperCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    trim: () => string;
                    readonly length: number;
                    substr: (from: number, length?: number) => string;
                    valueOf: () => string;
                    codePointAt: (pos: number) => number | undefined;
                    includes: (searchString: string, position?: number) => boolean;
                    endsWith: (searchString: string, endPosition?: number) => boolean;
                    normalize: {
                        (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                        (form?: string): string;
                    };
                    repeat: (count: number) => string;
                    startsWith: (searchString: string, position?: number) => boolean;
                    anchor: (name: string) => string;
                    big: () => string;
                    blink: () => string;
                    bold: () => string;
                    fixed: () => string;
                    fontcolor: (color: string) => string;
                    fontsize: {
                        (size: number): string;
                        (size: string): string;
                    };
                    italics: () => string;
                    link: (url: string) => string;
                    small: () => string;
                    strike: () => string;
                    sub: () => string;
                    sup: () => string;
                    padStart: (maxLength: number, fillString?: string) => string;
                    padEnd: (maxLength: number, fillString?: string) => string;
                    trimEnd: () => string;
                    trimStart: () => string;
                    trimLeft: () => string;
                    trimRight: () => string;
                    matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                    [Symbol.iterator]: () => StringIterator<string>;
                    at: (index: number) => string | undefined;
                } | null | undefined;
                prevEl?: HTMLElement | {
                    readonly [x: number]: string;
                    toString: () => string;
                    charAt: (pos: number) => string;
                    charCodeAt: (index: number) => number;
                    concat: (...strings: string[]) => string;
                    indexOf: (searchString: string, position?: number) => number;
                    lastIndexOf: (searchString: string, position?: number) => number;
                    localeCompare: {
                        (that: string): number;
                        (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                        (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                    };
                    match: {
                        (regexp: string | RegExp): RegExpMatchArray | null;
                        (matcher: {
                            [Symbol.match](string: string): RegExpMatchArray | null;
                        }): RegExpMatchArray | null;
                    };
                    replace: {
                        (searchValue: string | RegExp, replaceValue: string): string;
                        (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replaceValue: string): string;
                        }, replaceValue: string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                        }, replacer: (substring: string, ...args: any[]) => string): string;
                    };
                    search: {
                        (regexp: string | RegExp): number;
                        (searcher: {
                            [Symbol.search](string: string): number;
                        }): number;
                    };
                    slice: (start?: number, end?: number) => string;
                    split: {
                        (separator: string | RegExp, limit?: number): string[];
                        (splitter: {
                            [Symbol.split](string: string, limit?: number): string[];
                        }, limit?: number): string[];
                    };
                    substring: (start: number, end?: number) => string;
                    toLowerCase: () => string;
                    toLocaleLowerCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    toUpperCase: () => string;
                    toLocaleUpperCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    trim: () => string;
                    readonly length: number;
                    substr: (from: number, length?: number) => string;
                    valueOf: () => string;
                    codePointAt: (pos: number) => number | undefined;
                    includes: (searchString: string, position?: number) => boolean;
                    endsWith: (searchString: string, endPosition?: number) => boolean;
                    normalize: {
                        (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                        (form?: string): string;
                    };
                    repeat: (count: number) => string;
                    startsWith: (searchString: string, position?: number) => boolean;
                    anchor: (name: string) => string;
                    big: () => string;
                    blink: () => string;
                    bold: () => string;
                    fixed: () => string;
                    fontcolor: (color: string) => string;
                    fontsize: {
                        (size: number): string;
                        (size: string): string;
                    };
                    italics: () => string;
                    link: (url: string) => string;
                    small: () => string;
                    strike: () => string;
                    sub: () => string;
                    sup: () => string;
                    padStart: (maxLength: number, fillString?: string) => string;
                    padEnd: (maxLength: number, fillString?: string) => string;
                    trimEnd: () => string;
                    trimStart: () => string;
                    trimLeft: () => string;
                    trimRight: () => string;
                    matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                    [Symbol.iterator]: () => StringIterator<string>;
                    at: (index: number) => string | undefined;
                } | null | undefined;
                hideOnClick?: boolean | undefined;
                disabledClass?: string | undefined;
                hiddenClass?: string | undefined;
                lockClass?: string | undefined;
                navigationDisabledClass?: string | undefined;
            } | undefined;
            pagination?: boolean | {
                enabled?: boolean | undefined;
                el?: HTMLElement | {
                    readonly [x: number]: string;
                    toString: () => string;
                    charAt: (pos: number) => string;
                    charCodeAt: (index: number) => number;
                    concat: (...strings: string[]) => string;
                    indexOf: (searchString: string, position?: number) => number;
                    lastIndexOf: (searchString: string, position?: number) => number;
                    localeCompare: {
                        (that: string): number;
                        (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                        (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                    };
                    match: {
                        (regexp: string | RegExp): RegExpMatchArray | null;
                        (matcher: {
                            [Symbol.match](string: string): RegExpMatchArray | null;
                        }): RegExpMatchArray | null;
                    };
                    replace: {
                        (searchValue: string | RegExp, replaceValue: string): string;
                        (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replaceValue: string): string;
                        }, replaceValue: string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                        }, replacer: (substring: string, ...args: any[]) => string): string;
                    };
                    search: {
                        (regexp: string | RegExp): number;
                        (searcher: {
                            [Symbol.search](string: string): number;
                        }): number;
                    };
                    slice: (start?: number, end?: number) => string;
                    split: {
                        (separator: string | RegExp, limit?: number): string[];
                        (splitter: {
                            [Symbol.split](string: string, limit?: number): string[];
                        }, limit?: number): string[];
                    };
                    substring: (start: number, end?: number) => string;
                    toLowerCase: () => string;
                    toLocaleLowerCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    toUpperCase: () => string;
                    toLocaleUpperCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    trim: () => string;
                    readonly length: number;
                    substr: (from: number, length?: number) => string;
                    valueOf: () => string;
                    codePointAt: (pos: number) => number | undefined;
                    includes: (searchString: string, position?: number) => boolean;
                    endsWith: (searchString: string, endPosition?: number) => boolean;
                    normalize: {
                        (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                        (form?: string): string;
                    };
                    repeat: (count: number) => string;
                    startsWith: (searchString: string, position?: number) => boolean;
                    anchor: (name: string) => string;
                    big: () => string;
                    blink: () => string;
                    bold: () => string;
                    fixed: () => string;
                    fontcolor: (color: string) => string;
                    fontsize: {
                        (size: number): string;
                        (size: string): string;
                    };
                    italics: () => string;
                    link: (url: string) => string;
                    small: () => string;
                    strike: () => string;
                    sub: () => string;
                    sup: () => string;
                    padStart: (maxLength: number, fillString?: string) => string;
                    padEnd: (maxLength: number, fillString?: string) => string;
                    trimEnd: () => string;
                    trimStart: () => string;
                    trimLeft: () => string;
                    trimRight: () => string;
                    matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                    [Symbol.iterator]: () => StringIterator<string>;
                    at: (index: number) => string | undefined;
                } | null | undefined;
                type?: ("bullets" | "fraction" | "progressbar" | "custom") | undefined;
                bulletElement?: string | undefined;
                dynamicBullets?: boolean | undefined;
                dynamicMainBullets?: number | undefined;
                hideOnClick?: boolean | undefined;
                clickable?: boolean | undefined;
                progressbarOpposite?: boolean | undefined;
                formatFractionCurrent?: ((number: number) => number | string) | undefined;
                formatFractionTotal?: ((number: number) => number | string) | undefined;
                renderBullet?: ((index: number, className: string) => string) | undefined;
                renderFraction?: ((currentClass: string, totalClass: string) => string) | undefined;
                renderProgressbar?: ((progressbarFillClass: string) => string) | undefined;
                renderCustom?: ((swiper: import('swiper/types').Swiper, current: number, total: number) => string) | undefined;
                bulletClass?: string | undefined;
                bulletActiveClass?: string | undefined;
                modifierClass?: string | undefined;
                currentClass?: string | undefined;
                totalClass?: string | undefined;
                hiddenClass?: string | undefined;
                progressbarFillClass?: string | undefined;
                progressbarOppositeClass?: string | undefined;
                clickableClass?: string | undefined;
                lockClass?: string | undefined;
                horizontalClass?: string | undefined;
                verticalClass?: string | undefined;
                paginationDisabledClass?: string | undefined;
            } | undefined;
            parallax?: boolean | {
                enabled?: boolean | undefined;
            } | undefined;
            scrollbar?: boolean | {
                enabled?: boolean | undefined;
                el?: HTMLElement | {
                    readonly [x: number]: string;
                    toString: () => string;
                    charAt: (pos: number) => string;
                    charCodeAt: (index: number) => number;
                    concat: (...strings: string[]) => string;
                    indexOf: (searchString: string, position?: number) => number;
                    lastIndexOf: (searchString: string, position?: number) => number;
                    localeCompare: {
                        (that: string): number;
                        (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                        (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                    };
                    match: {
                        (regexp: string | RegExp): RegExpMatchArray | null;
                        (matcher: {
                            [Symbol.match](string: string): RegExpMatchArray | null;
                        }): RegExpMatchArray | null;
                    };
                    replace: {
                        (searchValue: string | RegExp, replaceValue: string): string;
                        (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replaceValue: string): string;
                        }, replaceValue: string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                        }, replacer: (substring: string, ...args: any[]) => string): string;
                    };
                    search: {
                        (regexp: string | RegExp): number;
                        (searcher: {
                            [Symbol.search](string: string): number;
                        }): number;
                    };
                    slice: (start?: number, end?: number) => string;
                    split: {
                        (separator: string | RegExp, limit?: number): string[];
                        (splitter: {
                            [Symbol.split](string: string, limit?: number): string[];
                        }, limit?: number): string[];
                    };
                    substring: (start: number, end?: number) => string;
                    toLowerCase: () => string;
                    toLocaleLowerCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    toUpperCase: () => string;
                    toLocaleUpperCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    trim: () => string;
                    readonly length: number;
                    substr: (from: number, length?: number) => string;
                    valueOf: () => string;
                    codePointAt: (pos: number) => number | undefined;
                    includes: (searchString: string, position?: number) => boolean;
                    endsWith: (searchString: string, endPosition?: number) => boolean;
                    normalize: {
                        (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                        (form?: string): string;
                    };
                    repeat: (count: number) => string;
                    startsWith: (searchString: string, position?: number) => boolean;
                    anchor: (name: string) => string;
                    big: () => string;
                    blink: () => string;
                    bold: () => string;
                    fixed: () => string;
                    fontcolor: (color: string) => string;
                    fontsize: {
                        (size: number): string;
                        (size: string): string;
                    };
                    italics: () => string;
                    link: (url: string) => string;
                    small: () => string;
                    strike: () => string;
                    sub: () => string;
                    sup: () => string;
                    padStart: (maxLength: number, fillString?: string) => string;
                    padEnd: (maxLength: number, fillString?: string) => string;
                    trimEnd: () => string;
                    trimStart: () => string;
                    trimLeft: () => string;
                    trimRight: () => string;
                    matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                    [Symbol.iterator]: () => StringIterator<string>;
                    at: (index: number) => string | undefined;
                } | null | undefined;
                hide?: boolean | undefined;
                draggable?: boolean | undefined;
                snapOnRelease?: boolean | undefined;
                dragSize?: ("auto" | number) | undefined;
                lockClass?: string | undefined;
                dragClass?: string | undefined;
                scrollbarDisabledClass?: string | undefined;
                horizontalClass?: string | undefined;
                verticalClass?: string | undefined;
            } | undefined;
            thumbs?: {
                swiper?: string | any | null | undefined;
                slideThumbActiveClass?: string | undefined;
                thumbsContainerClass?: string | undefined;
                multipleActiveThumbs?: boolean | undefined;
                autoScrollOffset?: number | undefined;
            } | undefined;
            virtual?: boolean | {
                enabled?: boolean | undefined;
                slides?: any[] | undefined;
                cache?: boolean | undefined;
                addSlidesBefore?: number | undefined;
                addSlidesAfter?: number | undefined;
                renderSlide?: ((slide: any, index: any) => any | null) | undefined;
                renderExternal?: ((data: import('swiper/types').VirtualData<any>) => any | null) | undefined;
                renderExternalUpdate?: boolean | undefined;
            } | undefined;
            zoom?: boolean | {
                limitToOriginalSize?: boolean | undefined;
                maxRatio?: number | undefined;
                minRatio?: number | undefined;
                toggle?: boolean | undefined;
                containerClass?: string | undefined;
                zoomedSlideClass?: string | undefined;
            } | undefined;
            freeMode?: boolean | {
                enabled?: boolean | undefined;
                momentum?: boolean | undefined;
                momentumRatio?: number | undefined;
                momentumVelocityRatio?: number | undefined;
                momentumBounce?: boolean | undefined;
                momentumBounceRatio?: number | undefined;
                minimumVelocity?: number | undefined;
                sticky?: boolean | undefined;
            } | undefined;
            grid?: {
                rows?: number | undefined;
                fill?: ("row" | "column") | undefined;
            } | undefined;
            _emitClasses?: boolean | undefined;
        };
        originalParams: {
            modules?: import('swiper/types').SwiperModule[] | undefined;
            injectStyles?: string[] | undefined;
            injectStylesUrls?: string[] | undefined;
            init?: boolean | undefined;
            enabled?: boolean | undefined;
            updateOnWindowResize?: boolean | undefined;
            resizeObserver?: boolean | undefined;
            initialSlide?: number | undefined;
            direction?: ("horizontal" | "vertical") | undefined;
            oneWayMovement?: boolean | undefined;
            swiperElementNodeName?: string | undefined;
            speed?: number | undefined;
            setWrapperSize?: boolean | undefined;
            virtualTranslate?: boolean | undefined;
            width?: (number | null) | undefined;
            height?: (number | null) | undefined;
            autoHeight?: boolean | undefined;
            roundLengths?: boolean | undefined;
            nested?: boolean | undefined;
            createElements?: boolean | undefined;
            eventsPrefix?: string | undefined;
            focusableElements?: string | undefined;
            uniqueNavElements?: boolean | undefined;
            effect?: ("slide" | "fade" | "cube" | "coverflow" | "flip" | "creative" | "cards" | string) | undefined;
            runCallbacksOnInit?: boolean | undefined;
            watchOverflow?: boolean | undefined;
            userAgent?: (string | null) | undefined;
            url?: (string | null) | undefined;
            on?: {
                init?: ((swiper: import('swiper/types').Swiper) => any) | undefined;
                beforeDestroy?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                slidesUpdated?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                slideChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                slideChangeTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                slideChangeTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                slideNextTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                slideNextTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                slidePrevTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                slidePrevTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                transitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                transitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                touchStart?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                touchMove?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                touchMoveOpposite?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                sliderMove?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                touchEnd?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                click?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                tap?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                doubleTap?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                progress?: ((swiper: import('swiper/types').Swiper, progress: number) => void) | undefined;
                reachBeginning?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                reachEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                toEdge?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                fromEdge?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                setTranslate?: ((swiper: import('swiper/types').Swiper, translate: number) => void) | undefined;
                setTransition?: ((swiper: import('swiper/types').Swiper, transition: number) => void) | undefined;
                resize?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                observerUpdate?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                beforeLoopFix?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                loopFix?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                breakpoint?: ((swiper: import('swiper/types').Swiper, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                _beforeBreakpoint?: ((swiper: import('swiper/types').Swiper, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                _containerClasses?: ((swiper: import('swiper/types').Swiper, classNames: string) => void) | undefined;
                _slideClass?: ((swiper: import('swiper/types').Swiper, slideEl: HTMLElement, classNames: string) => void) | undefined;
                _slideClasses?: ((swiper: import('swiper/types').Swiper, slides: {
                    slideEl: HTMLElement;
                    classNames: string;
                    index: number;
                }[]) => void) | undefined;
                _swiper?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                _freeModeNoMomentumRelease?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                activeIndexChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                snapIndexChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                realIndexChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                afterInit?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                beforeInit?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                beforeResize?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                beforeSlideChangeStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                beforeTransitionStart?: ((swiper: import('swiper/types').Swiper, speed: number, internal: any) => void) | undefined;
                changeDirection?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                doubleClick?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                destroy?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                momentumBounce?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                orientationchange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                slideResetTransitionStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                slideResetTransitionEnd?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                sliderFirstMove?: ((swiper: import('swiper/types').Swiper, event: TouchEvent) => void) | undefined;
                slidesLengthChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                slidesGridLengthChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                snapGridLengthChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                update?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                lock?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                unlock?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                autoplayStart?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                autoplayStop?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                autoplayPause?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                autoplayResume?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                autoplayTimeLeft?: ((swiper: import('swiper/types').Swiper, timeLeft: number, percentage: number) => void) | undefined;
                autoplay?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                hashChange?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                hashSet?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                keyPress?: ((swiper: import('swiper/types').Swiper, keyCode: string) => void) | undefined;
                scroll?: ((swiper: import('swiper/types').Swiper, event: WheelEvent) => void) | undefined;
                navigationHide?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                navigationShow?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                navigationPrev?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                navigationNext?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                paginationRender?: ((swiper: import('swiper/types').Swiper, paginationEl: HTMLElement) => void) | undefined;
                paginationUpdate?: ((swiper: import('swiper/types').Swiper, paginationEl: HTMLElement) => void) | undefined;
                paginationHide?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                paginationShow?: ((swiper: import('swiper/types').Swiper) => void) | undefined;
                scrollbarDragStart?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                scrollbarDragMove?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                scrollbarDragEnd?: ((swiper: import('swiper/types').Swiper, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                zoomChange?: ((swiper: import('swiper/types').Swiper, scale: number, imageEl: HTMLElement, slideEl: HTMLElement) => void) | undefined;
            } | undefined;
            onAny?: ((handler: (eventName: string, ...args: any[]) => void) => void) | undefined;
            cssMode?: boolean | undefined;
            spaceBetween?: (number | string) | undefined;
            slidesPerView?: (number | "auto") | undefined;
            maxBackfaceHiddenSlides?: number | undefined;
            slidesPerGroup?: number | undefined;
            slidesPerGroupSkip?: number | undefined;
            slidesPerGroupAuto?: boolean | undefined;
            centeredSlides?: boolean | undefined;
            centeredSlidesBounds?: boolean | undefined;
            slidesOffsetBefore?: number | undefined;
            slidesOffsetAfter?: number | undefined;
            normalizeSlideIndex?: boolean | undefined;
            centerInsufficientSlides?: boolean | undefined;
            grabCursor?: boolean | undefined;
            touchEventsTarget?: ("container" | "wrapper") | undefined;
            touchRatio?: number | undefined;
            touchAngle?: number | undefined;
            simulateTouch?: boolean | undefined;
            shortSwipes?: boolean | undefined;
            longSwipes?: boolean | undefined;
            longSwipesRatio?: number | undefined;
            longSwipesMs?: number | undefined;
            followFinger?: boolean | undefined;
            allowTouchMove?: boolean | undefined;
            threshold?: number | undefined;
            touchStartPreventDefault?: boolean | undefined;
            touchStartForcePreventDefault?: boolean | undefined;
            touchMoveStopPropagation?: boolean | undefined;
            edgeSwipeDetection?: (boolean | string) | undefined;
            edgeSwipeThreshold?: number | undefined;
            touchReleaseOnEdges?: boolean | undefined;
            passiveListeners?: boolean | undefined;
            resistance?: boolean | undefined;
            resistanceRatio?: number | undefined;
            preventInteractionOnTransition?: boolean | undefined;
            allowSlidePrev?: boolean | undefined;
            allowSlideNext?: boolean | undefined;
            noSwiping?: boolean | undefined;
            noSwipingClass?: string | undefined;
            noSwipingSelector?: string | undefined;
            swipeHandler?: HTMLElement | {
                readonly [x: number]: string;
                toString: () => string;
                charAt: (pos: number) => string;
                charCodeAt: (index: number) => number;
                concat: (...strings: string[]) => string;
                indexOf: (searchString: string, position?: number) => number;
                lastIndexOf: (searchString: string, position?: number) => number;
                localeCompare: {
                    (that: string): number;
                    (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                    (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                };
                match: {
                    (regexp: string | RegExp): RegExpMatchArray | null;
                    (matcher: {
                        [Symbol.match](string: string): RegExpMatchArray | null;
                    }): RegExpMatchArray | null;
                };
                replace: {
                    (searchValue: string | RegExp, replaceValue: string): string;
                    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                    (searchValue: {
                        [Symbol.replace](string: string, replaceValue: string): string;
                    }, replaceValue: string): string;
                    (searchValue: {
                        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                    }, replacer: (substring: string, ...args: any[]) => string): string;
                };
                search: {
                    (regexp: string | RegExp): number;
                    (searcher: {
                        [Symbol.search](string: string): number;
                    }): number;
                };
                slice: (start?: number, end?: number) => string;
                split: {
                    (separator: string | RegExp, limit?: number): string[];
                    (splitter: {
                        [Symbol.split](string: string, limit?: number): string[];
                    }, limit?: number): string[];
                };
                substring: (start: number, end?: number) => string;
                toLowerCase: () => string;
                toLocaleLowerCase: {
                    (locales?: string | string[]): string;
                    (locales?: Intl.LocalesArgument): string;
                };
                toUpperCase: () => string;
                toLocaleUpperCase: {
                    (locales?: string | string[]): string;
                    (locales?: Intl.LocalesArgument): string;
                };
                trim: () => string;
                readonly length: number;
                substr: (from: number, length?: number) => string;
                valueOf: () => string;
                codePointAt: (pos: number) => number | undefined;
                includes: (searchString: string, position?: number) => boolean;
                endsWith: (searchString: string, endPosition?: number) => boolean;
                normalize: {
                    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                    (form?: string): string;
                };
                repeat: (count: number) => string;
                startsWith: (searchString: string, position?: number) => boolean;
                anchor: (name: string) => string;
                big: () => string;
                blink: () => string;
                bold: () => string;
                fixed: () => string;
                fontcolor: (color: string) => string;
                fontsize: {
                    (size: number): string;
                    (size: string): string;
                };
                italics: () => string;
                link: (url: string) => string;
                small: () => string;
                strike: () => string;
                sub: () => string;
                sup: () => string;
                padStart: (maxLength: number, fillString?: string) => string;
                padEnd: (maxLength: number, fillString?: string) => string;
                trimEnd: () => string;
                trimStart: () => string;
                trimLeft: () => string;
                trimRight: () => string;
                matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                [Symbol.iterator]: () => StringIterator<string>;
                at: (index: number) => string | undefined;
            } | null | undefined;
            preventClicks?: boolean | undefined;
            preventClicksPropagation?: boolean | undefined;
            slideToClickedSlide?: boolean | undefined;
            watchSlidesProgress?: boolean | undefined;
            loop?: boolean | undefined;
            loopAddBlankSlides?: boolean | undefined;
            loopAdditionalSlides?: number | undefined;
            loopPreventsSliding?: boolean | undefined;
            rewind?: boolean | undefined;
            breakpoints?: {
                [width: number]: import('swiper/types').SwiperOptions;
                [ratio: string]: import('swiper/types').SwiperOptions;
            } | undefined;
            breakpointsBase?: ("window" | "container") | undefined;
            observer?: boolean | undefined;
            observeSlideChildren?: boolean | undefined;
            observeParents?: boolean | undefined;
            containerModifierClass?: string | undefined;
            slideClass?: string | undefined;
            slideActiveClass?: string | undefined;
            slideVisibleClass?: string | undefined;
            slideFullyVisibleClass?: string | undefined;
            slideBlankClass?: string | undefined;
            slideNextClass?: string | undefined;
            slidePrevClass?: string | undefined;
            wrapperClass?: string | undefined;
            lazyPreloaderClass?: string | undefined;
            lazyPreloadPrevNext?: number | undefined;
            a11y?: {
                enabled?: boolean | undefined;
                prevSlideMessage?: string | undefined;
                nextSlideMessage?: string | undefined;
                firstSlideMessage?: string | undefined;
                lastSlideMessage?: string | undefined;
                paginationBulletMessage?: string | undefined;
                notificationClass?: string | undefined;
                containerMessage?: (string | null) | undefined;
                containerRoleDescriptionMessage?: (string | null) | undefined;
                containerRole?: (string | null) | undefined;
                itemRoleDescriptionMessage?: (string | null) | undefined;
                slideLabelMessage?: string | undefined;
                slideRole?: string | undefined;
                id?: (string | number | null) | undefined;
                scrollOnFocus?: boolean | undefined;
            } | undefined;
            autoplay?: boolean | {
                delay?: number | undefined;
                stopOnLastSlide?: boolean | undefined;
                disableOnInteraction?: boolean | undefined;
                reverseDirection?: boolean | undefined;
                waitForTransition?: boolean | undefined;
                pauseOnMouseEnter?: boolean | undefined;
            } | undefined;
            controller?: {
                control?: string | HTMLElement | any | any[] | null | undefined;
                inverse?: boolean | undefined;
                by?: ("slide" | "container") | undefined;
            } | undefined;
            coverflowEffect?: {
                slideShadows?: boolean | undefined;
                rotate?: number | undefined;
                stretch?: number | undefined;
                depth?: number | undefined;
                scale?: number | undefined;
                modifier?: number | undefined;
            } | undefined;
            cubeEffect?: {
                slideShadows?: boolean | undefined;
                shadow?: boolean | undefined;
                shadowOffset?: number | undefined;
                shadowScale?: number | undefined;
            } | undefined;
            fadeEffect?: {
                crossFade?: boolean | undefined;
            } | undefined;
            flipEffect?: {
                slideShadows?: boolean | undefined;
                limitRotation?: boolean | undefined;
            } | undefined;
            creativeEffect?: {
                prev?: {
                    translate?: (string | number)[] | undefined;
                    rotate?: number[] | undefined;
                    opacity?: number | undefined;
                    scale?: number | undefined;
                    shadow?: boolean | undefined;
                    origin?: string | undefined;
                } | undefined;
                next?: {
                    translate?: (string | number)[] | undefined;
                    rotate?: number[] | undefined;
                    opacity?: number | undefined;
                    scale?: number | undefined;
                    shadow?: boolean | undefined;
                    origin?: string | undefined;
                } | undefined;
                limitProgress?: number | undefined;
                shadowPerProgress?: boolean | undefined;
                progressMultiplier?: number | undefined;
                perspective?: boolean | undefined;
            } | undefined;
            cardsEffect?: {
                slideShadows?: boolean | undefined;
                rotate?: boolean | undefined;
                perSlideRotate?: number | undefined;
                perSlideOffset?: number | undefined;
            } | undefined;
            hashNavigation?: boolean | {
                watchState?: boolean | undefined;
                replaceState?: boolean | undefined;
                getSlideIndex?: ((swiper: import('swiper/types').Swiper, hash: string) => number) | undefined;
            } | undefined;
            history?: boolean | {
                enabled?: boolean | undefined;
                root?: string | undefined;
                replaceState?: boolean | undefined;
                key?: string | undefined;
                keepQuery?: boolean | undefined;
            } | undefined;
            keyboard?: boolean | {
                enabled?: boolean | undefined;
                onlyInViewport?: boolean | undefined;
                pageUpDown?: boolean | undefined;
            } | undefined;
            mousewheel?: boolean | {
                enabled?: boolean | undefined;
                forceToAxis?: boolean | undefined;
                releaseOnEdges?: boolean | undefined;
                invert?: boolean | undefined;
                sensitivity?: number | undefined;
                eventsTarget?: HTMLElement | "container" | "wrapper" | {
                    readonly [x: number]: string;
                    toString: () => string;
                    charAt: (pos: number) => string;
                    charCodeAt: (index: number) => number;
                    concat: (...strings: string[]) => string;
                    indexOf: (searchString: string, position?: number) => number;
                    lastIndexOf: (searchString: string, position?: number) => number;
                    localeCompare: {
                        (that: string): number;
                        (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                        (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                    };
                    match: {
                        (regexp: string | RegExp): RegExpMatchArray | null;
                        (matcher: {
                            [Symbol.match](string: string): RegExpMatchArray | null;
                        }): RegExpMatchArray | null;
                    };
                    replace: {
                        (searchValue: string | RegExp, replaceValue: string): string;
                        (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replaceValue: string): string;
                        }, replaceValue: string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                        }, replacer: (substring: string, ...args: any[]) => string): string;
                    };
                    search: {
                        (regexp: string | RegExp): number;
                        (searcher: {
                            [Symbol.search](string: string): number;
                        }): number;
                    };
                    slice: (start?: number, end?: number) => string;
                    split: {
                        (separator: string | RegExp, limit?: number): string[];
                        (splitter: {
                            [Symbol.split](string: string, limit?: number): string[];
                        }, limit?: number): string[];
                    };
                    substring: (start: number, end?: number) => string;
                    toLowerCase: () => string;
                    toLocaleLowerCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    toUpperCase: () => string;
                    toLocaleUpperCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    trim: () => string;
                    readonly length: number;
                    substr: (from: number, length?: number) => string;
                    valueOf: () => string;
                    codePointAt: (pos: number) => number | undefined;
                    includes: (searchString: string, position?: number) => boolean;
                    endsWith: (searchString: string, endPosition?: number) => boolean;
                    normalize: {
                        (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                        (form?: string): string;
                    };
                    repeat: (count: number) => string;
                    startsWith: (searchString: string, position?: number) => boolean;
                    anchor: (name: string) => string;
                    big: () => string;
                    blink: () => string;
                    bold: () => string;
                    fixed: () => string;
                    fontcolor: (color: string) => string;
                    fontsize: {
                        (size: number): string;
                        (size: string): string;
                    };
                    italics: () => string;
                    link: (url: string) => string;
                    small: () => string;
                    strike: () => string;
                    sub: () => string;
                    sup: () => string;
                    padStart: (maxLength: number, fillString?: string) => string;
                    padEnd: (maxLength: number, fillString?: string) => string;
                    trimEnd: () => string;
                    trimStart: () => string;
                    trimLeft: () => string;
                    trimRight: () => string;
                    matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                    [Symbol.iterator]: () => StringIterator<string>;
                    at: (index: number) => string | undefined;
                } | undefined;
                thresholdDelta?: (number | null) | undefined;
                thresholdTime?: (number | null) | undefined;
                noMousewheelClass?: string | undefined;
            } | undefined;
            navigation?: boolean | {
                enabled?: boolean | undefined;
                nextEl?: HTMLElement | {
                    readonly [x: number]: string;
                    toString: () => string;
                    charAt: (pos: number) => string;
                    charCodeAt: (index: number) => number;
                    concat: (...strings: string[]) => string;
                    indexOf: (searchString: string, position?: number) => number;
                    lastIndexOf: (searchString: string, position?: number) => number;
                    localeCompare: {
                        (that: string): number;
                        (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                        (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                    };
                    match: {
                        (regexp: string | RegExp): RegExpMatchArray | null;
                        (matcher: {
                            [Symbol.match](string: string): RegExpMatchArray | null;
                        }): RegExpMatchArray | null;
                    };
                    replace: {
                        (searchValue: string | RegExp, replaceValue: string): string;
                        (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replaceValue: string): string;
                        }, replaceValue: string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                        }, replacer: (substring: string, ...args: any[]) => string): string;
                    };
                    search: {
                        (regexp: string | RegExp): number;
                        (searcher: {
                            [Symbol.search](string: string): number;
                        }): number;
                    };
                    slice: (start?: number, end?: number) => string;
                    split: {
                        (separator: string | RegExp, limit?: number): string[];
                        (splitter: {
                            [Symbol.split](string: string, limit?: number): string[];
                        }, limit?: number): string[];
                    };
                    substring: (start: number, end?: number) => string;
                    toLowerCase: () => string;
                    toLocaleLowerCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    toUpperCase: () => string;
                    toLocaleUpperCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    trim: () => string;
                    readonly length: number;
                    substr: (from: number, length?: number) => string;
                    valueOf: () => string;
                    codePointAt: (pos: number) => number | undefined;
                    includes: (searchString: string, position?: number) => boolean;
                    endsWith: (searchString: string, endPosition?: number) => boolean;
                    normalize: {
                        (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                        (form?: string): string;
                    };
                    repeat: (count: number) => string;
                    startsWith: (searchString: string, position?: number) => boolean;
                    anchor: (name: string) => string;
                    big: () => string;
                    blink: () => string;
                    bold: () => string;
                    fixed: () => string;
                    fontcolor: (color: string) => string;
                    fontsize: {
                        (size: number): string;
                        (size: string): string;
                    };
                    italics: () => string;
                    link: (url: string) => string;
                    small: () => string;
                    strike: () => string;
                    sub: () => string;
                    sup: () => string;
                    padStart: (maxLength: number, fillString?: string) => string;
                    padEnd: (maxLength: number, fillString?: string) => string;
                    trimEnd: () => string;
                    trimStart: () => string;
                    trimLeft: () => string;
                    trimRight: () => string;
                    matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                    [Symbol.iterator]: () => StringIterator<string>;
                    at: (index: number) => string | undefined;
                } | null | undefined;
                prevEl?: HTMLElement | {
                    readonly [x: number]: string;
                    toString: () => string;
                    charAt: (pos: number) => string;
                    charCodeAt: (index: number) => number;
                    concat: (...strings: string[]) => string;
                    indexOf: (searchString: string, position?: number) => number;
                    lastIndexOf: (searchString: string, position?: number) => number;
                    localeCompare: {
                        (that: string): number;
                        (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                        (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                    };
                    match: {
                        (regexp: string | RegExp): RegExpMatchArray | null;
                        (matcher: {
                            [Symbol.match](string: string): RegExpMatchArray | null;
                        }): RegExpMatchArray | null;
                    };
                    replace: {
                        (searchValue: string | RegExp, replaceValue: string): string;
                        (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replaceValue: string): string;
                        }, replaceValue: string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                        }, replacer: (substring: string, ...args: any[]) => string): string;
                    };
                    search: {
                        (regexp: string | RegExp): number;
                        (searcher: {
                            [Symbol.search](string: string): number;
                        }): number;
                    };
                    slice: (start?: number, end?: number) => string;
                    split: {
                        (separator: string | RegExp, limit?: number): string[];
                        (splitter: {
                            [Symbol.split](string: string, limit?: number): string[];
                        }, limit?: number): string[];
                    };
                    substring: (start: number, end?: number) => string;
                    toLowerCase: () => string;
                    toLocaleLowerCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    toUpperCase: () => string;
                    toLocaleUpperCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    trim: () => string;
                    readonly length: number;
                    substr: (from: number, length?: number) => string;
                    valueOf: () => string;
                    codePointAt: (pos: number) => number | undefined;
                    includes: (searchString: string, position?: number) => boolean;
                    endsWith: (searchString: string, endPosition?: number) => boolean;
                    normalize: {
                        (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                        (form?: string): string;
                    };
                    repeat: (count: number) => string;
                    startsWith: (searchString: string, position?: number) => boolean;
                    anchor: (name: string) => string;
                    big: () => string;
                    blink: () => string;
                    bold: () => string;
                    fixed: () => string;
                    fontcolor: (color: string) => string;
                    fontsize: {
                        (size: number): string;
                        (size: string): string;
                    };
                    italics: () => string;
                    link: (url: string) => string;
                    small: () => string;
                    strike: () => string;
                    sub: () => string;
                    sup: () => string;
                    padStart: (maxLength: number, fillString?: string) => string;
                    padEnd: (maxLength: number, fillString?: string) => string;
                    trimEnd: () => string;
                    trimStart: () => string;
                    trimLeft: () => string;
                    trimRight: () => string;
                    matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                    [Symbol.iterator]: () => StringIterator<string>;
                    at: (index: number) => string | undefined;
                } | null | undefined;
                hideOnClick?: boolean | undefined;
                disabledClass?: string | undefined;
                hiddenClass?: string | undefined;
                lockClass?: string | undefined;
                navigationDisabledClass?: string | undefined;
            } | undefined;
            pagination?: boolean | {
                enabled?: boolean | undefined;
                el?: HTMLElement | {
                    readonly [x: number]: string;
                    toString: () => string;
                    charAt: (pos: number) => string;
                    charCodeAt: (index: number) => number;
                    concat: (...strings: string[]) => string;
                    indexOf: (searchString: string, position?: number) => number;
                    lastIndexOf: (searchString: string, position?: number) => number;
                    localeCompare: {
                        (that: string): number;
                        (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                        (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                    };
                    match: {
                        (regexp: string | RegExp): RegExpMatchArray | null;
                        (matcher: {
                            [Symbol.match](string: string): RegExpMatchArray | null;
                        }): RegExpMatchArray | null;
                    };
                    replace: {
                        (searchValue: string | RegExp, replaceValue: string): string;
                        (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replaceValue: string): string;
                        }, replaceValue: string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                        }, replacer: (substring: string, ...args: any[]) => string): string;
                    };
                    search: {
                        (regexp: string | RegExp): number;
                        (searcher: {
                            [Symbol.search](string: string): number;
                        }): number;
                    };
                    slice: (start?: number, end?: number) => string;
                    split: {
                        (separator: string | RegExp, limit?: number): string[];
                        (splitter: {
                            [Symbol.split](string: string, limit?: number): string[];
                        }, limit?: number): string[];
                    };
                    substring: (start: number, end?: number) => string;
                    toLowerCase: () => string;
                    toLocaleLowerCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    toUpperCase: () => string;
                    toLocaleUpperCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    trim: () => string;
                    readonly length: number;
                    substr: (from: number, length?: number) => string;
                    valueOf: () => string;
                    codePointAt: (pos: number) => number | undefined;
                    includes: (searchString: string, position?: number) => boolean;
                    endsWith: (searchString: string, endPosition?: number) => boolean;
                    normalize: {
                        (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                        (form?: string): string;
                    };
                    repeat: (count: number) => string;
                    startsWith: (searchString: string, position?: number) => boolean;
                    anchor: (name: string) => string;
                    big: () => string;
                    blink: () => string;
                    bold: () => string;
                    fixed: () => string;
                    fontcolor: (color: string) => string;
                    fontsize: {
                        (size: number): string;
                        (size: string): string;
                    };
                    italics: () => string;
                    link: (url: string) => string;
                    small: () => string;
                    strike: () => string;
                    sub: () => string;
                    sup: () => string;
                    padStart: (maxLength: number, fillString?: string) => string;
                    padEnd: (maxLength: number, fillString?: string) => string;
                    trimEnd: () => string;
                    trimStart: () => string;
                    trimLeft: () => string;
                    trimRight: () => string;
                    matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                    [Symbol.iterator]: () => StringIterator<string>;
                    at: (index: number) => string | undefined;
                } | null | undefined;
                type?: ("bullets" | "fraction" | "progressbar" | "custom") | undefined;
                bulletElement?: string | undefined;
                dynamicBullets?: boolean | undefined;
                dynamicMainBullets?: number | undefined;
                hideOnClick?: boolean | undefined;
                clickable?: boolean | undefined;
                progressbarOpposite?: boolean | undefined;
                formatFractionCurrent?: ((number: number) => number | string) | undefined;
                formatFractionTotal?: ((number: number) => number | string) | undefined;
                renderBullet?: ((index: number, className: string) => string) | undefined;
                renderFraction?: ((currentClass: string, totalClass: string) => string) | undefined;
                renderProgressbar?: ((progressbarFillClass: string) => string) | undefined;
                renderCustom?: ((swiper: import('swiper/types').Swiper, current: number, total: number) => string) | undefined;
                bulletClass?: string | undefined;
                bulletActiveClass?: string | undefined;
                modifierClass?: string | undefined;
                currentClass?: string | undefined;
                totalClass?: string | undefined;
                hiddenClass?: string | undefined;
                progressbarFillClass?: string | undefined;
                progressbarOppositeClass?: string | undefined;
                clickableClass?: string | undefined;
                lockClass?: string | undefined;
                horizontalClass?: string | undefined;
                verticalClass?: string | undefined;
                paginationDisabledClass?: string | undefined;
            } | undefined;
            parallax?: boolean | {
                enabled?: boolean | undefined;
            } | undefined;
            scrollbar?: boolean | {
                enabled?: boolean | undefined;
                el?: HTMLElement | {
                    readonly [x: number]: string;
                    toString: () => string;
                    charAt: (pos: number) => string;
                    charCodeAt: (index: number) => number;
                    concat: (...strings: string[]) => string;
                    indexOf: (searchString: string, position?: number) => number;
                    lastIndexOf: (searchString: string, position?: number) => number;
                    localeCompare: {
                        (that: string): number;
                        (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                        (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                    };
                    match: {
                        (regexp: string | RegExp): RegExpMatchArray | null;
                        (matcher: {
                            [Symbol.match](string: string): RegExpMatchArray | null;
                        }): RegExpMatchArray | null;
                    };
                    replace: {
                        (searchValue: string | RegExp, replaceValue: string): string;
                        (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replaceValue: string): string;
                        }, replaceValue: string): string;
                        (searchValue: {
                            [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                        }, replacer: (substring: string, ...args: any[]) => string): string;
                    };
                    search: {
                        (regexp: string | RegExp): number;
                        (searcher: {
                            [Symbol.search](string: string): number;
                        }): number;
                    };
                    slice: (start?: number, end?: number) => string;
                    split: {
                        (separator: string | RegExp, limit?: number): string[];
                        (splitter: {
                            [Symbol.split](string: string, limit?: number): string[];
                        }, limit?: number): string[];
                    };
                    substring: (start: number, end?: number) => string;
                    toLowerCase: () => string;
                    toLocaleLowerCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    toUpperCase: () => string;
                    toLocaleUpperCase: {
                        (locales?: string | string[]): string;
                        (locales?: Intl.LocalesArgument): string;
                    };
                    trim: () => string;
                    readonly length: number;
                    substr: (from: number, length?: number) => string;
                    valueOf: () => string;
                    codePointAt: (pos: number) => number | undefined;
                    includes: (searchString: string, position?: number) => boolean;
                    endsWith: (searchString: string, endPosition?: number) => boolean;
                    normalize: {
                        (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                        (form?: string): string;
                    };
                    repeat: (count: number) => string;
                    startsWith: (searchString: string, position?: number) => boolean;
                    anchor: (name: string) => string;
                    big: () => string;
                    blink: () => string;
                    bold: () => string;
                    fixed: () => string;
                    fontcolor: (color: string) => string;
                    fontsize: {
                        (size: number): string;
                        (size: string): string;
                    };
                    italics: () => string;
                    link: (url: string) => string;
                    small: () => string;
                    strike: () => string;
                    sub: () => string;
                    sup: () => string;
                    padStart: (maxLength: number, fillString?: string) => string;
                    padEnd: (maxLength: number, fillString?: string) => string;
                    trimEnd: () => string;
                    trimStart: () => string;
                    trimLeft: () => string;
                    trimRight: () => string;
                    matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                    [Symbol.iterator]: () => StringIterator<string>;
                    at: (index: number) => string | undefined;
                } | null | undefined;
                hide?: boolean | undefined;
                draggable?: boolean | undefined;
                snapOnRelease?: boolean | undefined;
                dragSize?: ("auto" | number) | undefined;
                lockClass?: string | undefined;
                dragClass?: string | undefined;
                scrollbarDisabledClass?: string | undefined;
                horizontalClass?: string | undefined;
                verticalClass?: string | undefined;
            } | undefined;
            thumbs?: {
                swiper?: string | any | null | undefined;
                slideThumbActiveClass?: string | undefined;
                thumbsContainerClass?: string | undefined;
                multipleActiveThumbs?: boolean | undefined;
                autoScrollOffset?: number | undefined;
            } | undefined;
            virtual?: boolean | {
                enabled?: boolean | undefined;
                slides?: any[] | undefined;
                cache?: boolean | undefined;
                addSlidesBefore?: number | undefined;
                addSlidesAfter?: number | undefined;
                renderSlide?: ((slide: any, index: any) => any | null) | undefined;
                renderExternal?: ((data: import('swiper/types').VirtualData<any>) => any | null) | undefined;
                renderExternalUpdate?: boolean | undefined;
            } | undefined;
            zoom?: boolean | {
                limitToOriginalSize?: boolean | undefined;
                maxRatio?: number | undefined;
                minRatio?: number | undefined;
                toggle?: boolean | undefined;
                containerClass?: string | undefined;
                zoomedSlideClass?: string | undefined;
            } | undefined;
            freeMode?: boolean | {
                enabled?: boolean | undefined;
                momentum?: boolean | undefined;
                momentumRatio?: number | undefined;
                momentumVelocityRatio?: number | undefined;
                momentumBounce?: boolean | undefined;
                momentumBounceRatio?: number | undefined;
                minimumVelocity?: number | undefined;
                sticky?: boolean | undefined;
            } | undefined;
            grid?: {
                rows?: number | undefined;
                fill?: ("row" | "column") | undefined;
            } | undefined;
            _emitClasses?: boolean | undefined;
        };
        el: HTMLElement;
        wrapperEl: HTMLElement;
        slidesEl: HTMLElement;
        slides: HTMLElement[];
        loopedSlides: number | null;
        width: number;
        height: number;
        translate: number;
        progress: number;
        activeIndex: number;
        realIndex: number;
        previousIndex: number;
        snapIndex: number;
        snapGrid: number[];
        slidesGrid: number[];
        slidesSizesGrid: number[];
        isBeginning: boolean;
        isEnd: boolean;
        isLocked: boolean;
        animating: boolean;
        touches: {
            startX: number;
            startY: number;
            currentX: number;
            currentY: number;
            diff: number;
        };
        clickedIndex: number;
        clickedSlide: HTMLElement;
        allowSlideNext: boolean;
        allowSlidePrev: boolean;
        allowTouchMove: boolean;
        swipeDirection: "prev" | "next";
        rtlTranslate: boolean;
        disable: () => void;
        enable: () => void;
        setProgress: (progress: number, speed?: number) => void;
        slideNext: (speed?: number, runCallbacks?: boolean) => boolean;
        slidePrev: (speed?: number, runCallbacks?: boolean) => boolean;
        slideTo: (index: number, speed?: number, runCallbacks?: boolean) => boolean;
        slideToLoop: (index: number, speed?: number, runCallbacks?: boolean) => import('swiper/types').Swiper;
        slideReset: (speed?: number, runCallbacks?: boolean) => boolean;
        slideToClosest: (speed?: number, runCallbacks?: boolean) => boolean;
        slidesPerViewDynamic: () => number;
        updateAutoHeight: (speed?: number) => void;
        update: () => void;
        updateSize: () => void;
        updateSlides: () => void;
        updateProgress: () => void;
        updateSlidesClasses: () => void;
        changeDirection: (direction?: "horizontal" | "vertical", needUpdate?: boolean) => void;
        changeLanguageDirection: (direction: "rtl" | "ltr") => void;
        detachEvents: () => void;
        attachEvents: () => void;
        loopCreate: () => void;
        loopDestroy: () => void;
        init: (el?: HTMLElement) => import('swiper/types').Swiper;
        destroy: (deleteInstance?: boolean, cleanStyles?: boolean) => void;
        setTranslate: (translate: any) => void;
        getTranslate: () => any;
        translateTo: (translate: number, speed: number, runCallbacks?: boolean, translateBounds?: boolean) => any;
        minTranslate: () => number;
        maxTranslate: () => number;
        unsetGrabCursor: () => void;
        setGrabCursor: () => void;
        onAny: (handler: (eventName: string, ...args: any[]) => void) => void;
        offAny: (handler: (eventName: string, ...args: any[]) => void) => void;
        isHorizontal: () => boolean;
        getBreakpoint: (breakpoints: import('swiper/types').SwiperOptions["breakpoints"]) => string;
        setBreakpoint: () => void;
        currentBreakpoint: any;
        destroyed: boolean;
        modules: Array<import('swiper/types').SwiperModule>;
        a11y: import('swiper/types').A11yMethods;
        autoplay: {
            running: boolean;
            paused: boolean;
            timeLeft: number;
            pause: () => void;
            resume: () => void;
            start: () => boolean;
            stop: () => boolean;
        };
        controller: {
            control?: any | any[] | undefined;
        };
        coverflowEffect: import('swiper/types').CoverflowEffectMethods;
        cubeEffect: import('swiper/types').CubeEffectMethods;
        fadeEffect: import('swiper/types').FadeEffectMethods;
        flipEffect: import('swiper/types').FlipEffectMethods;
        creativeEffect: import('swiper/types').CreativeEffectMethods;
        cardsEffect: import('swiper/types').CardsEffectMethods;
        hashNavigation: import('swiper/types').HashNavigationMethods;
        history: import('swiper/types').HistoryMethods;
        keyboard: {
            enabled: boolean;
            enable: () => void;
            disable: () => void;
        };
        mousewheel: {
            enabled: boolean;
            enable: () => void;
            disable: () => void;
        };
        navigation: {
            nextEl: HTMLElement;
            prevEl: HTMLElement;
            update: () => void;
            init: () => void;
            destroy: () => void;
        };
        pagination: {
            el: HTMLElement;
            bullets: HTMLElement[];
            render: () => void;
            update: () => void;
            init: () => void;
            destroy: () => void;
        };
        parallax: import('swiper/types').ParallaxMethods;
        scrollbar: {
            el: HTMLElement;
            dragEl: HTMLElement;
            updateSize: () => void;
            setTranslate: () => void;
            init: () => void;
            destroy: () => void;
        };
        thumbs: {
            swiper: any;
            update: (initial: boolean) => void;
            init: () => boolean;
        };
        virtual: {
            cache: object;
            from: number;
            to: number;
            slides: any[];
            appendSlide: (slide: HTMLElement | string | HTMLElement[] | string[]) => void;
            prependSlide: (slide: HTMLElement | string | HTMLElement[] | string[]) => void;
            removeSlide: (slideIndexes: number[]) => void;
            removeAllSlides: () => void;
            update: (force: boolean) => void;
        };
        zoom: {
            enabled: boolean;
            scale: number;
            enable: () => void;
            disable: () => void;
            in: (ratio?: number) => void;
            out: () => void;
            toggle: (event?: MouseEvent | TouchEvent | PointerEvent) => void;
        };
        freeMode: {
            onTouchMove: () => void;
            onTouchEnd: () => void;
        };
        on: <E extends keyof import('swiper/types').SwiperEvents>(event: E, handler: import('swiper/types').SwiperEvents[E]) => void;
        once: <E extends keyof import('swiper/types').SwiperEvents>(event: E, handler: import('swiper/types').SwiperEvents[E]) => void;
        off: {
            <E extends keyof import('swiper/types').SwiperEvents>(event: E, handler: import('swiper/types').SwiperEvents[E]): void;
            <E extends keyof import('swiper/types').SwiperEvents>(event: E): void;
        };
        emit: <E extends keyof import('swiper/types').SwiperEvents>(event: E, ...args: any[]) => void;
        appendSlide: (slides: HTMLElement | string | string[] | HTMLElement[]) => void;
        prependSlide: (slides: HTMLElement | string | string[] | HTMLElement[]) => void;
        addSlide: (index: number, slides: HTMLElement | string | string[] | HTMLElement[]) => void;
        removeSlide: (slideIndex: number | number[]) => void;
        removeAllSlides: () => void;
    } | null>;
}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    "update:activeSlideIdx": (activeSlideIdx: number) => any;
}, string, {
    width: string | number;
    height: string | number;
    direction: "horizontal" | "vertical";
    transitionDelay: number | string;
    initialSlide: number;
    slidesPerView: number;
    mousewheel: boolean;
    navigation: boolean;
    navDirection: "horizontal" | "vertical";
    navAlign: "center" | "start" | "end";
    navSize: string | number;
    navColor: string;
    navDisabledColor: string;
    transitionFun: string;
    transitionSpeed: number;
    swiperOverflow: string;
    enableSlideClick: boolean;
    slideClickHandler: (swiper: import('swiper/types').Swiper) => void;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {
            currentSlideIdx: number;
            activeSlideIdx: number;
        }): any;
        prev?(_: {}): any;
        next?(_: {}): any;
    };
});
export declare const StSwiperRegister: import('vue').Plugin;
export declare const StSwiperSlide: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {}, true, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, {}>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<{}> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {
            isInitial: unknown;
            initialSlideIdx: unknown;
            isSlideChange: unknown;
            enterSlideIdx: unknown;
            leaveSlideIdx: unknown;
            currentSlideIdx: unknown;
        }): any;
    };
});
export declare const StSwiperSlideRegister: import('vue').Plugin;
export declare const StCapturePointerContainer: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{
        width?: string | number;
        height?: string | number;
        captureOnPointerEnter?: boolean;
        captureOnPointerLeave?: boolean;
        captureOnPointerDown?: boolean;
        captureOnPointerUp?: boolean;
        captureOnPointerMove?: boolean;
        captureOnPointerOver?: boolean;
        captureOnPointerOut?: boolean;
    }> & Readonly<{
        onHandlePointerEvent?: ((x: number, y: number, componentRootEl: HTMLDivElement, event: PointerEvent) => any) | undefined;
    }>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {} & {
        handlePointerEvent: (x: number, y: number, componentRootEl: HTMLDivElement, event: PointerEvent) => any;
    }, import('vue').PublicProps, {
        width: string | number;
        height: string | number;
        captureOnPointerEnter: boolean;
        captureOnPointerLeave: boolean;
        captureOnPointerDown: boolean;
        captureOnPointerUp: boolean;
        captureOnPointerMove: boolean;
        captureOnPointerOver: boolean;
        captureOnPointerOut: boolean;
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<{
        width?: string | number;
        height?: string | number;
        captureOnPointerEnter?: boolean;
        captureOnPointerLeave?: boolean;
        captureOnPointerDown?: boolean;
        captureOnPointerUp?: boolean;
        captureOnPointerMove?: boolean;
        captureOnPointerOver?: boolean;
        captureOnPointerOut?: boolean;
    }> & Readonly<{
        onHandlePointerEvent?: ((x: number, y: number, componentRootEl: HTMLDivElement, event: PointerEvent) => any) | undefined;
    }>, {}, {}, {}, {}, {
        width: string | number;
        height: string | number;
        captureOnPointerEnter: boolean;
        captureOnPointerLeave: boolean;
        captureOnPointerDown: boolean;
        captureOnPointerUp: boolean;
        captureOnPointerMove: boolean;
        captureOnPointerOver: boolean;
        captureOnPointerOut: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<{
    width?: string | number;
    height?: string | number;
    captureOnPointerEnter?: boolean;
    captureOnPointerLeave?: boolean;
    captureOnPointerDown?: boolean;
    captureOnPointerUp?: boolean;
    captureOnPointerMove?: boolean;
    captureOnPointerOver?: boolean;
    captureOnPointerOut?: boolean;
}> & Readonly<{
    onHandlePointerEvent?: ((x: number, y: number, componentRootEl: HTMLDivElement, event: PointerEvent) => any) | undefined;
}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {} & {
    handlePointerEvent: (x: number, y: number, componentRootEl: HTMLDivElement, event: PointerEvent) => any;
}, string, {
    width: string | number;
    height: string | number;
    captureOnPointerEnter: boolean;
    captureOnPointerLeave: boolean;
    captureOnPointerDown: boolean;
    captureOnPointerUp: boolean;
    captureOnPointerMove: boolean;
    captureOnPointerOver: boolean;
    captureOnPointerOut: boolean;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
});
export declare const StCapturePointerContainerRegister: import('vue').Plugin;
export declare const StClickWaveContainer: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{
        width?: string | number;
        height?: string | number;
        speed?: number;
        waveColor?: string;
        waveColorRandom?: boolean;
        waveMaxSize?: number | string;
        waveInitialOpacity?: number;
        waveZIndex?: number | string;
        waveOverflowHidden?: boolean;
        click?: boolean;
        enter?: boolean;
        leave?: boolean;
    }> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
        width: string | number;
        height: string | number;
        click: boolean;
        speed: number;
        waveColor: string;
        waveColorRandom: boolean;
        waveMaxSize: number | string;
        waveInitialOpacity: number;
        waveZIndex: number | string;
        waveOverflowHidden: boolean;
        enter: boolean;
        leave: boolean;
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<{
        width?: string | number;
        height?: string | number;
        speed?: number;
        waveColor?: string;
        waveColorRandom?: boolean;
        waveMaxSize?: number | string;
        waveInitialOpacity?: number;
        waveZIndex?: number | string;
        waveOverflowHidden?: boolean;
        click?: boolean;
        enter?: boolean;
        leave?: boolean;
    }> & Readonly<{}>, {}, {}, {}, {}, {
        width: string | number;
        height: string | number;
        click: boolean;
        speed: number;
        waveColor: string;
        waveColorRandom: boolean;
        waveMaxSize: number | string;
        waveInitialOpacity: number;
        waveZIndex: number | string;
        waveOverflowHidden: boolean;
        enter: boolean;
        leave: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<{
    width?: string | number;
    height?: string | number;
    speed?: number;
    waveColor?: string;
    waveColorRandom?: boolean;
    waveMaxSize?: number | string;
    waveInitialOpacity?: number;
    waveZIndex?: number | string;
    waveOverflowHidden?: boolean;
    click?: boolean;
    enter?: boolean;
    leave?: boolean;
}> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
    width: string | number;
    height: string | number;
    click: boolean;
    speed: number;
    waveColor: string;
    waveColorRandom: boolean;
    waveMaxSize: number | string;
    waveInitialOpacity: number;
    waveZIndex: number | string;
    waveOverflowHidden: boolean;
    enter: boolean;
    leave: boolean;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
});
export declare const StClickWaveContainerRegister: import('vue').Plugin;
export declare const StClickRippleContainer: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{
        width?: string | number;
        height?: string | number;
        speed?: number;
        rippleColor?: string;
        rippleColorRandom?: boolean;
        rippleMaxSize?: number | string;
        rippleWidth?: number | string;
        rippleInitialOpacity?: number;
        rippleZIndex?: number | string;
        rippleOverflowHidden?: boolean;
        click?: boolean;
        enter?: boolean;
        leave?: boolean;
    }> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
        width: string | number;
        height: string | number;
        click: boolean;
        speed: number;
        enter: boolean;
        leave: boolean;
        rippleColor: string;
        rippleColorRandom: boolean;
        rippleMaxSize: number | string;
        rippleWidth: number | string;
        rippleInitialOpacity: number;
        rippleZIndex: number | string;
        rippleOverflowHidden: boolean;
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<{
        width?: string | number;
        height?: string | number;
        speed?: number;
        rippleColor?: string;
        rippleColorRandom?: boolean;
        rippleMaxSize?: number | string;
        rippleWidth?: number | string;
        rippleInitialOpacity?: number;
        rippleZIndex?: number | string;
        rippleOverflowHidden?: boolean;
        click?: boolean;
        enter?: boolean;
        leave?: boolean;
    }> & Readonly<{}>, {}, {}, {}, {}, {
        width: string | number;
        height: string | number;
        click: boolean;
        speed: number;
        enter: boolean;
        leave: boolean;
        rippleColor: string;
        rippleColorRandom: boolean;
        rippleMaxSize: number | string;
        rippleWidth: number | string;
        rippleInitialOpacity: number;
        rippleZIndex: number | string;
        rippleOverflowHidden: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<{
    width?: string | number;
    height?: string | number;
    speed?: number;
    rippleColor?: string;
    rippleColorRandom?: boolean;
    rippleMaxSize?: number | string;
    rippleWidth?: number | string;
    rippleInitialOpacity?: number;
    rippleZIndex?: number | string;
    rippleOverflowHidden?: boolean;
    click?: boolean;
    enter?: boolean;
    leave?: boolean;
}> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
    width: string | number;
    height: string | number;
    click: boolean;
    speed: number;
    enter: boolean;
    leave: boolean;
    rippleColor: string;
    rippleColorRandom: boolean;
    rippleMaxSize: number | string;
    rippleWidth: number | string;
    rippleInitialOpacity: number;
    rippleZIndex: number | string;
    rippleOverflowHidden: boolean;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
});
export declare const StClickRippleContainerRegister: import('vue').Plugin;
export declare const St3DText: import('vue').DefineComponent<{
    content: string;
    color?: string;
    fontSize?: number | string;
    lineHeight?: number | string;
    layerCnt?: number;
    layerGap?: number;
    shadow?: boolean;
    shadowSize?: number | string;
    base?: boolean;
    baseWidth?: number | string;
    baseColor?: string;
    baseShadow?: boolean;
    perspective?: number | string;
}, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
    content: string;
    color?: string;
    fontSize?: number | string;
    lineHeight?: number | string;
    layerCnt?: number;
    layerGap?: number;
    shadow?: boolean;
    shadowSize?: number | string;
    base?: boolean;
    baseWidth?: number | string;
    baseColor?: string;
    baseShadow?: boolean;
    perspective?: number | string;
}> & Readonly<{}>, {
    base: boolean;
    color: string;
    fontSize: number | string;
    lineHeight: number | string;
    perspective: number | string;
    shadow: boolean;
    layerCnt: number;
    layerGap: number;
    shadowSize: number | string;
    baseWidth: number | string;
    baseColor: string;
    baseShadow: boolean;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
export declare const St3DTextRegister: import('vue').Plugin;
export declare const StHoverShineContainer: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{
        width?: number | string;
        height?: number | string;
        background?: string;
        contentBackground?: string;
        shineSize?: number | string;
        shineColor?: string;
        speed?: number | string;
        shineBorderWidth?: number | string;
        shineBorderRadius?: number | string;
        shineBlur?: number | string;
    }> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
        width: number | string;
        height: number | string;
        background: string;
        speed: number | string;
        contentBackground: string;
        shineSize: number | string;
        shineColor: string;
        shineBorderWidth: number | string;
        shineBorderRadius: number | string;
        shineBlur: number | string;
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<{
        width?: number | string;
        height?: number | string;
        background?: string;
        contentBackground?: string;
        shineSize?: number | string;
        shineColor?: string;
        speed?: number | string;
        shineBorderWidth?: number | string;
        shineBorderRadius?: number | string;
        shineBlur?: number | string;
    }> & Readonly<{}>, {}, {}, {}, {}, {
        width: number | string;
        height: number | string;
        background: string;
        speed: number | string;
        contentBackground: string;
        shineSize: number | string;
        shineColor: string;
        shineBorderWidth: number | string;
        shineBorderRadius: number | string;
        shineBlur: number | string;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<{
    width?: number | string;
    height?: number | string;
    background?: string;
    contentBackground?: string;
    shineSize?: number | string;
    shineColor?: string;
    speed?: number | string;
    shineBorderWidth?: number | string;
    shineBorderRadius?: number | string;
    shineBlur?: number | string;
}> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
    width: number | string;
    height: number | string;
    background: string;
    speed: number | string;
    contentBackground: string;
    shineSize: number | string;
    shineColor: string;
    shineBorderWidth: number | string;
    shineBorderRadius: number | string;
    shineBlur: number | string;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
});
export declare const StHoverShineContainerRegister: import('vue').Plugin;
export declare const StClickParticleBombContainer: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{
        width?: string | number;
        height?: string | number;
        particleCount?: number;
        particleClass?: string;
        offsetInitial?: number;
        offsetEnd?: number;
        setParticleStyleHandler: (particleEl: HTMLElement, idx: number) => void;
        particleZIndex?: number | string;
        speed?: number;
        clickParticleBomb?: boolean;
        moveParticleBomb?: boolean;
    }> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
        width: string | number;
        height: string | number;
        speed: number;
        particleCount: number;
        particleClass: string;
        offsetInitial: number;
        offsetEnd: number;
        setParticleStyleHandler: (particleEl: HTMLElement, idx: number) => void;
        particleZIndex: number | string;
        clickParticleBomb: boolean;
        moveParticleBomb: boolean;
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<{
        width?: string | number;
        height?: string | number;
        particleCount?: number;
        particleClass?: string;
        offsetInitial?: number;
        offsetEnd?: number;
        setParticleStyleHandler: (particleEl: HTMLElement, idx: number) => void;
        particleZIndex?: number | string;
        speed?: number;
        clickParticleBomb?: boolean;
        moveParticleBomb?: boolean;
    }> & Readonly<{}>, {}, {}, {}, {}, {
        width: string | number;
        height: string | number;
        speed: number;
        particleCount: number;
        particleClass: string;
        offsetInitial: number;
        offsetEnd: number;
        setParticleStyleHandler: (particleEl: HTMLElement, idx: number) => void;
        particleZIndex: number | string;
        clickParticleBomb: boolean;
        moveParticleBomb: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<{
    width?: string | number;
    height?: string | number;
    particleCount?: number;
    particleClass?: string;
    offsetInitial?: number;
    offsetEnd?: number;
    setParticleStyleHandler: (particleEl: HTMLElement, idx: number) => void;
    particleZIndex?: number | string;
    speed?: number;
    clickParticleBomb?: boolean;
    moveParticleBomb?: boolean;
}> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
    width: string | number;
    height: string | number;
    speed: number;
    particleCount: number;
    particleClass: string;
    offsetInitial: number;
    offsetEnd: number;
    setParticleStyleHandler: (particleEl: HTMLElement, idx: number) => void;
    particleZIndex: number | string;
    clickParticleBomb: boolean;
    moveParticleBomb: boolean;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
});
export declare const StClickParticleBombContainerRegister: import('vue').Plugin;
export declare const StClickBubbleParticleContainer: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{
        width?: string | number;
        height?: string | number;
        particleCount?: number;
        particleMaxSize?: number;
        particleMinSize?: number;
        offsetInitial?: number;
        offsetEnd?: number;
        particleColor?: string;
        particleColorRandom?: boolean;
        evenEmpty?: boolean;
        particleZIndex?: number | string;
        speed?: number;
        click?: boolean;
        move?: boolean;
    }> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
        width: string | number;
        height: string | number;
        click: boolean;
        speed: number;
        move: boolean;
        particleCount: number;
        offsetInitial: number;
        offsetEnd: number;
        particleZIndex: number | string;
        particleMaxSize: number;
        particleMinSize: number;
        particleColor: string;
        particleColorRandom: boolean;
        evenEmpty: boolean;
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<{
        width?: string | number;
        height?: string | number;
        particleCount?: number;
        particleMaxSize?: number;
        particleMinSize?: number;
        offsetInitial?: number;
        offsetEnd?: number;
        particleColor?: string;
        particleColorRandom?: boolean;
        evenEmpty?: boolean;
        particleZIndex?: number | string;
        speed?: number;
        click?: boolean;
        move?: boolean;
    }> & Readonly<{}>, {}, {}, {}, {}, {
        width: string | number;
        height: string | number;
        click: boolean;
        speed: number;
        move: boolean;
        particleCount: number;
        offsetInitial: number;
        offsetEnd: number;
        particleZIndex: number | string;
        particleMaxSize: number;
        particleMinSize: number;
        particleColor: string;
        particleColorRandom: boolean;
        evenEmpty: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<{
    width?: string | number;
    height?: string | number;
    particleCount?: number;
    particleMaxSize?: number;
    particleMinSize?: number;
    offsetInitial?: number;
    offsetEnd?: number;
    particleColor?: string;
    particleColorRandom?: boolean;
    evenEmpty?: boolean;
    particleZIndex?: number | string;
    speed?: number;
    click?: boolean;
    move?: boolean;
}> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
    width: string | number;
    height: string | number;
    click: boolean;
    speed: number;
    move: boolean;
    particleCount: number;
    offsetInitial: number;
    offsetEnd: number;
    particleZIndex: number | string;
    particleMaxSize: number;
    particleMinSize: number;
    particleColor: string;
    particleColorRandom: boolean;
    evenEmpty: boolean;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
});
export declare const StClickBubbleParticleContainerRegister: import('vue').Plugin;
export declare const StMoveParticleTailContainer: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{
        width?: string | number;
        height?: string | number;
        particleCount?: number;
        particleClass?: string;
        offsetInitial?: number;
        offsetEnd?: number;
        setParticleStyleHandler: (particleEl: HTMLElement, idx: number) => void;
        particleZIndex?: number | string;
        speed?: number;
        click?: boolean;
        move?: boolean;
    }> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
        width: string | number;
        height: string | number;
        click: boolean;
        speed: number;
        move: boolean;
        particleCount: number;
        particleClass: string;
        offsetInitial: number;
        offsetEnd: number;
        setParticleStyleHandler: (particleEl: HTMLElement, idx: number) => void;
        particleZIndex: number | string;
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<{
        width?: string | number;
        height?: string | number;
        particleCount?: number;
        particleClass?: string;
        offsetInitial?: number;
        offsetEnd?: number;
        setParticleStyleHandler: (particleEl: HTMLElement, idx: number) => void;
        particleZIndex?: number | string;
        speed?: number;
        click?: boolean;
        move?: boolean;
    }> & Readonly<{}>, {}, {}, {}, {}, {
        width: string | number;
        height: string | number;
        click: boolean;
        speed: number;
        move: boolean;
        particleCount: number;
        particleClass: string;
        offsetInitial: number;
        offsetEnd: number;
        setParticleStyleHandler: (particleEl: HTMLElement, idx: number) => void;
        particleZIndex: number | string;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<{
    width?: string | number;
    height?: string | number;
    particleCount?: number;
    particleClass?: string;
    offsetInitial?: number;
    offsetEnd?: number;
    setParticleStyleHandler: (particleEl: HTMLElement, idx: number) => void;
    particleZIndex?: number | string;
    speed?: number;
    click?: boolean;
    move?: boolean;
}> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
    width: string | number;
    height: string | number;
    click: boolean;
    speed: number;
    move: boolean;
    particleCount: number;
    particleClass: string;
    offsetInitial: number;
    offsetEnd: number;
    setParticleStyleHandler: (particleEl: HTMLElement, idx: number) => void;
    particleZIndex: number | string;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
});
export declare const StMoveParticleTailContainerRegister: import('vue').Plugin;
export declare const StMoveSolidParticleContainer: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{
        width?: string | number;
        height?: string | number;
        particleCount?: number;
        particleMaxSize?: number;
        particleMinSize?: number;
        offsetInitial?: number;
        offsetEnd?: number;
        particleColor?: string;
        particleColorRandom?: boolean;
        particleZIndex?: number | string;
        speed?: number;
        click?: boolean;
        move?: boolean;
    }> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
        width: string | number;
        height: string | number;
        click: boolean;
        speed: number;
        move: boolean;
        particleCount: number;
        offsetInitial: number;
        offsetEnd: number;
        particleZIndex: number | string;
        particleMaxSize: number;
        particleMinSize: number;
        particleColor: string;
        particleColorRandom: boolean;
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<{
        width?: string | number;
        height?: string | number;
        particleCount?: number;
        particleMaxSize?: number;
        particleMinSize?: number;
        offsetInitial?: number;
        offsetEnd?: number;
        particleColor?: string;
        particleColorRandom?: boolean;
        particleZIndex?: number | string;
        speed?: number;
        click?: boolean;
        move?: boolean;
    }> & Readonly<{}>, {}, {}, {}, {}, {
        width: string | number;
        height: string | number;
        click: boolean;
        speed: number;
        move: boolean;
        particleCount: number;
        offsetInitial: number;
        offsetEnd: number;
        particleZIndex: number | string;
        particleMaxSize: number;
        particleMinSize: number;
        particleColor: string;
        particleColorRandom: boolean;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<{
    width?: string | number;
    height?: string | number;
    particleCount?: number;
    particleMaxSize?: number;
    particleMinSize?: number;
    offsetInitial?: number;
    offsetEnd?: number;
    particleColor?: string;
    particleColorRandom?: boolean;
    particleZIndex?: number | string;
    speed?: number;
    click?: boolean;
    move?: boolean;
}> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
    width: string | number;
    height: string | number;
    click: boolean;
    speed: number;
    move: boolean;
    particleCount: number;
    offsetInitial: number;
    offsetEnd: number;
    particleZIndex: number | string;
    particleMaxSize: number;
    particleMinSize: number;
    particleColor: string;
    particleColorRandom: boolean;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
});
export declare const StMoveSolidParticleContainerRegister: import('vue').Plugin;
export declare const StHoverFleetingContainer: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{
        width?: string | number;
        height?: string | number;
        backgroundColor?: string;
        borderColor?: string;
        borderWidth?: string | number;
        borderRadius?: string | number;
        start?: string | number;
        speed?: string | number;
        shine?: boolean;
        shineRangeStart?: string | number;
        shineRangeEnd?: string | number;
        shineBrightnessStart?: number;
        shineBrightnessEnd?: number;
        blurBorder?: boolean;
        blurSpeed: number | string;
    }> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {
        width: string | number;
        height: string | number;
        backgroundColor: string;
        borderColor: string;
        borderRadius: string | number;
        borderWidth: string | number;
        start: string | number;
        speed: string | number;
        shine: boolean;
        shineRangeStart: string | number;
        shineRangeEnd: string | number;
        shineBrightnessEnd: number;
        blurBorder: boolean;
        blurSpeed: number | string;
    }, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<{
        width?: string | number;
        height?: string | number;
        backgroundColor?: string;
        borderColor?: string;
        borderWidth?: string | number;
        borderRadius?: string | number;
        start?: string | number;
        speed?: string | number;
        shine?: boolean;
        shineRangeStart?: string | number;
        shineRangeEnd?: string | number;
        shineBrightnessStart?: number;
        shineBrightnessEnd?: number;
        blurBorder?: boolean;
        blurSpeed: number | string;
    }> & Readonly<{}>, {}, {}, {}, {}, {
        width: string | number;
        height: string | number;
        backgroundColor: string;
        borderColor: string;
        borderRadius: string | number;
        borderWidth: string | number;
        start: string | number;
        speed: string | number;
        shine: boolean;
        shineRangeStart: string | number;
        shineRangeEnd: string | number;
        shineBrightnessEnd: number;
        blurBorder: boolean;
        blurSpeed: number | string;
    }>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<{
    width?: string | number;
    height?: string | number;
    backgroundColor?: string;
    borderColor?: string;
    borderWidth?: string | number;
    borderRadius?: string | number;
    start?: string | number;
    speed?: string | number;
    shine?: boolean;
    shineRangeStart?: string | number;
    shineRangeEnd?: string | number;
    shineBrightnessStart?: number;
    shineBrightnessEnd?: number;
    blurBorder?: boolean;
    blurSpeed: number | string;
}> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {
    width: string | number;
    height: string | number;
    backgroundColor: string;
    borderColor: string;
    borderRadius: string | number;
    borderWidth: string | number;
    start: string | number;
    speed: string | number;
    shine: boolean;
    shineRangeStart: string | number;
    shineRangeEnd: string | number;
    shineBrightnessEnd: number;
    blurBorder: boolean;
    blurSpeed: number | string;
}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
});
export declare const StHoverFleetingContainerRegister: import('vue').Plugin;
export declare const StWatchWidth: {
    new (...args: any[]): import('vue').CreateComponentPublicInstanceWithMixins<Readonly<{
        strategy?: "self" | "screen";
        widthChangeHandler?: (width: number) => void;
        immediate?: boolean;
    }> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, import('vue').PublicProps, {}, false, {}, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, {}, any, import('vue').ComponentProvideOptions, {
        P: {};
        B: {};
        D: {};
        C: {};
        M: {};
        Defaults: {};
    }, Readonly<{
        strategy?: "self" | "screen";
        widthChangeHandler?: (width: number) => void;
        immediate?: boolean;
    }> & Readonly<{}>, {}, {}, {}, {}, {}>;
    __isFragment?: never;
    __isTeleport?: never;
    __isSuspense?: never;
} & import('vue').ComponentOptionsBase<Readonly<{
    strategy?: "self" | "screen";
    widthChangeHandler?: (width: number) => void;
    immediate?: boolean;
}> & Readonly<{}>, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, {}, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps & (new () => {
    $slots: {
        default?(_: {}): any;
    };
});
export declare const StWatchWidthRegister: import('vue').Plugin;
export declare const StCommonUiVue3: import('vue').Plugin;
export declare const useElementContactPrevious: (elementRef: import('vue').Ref<HTMLElement | null | undefined>) => boolean;
export declare const useElementParentChildrenWidth: (elementRef: import('vue').Ref<HTMLElement | null | undefined>) => {
    clientWidth: number[];
    clientWidthSum: number;
    offsetWidth: number[];
    offsetWidthSum: number;
};
export declare const StCommonUIVue3Resolver: () => import('unplugin-vue-components').ComponentResolver;
export declare const genCompGlobalRegisterPlugin: (component: Component) => import('vue').Plugin;
export declare const genCompLibGlobalRegisterPlugin: (componentsMap: Record<string, Component>) => import('vue').Plugin;
export declare const isSSR: () => any;
export declare const genCompLibResolver: (compNameStartsWith: string, from: string, sideEffects: (moduleType: string, compName: string) => string) => () => import('unplugin-vue-components').ComponentResolver;
import * as _iconifyUtils from "./utils/iconify";
export type { IconifySetIcons, SearchIconifyIconsParams, SearchIconifyIconsResult } from './utils/iconify';
export declare const getIconifyIconSvg: (prefix: string, name: string) => Promise<string>;
export declare const getIconifyIconCSS: (prefix: string, icons: string[]) => Promise<string>;
export declare const getIconifyIconData: (prefix: string, icons: string[]) => Promise<import('@iconify/types').IconifyJSON>;
export declare const genIconifySetIconsUncategorized: (iconifySetIconsCategories: Record<string, string[]>) => string[];
export declare const getIconifyIconSets: (prefixes: string[]) => Promise<Record<string, import('@iconify/types').IconifyInfo>>;
export declare const getIconifySetIcons: ({ prefix, info, uncategorized, }: {
    prefix: string;
    info?: boolean;
    uncategorized?: boolean;
}) => Promise<_iconifyUtils.IconifySetIcons>;
export declare const searchIconifyIcons: ({ query, limit, start, prefixes, category }: _iconifyUtils.SearchIconifyIconsParams) => Promise<_iconifyUtils.SearchIconifyIconsResult>;
export declare const getIconifyIconDataParse: (prefix: string, icons: string[]) => Promise<import('@iconify/types').IconifyIcon[]>;
export declare const getIconifySetIconsUncategorized: (metaData: import('@iconify/types').IconifyMetaData) => string[];
export declare const getSetIconsFromIconifyJSON: (iconifyJSON: import('@iconify/types').IconifyJSON) => string[];
export declare const iconifyIconExists: (name: string) => boolean;
export declare const getIconifyIcon: (name: string) => import('@iconify/types').IconifyIcon | null;
export declare const addIconifyIcon: (name: string, data: import('@iconify/types').IconifyIcon) => boolean;
export declare const addIconifyCollection: (data: import('@iconify/types').IconifyJSON, provider?: string) => boolean;
export declare const loadIconifyIcon: (icon: string | import('@iconify/vue/dist/iconify.js').IconifyIconName) => Promise<Required<import('@iconify/types').IconifyIcon>>;
export declare const loadIconifyIcons: (icons: (string | import('@iconify/vue/dist/iconify.js').IconifyIconName)[], callback?: import('@iconify/vue/dist/iconify.js').IconifyIconLoaderCallback) => import('@iconify/vue/dist/iconify.js').IconifyIconLoaderAbort;
export declare const enableIconifyCache: (storage: "local" | "session" | "all") => void;
export declare const disableIconifyCache: (storage: "local" | "session" | "all") => void;
