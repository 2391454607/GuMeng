declare function __VLS_template(): {
    slots: {
        default?(_: {}): any;
    };
    refs: {
        stCapturePointerContainerRef: HTMLDivElement;
    };
    attrs: Partial<{}>;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<{
    width?: string | number;
    height?: string | number;
    captureOnPointerEnter?: boolean;
    captureOnPointerLeave?: boolean;
    captureOnPointerDown?: boolean;
    captureOnPointerUp?: boolean;
    captureOnPointerMove?: boolean;
    captureOnPointerOver?: boolean;
    captureOnPointerOut?: boolean;
}, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {} & {
    handlePointerEvent: (x: number, y: number, componentRootEl: HTMLDivElement, event: PointerEvent) => any;
}, string, import('vue').PublicProps, Readonly<{
    width?: string | number;
    height?: string | number;
    captureOnPointerEnter?: boolean;
    captureOnPointerLeave?: boolean;
    captureOnPointerDown?: boolean;
    captureOnPointerUp?: boolean;
    captureOnPointerMove?: boolean;
    captureOnPointerOver?: boolean;
    captureOnPointerOut?: boolean;
}> & Readonly<{
    onHandlePointerEvent?: ((x: number, y: number, componentRootEl: HTMLDivElement, event: PointerEvent) => any) | undefined;
}>, {
    width: string | number;
    height: string | number;
    captureOnPointerEnter: boolean;
    captureOnPointerLeave: boolean;
    captureOnPointerDown: boolean;
    captureOnPointerUp: boolean;
    captureOnPointerMove: boolean;
    captureOnPointerOver: boolean;
    captureOnPointerOut: boolean;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
