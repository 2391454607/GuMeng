import { defineComponent as c, mergeModels as m, useModel as g, openBlock as i, createElementBlock as t, normalizeClass as d, normalizeStyle as S, unref as a, createElementVNode as l, renderSlot as n, createCommentVNode as r } from "vue";
import * as o from "../../node_modules/.pnpm/st-common-ui-utils@0.1.1/node_modules/st-common-ui-utils/es/utils/el-size-util.js";
import * as s from "../../node_modules/.pnpm/st-common-core@0.1.1/node_modules/st-common-core/es/str/utils/str-util.js";
const u = { class: "st-login-page-1__form-container" }, f = { class: "st-login-page-1__form-container__form" }, h = { class: "st-login-page-1__form-container__form-1" }, v = { class: "st-login-page-1__form-container__form-2" }, I = { class: "st-login-page-1__panel-container" }, k = { class: "st-login-page-1__panel-container__panel-1" }, M = { class: "st-login-page-1__panel-container__panel-1__content" }, z = { class: "st-login-page-1__panel-container__panel-1__content__top" }, H = { class: "st-login-page-1__panel-container__panel-1__content__img" }, P = ["src"], $ = { class: "st-login-page-1__panel-container__panel-2" }, C = { class: "st-login-page-1__panel-container__panel-2__content" }, V = { class: "st-login-page-1__panel-container__panel-2__content__top" }, y = { class: "st-login-page-1__panel-container__panel-2__content__img" }, D = ["src"], F = /* @__PURE__ */ c({
  name: "StLoginPage1",
  __name: "StLoginPage1",
  props: /* @__PURE__ */ m({
    pageMinHeight: { default: "850px" },
    circleMaskDiameter: { default: "2500px" },
    circleMaskDiameterSmall: { default: "1500px" },
    circleMaskColor: { default: "#368EEF" },
    panelImgSrc: { default: "" },
    panelImgWidthSmall: { default: "200px" }
  }, {
    modelValue: { default: !1 },
    modelModifiers: {}
  }),
  emits: ["update:modelValue"],
  setup(_) {
    const p = g(_, "modelValue");
    return (e, E) => (i(), t("div", {
      class: d(["st-login-page-1", [p.value ? "toggle-form" : ""]]),
      style: S({
        "--page-min-height": a(o).elSizePreHandler(e.pageMinHeight),
        "--circle-mask-diameter": a(o).elSizePreHandler(e.circleMaskDiameter),
        "--circle-mask-diameter-small": a(o).elSizePreHandler(e.circleMaskDiameterSmall),
        "--circle-mask-color": e.circleMaskColor,
        "--panel-img-width-small": a(o).elSizePreHandler(e.panelImgWidthSmall)
      })
    }, [
      l("div", u, [
        l("div", f, [
          l("div", h, [
            n(e.$slots, "form-1", {}, void 0, !0)
          ]),
          l("div", v, [
            n(e.$slots, "form-2", {}, void 0, !0)
          ])
        ])
      ]),
      l("div", I, [
        l("div", k, [
          n(e.$slots, "panel-1", {}, () => [
            l("div", M, [
              l("div", z, [
                n(e.$slots, "panel-1-top", {}, void 0, !0)
              ]),
              l("div", H, [
                (a(s).isStr(e.panelImgSrc) ? e.panelImgSrc : e.panelImgSrc[0]) ? (i(), t("img", {
                  key: 0,
                  class: "img",
                  src: a(s).isStr(e.panelImgSrc) ? e.panelImgSrc : e.panelImgSrc[0],
                  alt: ""
                }, null, 8, P)) : r("", !0)
              ])
            ])
          ], !0)
        ]),
        l("div", $, [
          n(e.$slots, "panel-2", {}, () => [
            l("div", C, [
              l("div", V, [
                n(e.$slots, "panel-2-top", {}, void 0, !0)
              ]),
              l("div", y, [
                (a(s).isStr(e.panelImgSrc) ? e.panelImgSrc : e.panelImgSrc[1] || e.panelImgSrc[0]) ? (i(), t("img", {
                  key: 0,
                  class: "img",
                  src: a(s).isStr(e.panelImgSrc) ? e.panelImgSrc : e.panelImgSrc[1] ? e.panelImgSrc[1] : e.panelImgSrc[0],
                  alt: ""
                }, null, 8, D)) : r("", !0)
              ])
            ])
          ], !0)
        ])
      ])
    ], 6));
  }
});
export {
  F as default
};
