/**
 * 组件参数
 */
declare let __VLS_typeProps: {
    enableWidthAdjust?: boolean;
    containerWidthDefault?: number | string;
    containerMinWidth?: number;
    containerMaxWidth?: number;
    adjustWidthElW?: number | string;
    enableHeightAdjust?: boolean;
    containerHeightDefault?: number | string;
    containerMinHeight?: number;
    containerMaxHeight?: number;
    adjustHeightElH?: number | string;
    enableContainerHeightFollowWindow?: boolean;
    enablePlaceholder?: boolean;
};
declare const __VLS_defaults: {
    containerWidth: number;
    containerHeight: number;
};
type __VLS_PublicProps = {
    'containerWidth'?: typeof __VLS_defaults['containerWidth'];
    'containerHeight'?: typeof __VLS_defaults['containerHeight'];
} & typeof __VLS_typeProps;
declare function __VLS_template(): {
    slots: {
        default?(_: {}): any;
    };
    refs: {
        stAdjustableContainerRef: HTMLDivElement;
    };
    attrs: Partial<{}>;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<__VLS_PublicProps, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    "update:containerWidth": (containerWidth: number) => any;
    "update:containerHeight": (containerHeight: number) => any;
} & {
    "width-to-min": (containerWidth: number) => any;
    "width-to-max": (containerWidth: number) => any;
    "height-to-min": (containerHeight: number) => any;
    "height-to-max": (containerHeight: number) => any;
}, string, import('vue').PublicProps, Readonly<__VLS_PublicProps> & Readonly<{
    "onWidth-to-min"?: ((containerWidth: number) => any) | undefined;
    "onWidth-to-max"?: ((containerWidth: number) => any) | undefined;
    "onHeight-to-min"?: ((containerHeight: number) => any) | undefined;
    "onHeight-to-max"?: ((containerHeight: number) => any) | undefined;
    "onUpdate:containerWidth"?: ((containerWidth: number) => any) | undefined;
    "onUpdate:containerHeight"?: ((containerHeight: number) => any) | undefined;
}>, {
    enableWidthAdjust: boolean;
    containerWidthDefault: number | string;
    containerMinWidth: number;
    containerMaxWidth: number;
    adjustWidthElW: number | string;
    enableHeightAdjust: boolean;
    containerHeightDefault: number | string;
    containerMinHeight: number;
    containerMaxHeight: number;
    adjustHeightElH: number | string;
    enableContainerHeightFollowWindow: boolean;
    enablePlaceholder: boolean;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
