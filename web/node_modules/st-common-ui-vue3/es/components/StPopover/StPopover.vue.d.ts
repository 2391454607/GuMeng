import { StPopoverSubContPosEnum } from './st-popover-sub-cont-pos';
/**
 * 小尾巴弹出框出现的触发方式枚举
 */
declare enum StPopoverSubContTriggerEnum {
    click = "click",
    hover = "hover"
}
/**
 * 组件参数
 */
declare let __VLS_typeProps: {
    baseOnPosition?: boolean;
    isVertical?: boolean;
    x?: number;
    y?: number;
    trigger?: keyof typeof StPopoverSubContTriggerEnum;
    subContTransitionName?: string;
    subContZIndex?: number;
};
type __VLS_PublicProps = {
    'subContPosition'?: StPopoverSubContPosEnum;
    'isShow'?: boolean;
} & typeof __VLS_typeProps;
declare function __VLS_template(): {
    slots: {
        default?(_: {}): any;
        subContent?(_: {}): any;
    };
    refs: {
        stPopoverRef: HTMLDivElement;
        stPopoverSubContentRef: HTMLDivElement;
    };
    attrs: Partial<{}>;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<__VLS_PublicProps, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
    "update:subContPosition": (subContPosition: StPopoverSubContPosEnum) => any;
    "update:isShow": (isShow: boolean) => any;
}, string, import('vue').PublicProps, Readonly<__VLS_PublicProps> & Readonly<{
    "onUpdate:subContPosition"?: ((subContPosition: StPopoverSubContPosEnum) => any) | undefined;
    "onUpdate:isShow"?: ((isShow: boolean) => any) | undefined;
}>, {
    x: number;
    y: number;
    baseOnPosition: boolean;
    isVertical: boolean;
    trigger: keyof typeof StPopoverSubContTriggerEnum;
    subContTransitionName: string;
    subContZIndex: number;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
