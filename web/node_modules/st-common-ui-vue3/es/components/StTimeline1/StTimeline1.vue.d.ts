import { Swiper as SwiperType } from 'swiper/types';
declare function __VLS_template(): {
    slots: {
        default?(_: {}): any;
    };
    refs: {
        displaySwiperRef: ({
            $: import('vue').ComponentInternalInstance;
            $data: {};
            $props: {
                readonly activeSlideIdx?: number | undefined;
                readonly width?: (string | number) | undefined;
                readonly height?: (string | number) | undefined;
                readonly initialSlide?: number | undefined;
                readonly direction?: ("horizontal" | "vertical") | undefined;
                readonly slidesPerView?: number | undefined;
                readonly slidesOffsetBefore?: number | undefined;
                readonly slidesOffsetAfter?: number | undefined;
                readonly mousewheel?: boolean | undefined;
                readonly navigation?: boolean | undefined;
                readonly navDirection?: ("horizontal" | "vertical") | undefined;
                readonly navAlign?: ("center" | "start" | "end") | undefined;
                readonly navSize?: (string | number) | undefined;
                readonly navColor?: string | undefined;
                readonly navDisabledColor?: string | undefined;
                readonly transitionFun?: string | undefined;
                readonly transitionSpeed?: number | undefined;
                readonly transitionDelay?: (number | string) | undefined;
                readonly controlSwiper?: (SwiperType | SwiperType[]) | undefined;
                readonly swiperOverflow?: string | undefined;
                readonly enableSlideClick?: boolean | undefined;
                readonly slideClickHandler?: ((swiper: SwiperType) => void) | undefined;
                readonly "onUpdate:activeSlideIdx"?: ((activeSlideIdx: number) => any) | undefined;
            } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps;
            $attrs: {
                [x: string]: unknown;
            };
            $refs: {
                [x: string]: unknown;
            };
            $slots: Readonly<{
                [name: string]: import('vue').Slot<any> | undefined;
            }>;
            $root: import('vue').ComponentPublicInstance | null;
            $parent: import('vue').ComponentPublicInstance | null;
            $host: Element | null;
            $emit: (event: "update:activeSlideIdx", activeSlideIdx: number) => void;
            $el: any;
            $options: import('vue').ComponentOptionsBase<Readonly<{
                activeSlideIdx?: number;
            } & {
                width?: string | number;
                height?: string | number;
                initialSlide?: number;
                direction?: "horizontal" | "vertical";
                slidesPerView?: number;
                slidesOffsetBefore?: number;
                slidesOffsetAfter?: number;
                mousewheel?: boolean;
                navigation?: boolean;
                navDirection?: "horizontal" | "vertical";
                navAlign?: "center" | "start" | "end";
                navSize?: string | number;
                navColor?: string;
                navDisabledColor?: string;
                transitionFun?: string;
                transitionSpeed?: number;
                transitionDelay?: number | string;
                controlSwiper?: SwiperType | SwiperType[];
                swiperOverflow?: string;
                enableSlideClick?: boolean;
                slideClickHandler?: (swiper: SwiperType) => void;
            }> & Readonly<{
                "onUpdate:activeSlideIdx"?: ((activeSlideIdx: number) => any) | undefined;
            }>, {
                swiper: import('vue').Ref<{
                    params: {
                        modules?: import('swiper/types').SwiperModule[] | undefined;
                        injectStyles?: string[] | undefined;
                        injectStylesUrls?: string[] | undefined;
                        init?: boolean | undefined;
                        enabled?: boolean | undefined;
                        updateOnWindowResize?: boolean | undefined;
                        resizeObserver?: boolean | undefined;
                        initialSlide?: number | undefined;
                        direction?: ("horizontal" | "vertical") | undefined;
                        oneWayMovement?: boolean | undefined;
                        swiperElementNodeName?: string | undefined;
                        speed?: number | undefined;
                        setWrapperSize?: boolean | undefined;
                        virtualTranslate?: boolean | undefined;
                        width?: (number | null) | undefined;
                        height?: (number | null) | undefined;
                        autoHeight?: boolean | undefined;
                        roundLengths?: boolean | undefined;
                        nested?: boolean | undefined;
                        createElements?: boolean | undefined;
                        eventsPrefix?: string | undefined;
                        focusableElements?: string | undefined;
                        uniqueNavElements?: boolean | undefined;
                        effect?: ("slide" | "fade" | "cube" | "coverflow" | "flip" | "creative" | "cards" | string) | undefined;
                        runCallbacksOnInit?: boolean | undefined;
                        watchOverflow?: boolean | undefined;
                        userAgent?: (string | null) | undefined;
                        url?: (string | null) | undefined;
                        on?: {
                            init?: ((swiper: SwiperType) => any) | undefined;
                            beforeDestroy?: ((swiper: SwiperType) => void) | undefined;
                            slidesUpdated?: ((swiper: SwiperType) => void) | undefined;
                            slideChange?: ((swiper: SwiperType) => void) | undefined;
                            slideChangeTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                            slideChangeTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                            slideNextTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                            slideNextTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                            slidePrevTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                            slidePrevTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                            transitionStart?: ((swiper: SwiperType) => void) | undefined;
                            transitionEnd?: ((swiper: SwiperType) => void) | undefined;
                            touchStart?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            touchMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            touchMoveOpposite?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            sliderMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            touchEnd?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            click?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            tap?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            doubleTap?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            progress?: ((swiper: SwiperType, progress: number) => void) | undefined;
                            reachBeginning?: ((swiper: SwiperType) => void) | undefined;
                            reachEnd?: ((swiper: SwiperType) => void) | undefined;
                            toEdge?: ((swiper: SwiperType) => void) | undefined;
                            fromEdge?: ((swiper: SwiperType) => void) | undefined;
                            setTranslate?: ((swiper: SwiperType, translate: number) => void) | undefined;
                            setTransition?: ((swiper: SwiperType, transition: number) => void) | undefined;
                            resize?: ((swiper: SwiperType) => void) | undefined;
                            observerUpdate?: ((swiper: SwiperType) => void) | undefined;
                            beforeLoopFix?: ((swiper: SwiperType) => void) | undefined;
                            loopFix?: ((swiper: SwiperType) => void) | undefined;
                            breakpoint?: ((swiper: SwiperType, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                            _beforeBreakpoint?: ((swiper: SwiperType, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                            _containerClasses?: ((swiper: SwiperType, classNames: string) => void) | undefined;
                            _slideClass?: ((swiper: SwiperType, slideEl: HTMLElement, classNames: string) => void) | undefined;
                            _slideClasses?: ((swiper: SwiperType, slides: {
                                slideEl: HTMLElement;
                                classNames: string;
                                index: number;
                            }[]) => void) | undefined;
                            _swiper?: ((swiper: SwiperType) => void) | undefined;
                            _freeModeNoMomentumRelease?: ((swiper: SwiperType) => void) | undefined;
                            activeIndexChange?: ((swiper: SwiperType) => void) | undefined;
                            snapIndexChange?: ((swiper: SwiperType) => void) | undefined;
                            realIndexChange?: ((swiper: SwiperType) => void) | undefined;
                            afterInit?: ((swiper: SwiperType) => void) | undefined;
                            beforeInit?: ((swiper: SwiperType) => void) | undefined;
                            beforeResize?: ((swiper: SwiperType) => void) | undefined;
                            beforeSlideChangeStart?: ((swiper: SwiperType) => void) | undefined;
                            beforeTransitionStart?: ((swiper: SwiperType, speed: number, internal: any) => void) | undefined;
                            changeDirection?: ((swiper: SwiperType) => void) | undefined;
                            doubleClick?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            destroy?: ((swiper: SwiperType) => void) | undefined;
                            momentumBounce?: ((swiper: SwiperType) => void) | undefined;
                            orientationchange?: ((swiper: SwiperType) => void) | undefined;
                            slideResetTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                            slideResetTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                            sliderFirstMove?: ((swiper: SwiperType, event: TouchEvent) => void) | undefined;
                            slidesLengthChange?: ((swiper: SwiperType) => void) | undefined;
                            slidesGridLengthChange?: ((swiper: SwiperType) => void) | undefined;
                            snapGridLengthChange?: ((swiper: SwiperType) => void) | undefined;
                            update?: ((swiper: SwiperType) => void) | undefined;
                            lock?: ((swiper: SwiperType) => void) | undefined;
                            unlock?: ((swiper: SwiperType) => void) | undefined;
                            autoplayStart?: ((swiper: SwiperType) => void) | undefined;
                            autoplayStop?: ((swiper: SwiperType) => void) | undefined;
                            autoplayPause?: ((swiper: SwiperType) => void) | undefined;
                            autoplayResume?: ((swiper: SwiperType) => void) | undefined;
                            autoplayTimeLeft?: ((swiper: SwiperType, timeLeft: number, percentage: number) => void) | undefined;
                            autoplay?: ((swiper: SwiperType) => void) | undefined;
                            hashChange?: ((swiper: SwiperType) => void) | undefined;
                            hashSet?: ((swiper: SwiperType) => void) | undefined;
                            keyPress?: ((swiper: SwiperType, keyCode: string) => void) | undefined;
                            scroll?: ((swiper: SwiperType, event: WheelEvent) => void) | undefined;
                            navigationHide?: ((swiper: SwiperType) => void) | undefined;
                            navigationShow?: ((swiper: SwiperType) => void) | undefined;
                            navigationPrev?: ((swiper: SwiperType) => void) | undefined;
                            navigationNext?: ((swiper: SwiperType) => void) | undefined;
                            paginationRender?: ((swiper: SwiperType, paginationEl: HTMLElement) => void) | undefined;
                            paginationUpdate?: ((swiper: SwiperType, paginationEl: HTMLElement) => void) | undefined;
                            paginationHide?: ((swiper: SwiperType) => void) | undefined;
                            paginationShow?: ((swiper: SwiperType) => void) | undefined;
                            scrollbarDragStart?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            scrollbarDragMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            scrollbarDragEnd?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            zoomChange?: ((swiper: SwiperType, scale: number, imageEl: HTMLElement, slideEl: HTMLElement) => void) | undefined;
                        } | undefined;
                        onAny?: ((handler: (eventName: string, ...args: any[]) => void) => void) | undefined;
                        cssMode?: boolean | undefined;
                        spaceBetween?: (number | string) | undefined;
                        slidesPerView?: (number | "auto") | undefined;
                        maxBackfaceHiddenSlides?: number | undefined;
                        slidesPerGroup?: number | undefined;
                        slidesPerGroupSkip?: number | undefined;
                        slidesPerGroupAuto?: boolean | undefined;
                        centeredSlides?: boolean | undefined;
                        centeredSlidesBounds?: boolean | undefined;
                        slidesOffsetBefore?: number | undefined;
                        slidesOffsetAfter?: number | undefined;
                        normalizeSlideIndex?: boolean | undefined;
                        centerInsufficientSlides?: boolean | undefined;
                        grabCursor?: boolean | undefined;
                        touchEventsTarget?: ("container" | "wrapper") | undefined;
                        touchRatio?: number | undefined;
                        touchAngle?: number | undefined;
                        simulateTouch?: boolean | undefined;
                        shortSwipes?: boolean | undefined;
                        longSwipes?: boolean | undefined;
                        longSwipesRatio?: number | undefined;
                        longSwipesMs?: number | undefined;
                        followFinger?: boolean | undefined;
                        allowTouchMove?: boolean | undefined;
                        threshold?: number | undefined;
                        touchStartPreventDefault?: boolean | undefined;
                        touchStartForcePreventDefault?: boolean | undefined;
                        touchMoveStopPropagation?: boolean | undefined;
                        edgeSwipeDetection?: (boolean | string) | undefined;
                        edgeSwipeThreshold?: number | undefined;
                        touchReleaseOnEdges?: boolean | undefined;
                        passiveListeners?: boolean | undefined;
                        resistance?: boolean | undefined;
                        resistanceRatio?: number | undefined;
                        preventInteractionOnTransition?: boolean | undefined;
                        allowSlidePrev?: boolean | undefined;
                        allowSlideNext?: boolean | undefined;
                        noSwiping?: boolean | undefined;
                        noSwipingClass?: string | undefined;
                        noSwipingSelector?: string | undefined;
                        swipeHandler?: HTMLElement | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | null | undefined;
                        preventClicks?: boolean | undefined;
                        preventClicksPropagation?: boolean | undefined;
                        slideToClickedSlide?: boolean | undefined;
                        watchSlidesProgress?: boolean | undefined;
                        loop?: boolean | undefined;
                        loopAddBlankSlides?: boolean | undefined;
                        loopAdditionalSlides?: number | undefined;
                        loopPreventsSliding?: boolean | undefined;
                        rewind?: boolean | undefined;
                        breakpoints?: {
                            [width: number]: import('swiper/types').SwiperOptions;
                            [ratio: string]: import('swiper/types').SwiperOptions;
                        } | undefined;
                        breakpointsBase?: ("window" | "container") | undefined;
                        observer?: boolean | undefined;
                        observeSlideChildren?: boolean | undefined;
                        observeParents?: boolean | undefined;
                        containerModifierClass?: string | undefined;
                        slideClass?: string | undefined;
                        slideActiveClass?: string | undefined;
                        slideVisibleClass?: string | undefined;
                        slideFullyVisibleClass?: string | undefined;
                        slideBlankClass?: string | undefined;
                        slideNextClass?: string | undefined;
                        slidePrevClass?: string | undefined;
                        wrapperClass?: string | undefined;
                        lazyPreloaderClass?: string | undefined;
                        lazyPreloadPrevNext?: number | undefined;
                        a11y?: {
                            enabled?: boolean | undefined;
                            prevSlideMessage?: string | undefined;
                            nextSlideMessage?: string | undefined;
                            firstSlideMessage?: string | undefined;
                            lastSlideMessage?: string | undefined;
                            paginationBulletMessage?: string | undefined;
                            notificationClass?: string | undefined;
                            containerMessage?: (string | null) | undefined;
                            containerRoleDescriptionMessage?: (string | null) | undefined;
                            containerRole?: (string | null) | undefined;
                            itemRoleDescriptionMessage?: (string | null) | undefined;
                            slideLabelMessage?: string | undefined;
                            slideRole?: string | undefined;
                            id?: (string | number | null) | undefined;
                            scrollOnFocus?: boolean | undefined;
                        } | undefined;
                        autoplay?: boolean | {
                            delay?: number | undefined;
                            stopOnLastSlide?: boolean | undefined;
                            disableOnInteraction?: boolean | undefined;
                            reverseDirection?: boolean | undefined;
                            waitForTransition?: boolean | undefined;
                            pauseOnMouseEnter?: boolean | undefined;
                        } | undefined;
                        controller?: {
                            control?: string | HTMLElement | any | any[] | null | undefined;
                            inverse?: boolean | undefined;
                            by?: ("slide" | "container") | undefined;
                        } | undefined;
                        coverflowEffect?: {
                            slideShadows?: boolean | undefined;
                            rotate?: number | undefined;
                            stretch?: number | undefined;
                            depth?: number | undefined;
                            scale?: number | undefined;
                            modifier?: number | undefined;
                        } | undefined;
                        cubeEffect?: {
                            slideShadows?: boolean | undefined;
                            shadow?: boolean | undefined;
                            shadowOffset?: number | undefined;
                            shadowScale?: number | undefined;
                        } | undefined;
                        fadeEffect?: {
                            crossFade?: boolean | undefined;
                        } | undefined;
                        flipEffect?: {
                            slideShadows?: boolean | undefined;
                            limitRotation?: boolean | undefined;
                        } | undefined;
                        creativeEffect?: {
                            prev?: {
                                translate?: (string | number)[] | undefined;
                                rotate?: number[] | undefined;
                                opacity?: number | undefined;
                                scale?: number | undefined;
                                shadow?: boolean | undefined;
                                origin?: string | undefined;
                            } | undefined;
                            next?: {
                                translate?: (string | number)[] | undefined;
                                rotate?: number[] | undefined;
                                opacity?: number | undefined;
                                scale?: number | undefined;
                                shadow?: boolean | undefined;
                                origin?: string | undefined;
                            } | undefined;
                            limitProgress?: number | undefined;
                            shadowPerProgress?: boolean | undefined;
                            progressMultiplier?: number | undefined;
                            perspective?: boolean | undefined;
                        } | undefined;
                        cardsEffect?: {
                            slideShadows?: boolean | undefined;
                            rotate?: boolean | undefined;
                            perSlideRotate?: number | undefined;
                            perSlideOffset?: number | undefined;
                        } | undefined;
                        hashNavigation?: boolean | {
                            watchState?: boolean | undefined;
                            replaceState?: boolean | undefined;
                            getSlideIndex?: ((swiper: SwiperType, hash: string) => number) | undefined;
                        } | undefined;
                        history?: boolean | {
                            enabled?: boolean | undefined;
                            root?: string | undefined;
                            replaceState?: boolean | undefined;
                            key?: string | undefined;
                            keepQuery?: boolean | undefined;
                        } | undefined;
                        keyboard?: boolean | {
                            enabled?: boolean | undefined;
                            onlyInViewport?: boolean | undefined;
                            pageUpDown?: boolean | undefined;
                        } | undefined;
                        mousewheel?: boolean | {
                            enabled?: boolean | undefined;
                            forceToAxis?: boolean | undefined;
                            releaseOnEdges?: boolean | undefined;
                            invert?: boolean | undefined;
                            sensitivity?: number | undefined;
                            eventsTarget?: HTMLElement | "container" | "wrapper" | {
                                readonly [x: number]: string;
                                toString: () => string;
                                charAt: (pos: number) => string;
                                charCodeAt: (index: number) => number;
                                concat: (...strings: string[]) => string;
                                indexOf: (searchString: string, position?: number) => number;
                                lastIndexOf: (searchString: string, position?: number) => number;
                                localeCompare: {
                                    (that: string): number;
                                    (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                    (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                                };
                                match: {
                                    (regexp: string | RegExp): RegExpMatchArray | null;
                                    (matcher: {
                                        [Symbol.match](string: string): RegExpMatchArray | null;
                                    }): RegExpMatchArray | null;
                                };
                                replace: {
                                    (searchValue: string | RegExp, replaceValue: string): string;
                                    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replaceValue: string): string;
                                    }, replaceValue: string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                    }, replacer: (substring: string, ...args: any[]) => string): string;
                                };
                                search: {
                                    (regexp: string | RegExp): number;
                                    (searcher: {
                                        [Symbol.search](string: string): number;
                                    }): number;
                                };
                                slice: (start?: number, end?: number) => string;
                                split: {
                                    (separator: string | RegExp, limit?: number): string[];
                                    (splitter: {
                                        [Symbol.split](string: string, limit?: number): string[];
                                    }, limit?: number): string[];
                                };
                                substring: (start: number, end?: number) => string;
                                toLowerCase: () => string;
                                toLocaleLowerCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                toUpperCase: () => string;
                                toLocaleUpperCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                trim: () => string;
                                readonly length: number;
                                substr: (from: number, length?: number) => string;
                                valueOf: () => string;
                                codePointAt: (pos: number) => number | undefined;
                                includes: (searchString: string, position?: number) => boolean;
                                endsWith: (searchString: string, endPosition?: number) => boolean;
                                normalize: {
                                    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                    (form?: string): string;
                                };
                                repeat: (count: number) => string;
                                startsWith: (searchString: string, position?: number) => boolean;
                                anchor: (name: string) => string;
                                big: () => string;
                                blink: () => string;
                                bold: () => string;
                                fixed: () => string;
                                fontcolor: (color: string) => string;
                                fontsize: {
                                    (size: number): string;
                                    (size: string): string;
                                };
                                italics: () => string;
                                link: (url: string) => string;
                                small: () => string;
                                strike: () => string;
                                sub: () => string;
                                sup: () => string;
                                padStart: (maxLength: number, fillString?: string) => string;
                                padEnd: (maxLength: number, fillString?: string) => string;
                                trimEnd: () => string;
                                trimStart: () => string;
                                trimLeft: () => string;
                                trimRight: () => string;
                                matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                                [Symbol.iterator]: () => StringIterator<string>;
                                at: (index: number) => string | undefined;
                            } | undefined;
                            thresholdDelta?: (number | null) | undefined;
                            thresholdTime?: (number | null) | undefined;
                            noMousewheelClass?: string | undefined;
                        } | undefined;
                        navigation?: boolean | {
                            enabled?: boolean | undefined;
                            nextEl?: HTMLElement | {
                                readonly [x: number]: string;
                                toString: () => string;
                                charAt: (pos: number) => string;
                                charCodeAt: (index: number) => number;
                                concat: (...strings: string[]) => string;
                                indexOf: (searchString: string, position?: number) => number;
                                lastIndexOf: (searchString: string, position?: number) => number;
                                localeCompare: {
                                    (that: string): number;
                                    (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                    (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                                };
                                match: {
                                    (regexp: string | RegExp): RegExpMatchArray | null;
                                    (matcher: {
                                        [Symbol.match](string: string): RegExpMatchArray | null;
                                    }): RegExpMatchArray | null;
                                };
                                replace: {
                                    (searchValue: string | RegExp, replaceValue: string): string;
                                    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replaceValue: string): string;
                                    }, replaceValue: string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                    }, replacer: (substring: string, ...args: any[]) => string): string;
                                };
                                search: {
                                    (regexp: string | RegExp): number;
                                    (searcher: {
                                        [Symbol.search](string: string): number;
                                    }): number;
                                };
                                slice: (start?: number, end?: number) => string;
                                split: {
                                    (separator: string | RegExp, limit?: number): string[];
                                    (splitter: {
                                        [Symbol.split](string: string, limit?: number): string[];
                                    }, limit?: number): string[];
                                };
                                substring: (start: number, end?: number) => string;
                                toLowerCase: () => string;
                                toLocaleLowerCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                toUpperCase: () => string;
                                toLocaleUpperCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                trim: () => string;
                                readonly length: number;
                                substr: (from: number, length?: number) => string;
                                valueOf: () => string;
                                codePointAt: (pos: number) => number | undefined;
                                includes: (searchString: string, position?: number) => boolean;
                                endsWith: (searchString: string, endPosition?: number) => boolean;
                                normalize: {
                                    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                    (form?: string): string;
                                };
                                repeat: (count: number) => string;
                                startsWith: (searchString: string, position?: number) => boolean;
                                anchor: (name: string) => string;
                                big: () => string;
                                blink: () => string;
                                bold: () => string;
                                fixed: () => string;
                                fontcolor: (color: string) => string;
                                fontsize: {
                                    (size: number): string;
                                    (size: string): string;
                                };
                                italics: () => string;
                                link: (url: string) => string;
                                small: () => string;
                                strike: () => string;
                                sub: () => string;
                                sup: () => string;
                                padStart: (maxLength: number, fillString?: string) => string;
                                padEnd: (maxLength: number, fillString?: string) => string;
                                trimEnd: () => string;
                                trimStart: () => string;
                                trimLeft: () => string;
                                trimRight: () => string;
                                matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                                [Symbol.iterator]: () => StringIterator<string>;
                                at: (index: number) => string | undefined;
                            } | null | undefined;
                            prevEl?: HTMLElement | {
                                readonly [x: number]: string;
                                toString: () => string;
                                charAt: (pos: number) => string;
                                charCodeAt: (index: number) => number;
                                concat: (...strings: string[]) => string;
                                indexOf: (searchString: string, position?: number) => number;
                                lastIndexOf: (searchString: string, position?: number) => number;
                                localeCompare: {
                                    (that: string): number;
                                    (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                    (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                                };
                                match: {
                                    (regexp: string | RegExp): RegExpMatchArray | null;
                                    (matcher: {
                                        [Symbol.match](string: string): RegExpMatchArray | null;
                                    }): RegExpMatchArray | null;
                                };
                                replace: {
                                    (searchValue: string | RegExp, replaceValue: string): string;
                                    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replaceValue: string): string;
                                    }, replaceValue: string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                    }, replacer: (substring: string, ...args: any[]) => string): string;
                                };
                                search: {
                                    (regexp: string | RegExp): number;
                                    (searcher: {
                                        [Symbol.search](string: string): number;
                                    }): number;
                                };
                                slice: (start?: number, end?: number) => string;
                                split: {
                                    (separator: string | RegExp, limit?: number): string[];
                                    (splitter: {
                                        [Symbol.split](string: string, limit?: number): string[];
                                    }, limit?: number): string[];
                                };
                                substring: (start: number, end?: number) => string;
                                toLowerCase: () => string;
                                toLocaleLowerCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                toUpperCase: () => string;
                                toLocaleUpperCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                trim: () => string;
                                readonly length: number;
                                substr: (from: number, length?: number) => string;
                                valueOf: () => string;
                                codePointAt: (pos: number) => number | undefined;
                                includes: (searchString: string, position?: number) => boolean;
                                endsWith: (searchString: string, endPosition?: number) => boolean;
                                normalize: {
                                    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                    (form?: string): string;
                                };
                                repeat: (count: number) => string;
                                startsWith: (searchString: string, position?: number) => boolean;
                                anchor: (name: string) => string;
                                big: () => string;
                                blink: () => string;
                                bold: () => string;
                                fixed: () => string;
                                fontcolor: (color: string) => string;
                                fontsize: {
                                    (size: number): string;
                                    (size: string): string;
                                };
                                italics: () => string;
                                link: (url: string) => string;
                                small: () => string;
                                strike: () => string;
                                sub: () => string;
                                sup: () => string;
                                padStart: (maxLength: number, fillString?: string) => string;
                                padEnd: (maxLength: number, fillString?: string) => string;
                                trimEnd: () => string;
                                trimStart: () => string;
                                trimLeft: () => string;
                                trimRight: () => string;
                                matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                                [Symbol.iterator]: () => StringIterator<string>;
                                at: (index: number) => string | undefined;
                            } | null | undefined;
                            hideOnClick?: boolean | undefined;
                            disabledClass?: string | undefined;
                            hiddenClass?: string | undefined;
                            lockClass?: string | undefined;
                            navigationDisabledClass?: string | undefined;
                        } | undefined;
                        pagination?: boolean | {
                            enabled?: boolean | undefined;
                            el?: HTMLElement | {
                                readonly [x: number]: string;
                                toString: () => string;
                                charAt: (pos: number) => string;
                                charCodeAt: (index: number) => number;
                                concat: (...strings: string[]) => string;
                                indexOf: (searchString: string, position?: number) => number;
                                lastIndexOf: (searchString: string, position?: number) => number;
                                localeCompare: {
                                    (that: string): number;
                                    (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                    (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                                };
                                match: {
                                    (regexp: string | RegExp): RegExpMatchArray | null;
                                    (matcher: {
                                        [Symbol.match](string: string): RegExpMatchArray | null;
                                    }): RegExpMatchArray | null;
                                };
                                replace: {
                                    (searchValue: string | RegExp, replaceValue: string): string;
                                    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replaceValue: string): string;
                                    }, replaceValue: string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                    }, replacer: (substring: string, ...args: any[]) => string): string;
                                };
                                search: {
                                    (regexp: string | RegExp): number;
                                    (searcher: {
                                        [Symbol.search](string: string): number;
                                    }): number;
                                };
                                slice: (start?: number, end?: number) => string;
                                split: {
                                    (separator: string | RegExp, limit?: number): string[];
                                    (splitter: {
                                        [Symbol.split](string: string, limit?: number): string[];
                                    }, limit?: number): string[];
                                };
                                substring: (start: number, end?: number) => string;
                                toLowerCase: () => string;
                                toLocaleLowerCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                toUpperCase: () => string;
                                toLocaleUpperCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                trim: () => string;
                                readonly length: number;
                                substr: (from: number, length?: number) => string;
                                valueOf: () => string;
                                codePointAt: (pos: number) => number | undefined;
                                includes: (searchString: string, position?: number) => boolean;
                                endsWith: (searchString: string, endPosition?: number) => boolean;
                                normalize: {
                                    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                    (form?: string): string;
                                };
                                repeat: (count: number) => string;
                                startsWith: (searchString: string, position?: number) => boolean;
                                anchor: (name: string) => string;
                                big: () => string;
                                blink: () => string;
                                bold: () => string;
                                fixed: () => string;
                                fontcolor: (color: string) => string;
                                fontsize: {
                                    (size: number): string;
                                    (size: string): string;
                                };
                                italics: () => string;
                                link: (url: string) => string;
                                small: () => string;
                                strike: () => string;
                                sub: () => string;
                                sup: () => string;
                                padStart: (maxLength: number, fillString?: string) => string;
                                padEnd: (maxLength: number, fillString?: string) => string;
                                trimEnd: () => string;
                                trimStart: () => string;
                                trimLeft: () => string;
                                trimRight: () => string;
                                matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                                [Symbol.iterator]: () => StringIterator<string>;
                                at: (index: number) => string | undefined;
                            } | null | undefined;
                            type?: ("bullets" | "fraction" | "progressbar" | "custom") | undefined;
                            bulletElement?: string | undefined;
                            dynamicBullets?: boolean | undefined;
                            dynamicMainBullets?: number | undefined;
                            hideOnClick?: boolean | undefined;
                            clickable?: boolean | undefined;
                            progressbarOpposite?: boolean | undefined;
                            formatFractionCurrent?: ((number: number) => number | string) | undefined;
                            formatFractionTotal?: ((number: number) => number | string) | undefined;
                            renderBullet?: ((index: number, className: string) => string) | undefined;
                            renderFraction?: ((currentClass: string, totalClass: string) => string) | undefined;
                            renderProgressbar?: ((progressbarFillClass: string) => string) | undefined;
                            renderCustom?: ((swiper: SwiperType, current: number, total: number) => string) | undefined;
                            bulletClass?: string | undefined;
                            bulletActiveClass?: string | undefined;
                            modifierClass?: string | undefined;
                            currentClass?: string | undefined;
                            totalClass?: string | undefined;
                            hiddenClass?: string | undefined;
                            progressbarFillClass?: string | undefined;
                            progressbarOppositeClass?: string | undefined;
                            clickableClass?: string | undefined;
                            lockClass?: string | undefined;
                            horizontalClass?: string | undefined;
                            verticalClass?: string | undefined;
                            paginationDisabledClass?: string | undefined;
                        } | undefined;
                        parallax?: boolean | {
                            enabled?: boolean | undefined;
                        } | undefined;
                        scrollbar?: boolean | {
                            enabled?: boolean | undefined;
                            el?: HTMLElement | {
                                readonly [x: number]: string;
                                toString: () => string;
                                charAt: (pos: number) => string;
                                charCodeAt: (index: number) => number;
                                concat: (...strings: string[]) => string;
                                indexOf: (searchString: string, position?: number) => number;
                                lastIndexOf: (searchString: string, position?: number) => number;
                                localeCompare: {
                                    (that: string): number;
                                    (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                    (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                                };
                                match: {
                                    (regexp: string | RegExp): RegExpMatchArray | null;
                                    (matcher: {
                                        [Symbol.match](string: string): RegExpMatchArray | null;
                                    }): RegExpMatchArray | null;
                                };
                                replace: {
                                    (searchValue: string | RegExp, replaceValue: string): string;
                                    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replaceValue: string): string;
                                    }, replaceValue: string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                    }, replacer: (substring: string, ...args: any[]) => string): string;
                                };
                                search: {
                                    (regexp: string | RegExp): number;
                                    (searcher: {
                                        [Symbol.search](string: string): number;
                                    }): number;
                                };
                                slice: (start?: number, end?: number) => string;
                                split: {
                                    (separator: string | RegExp, limit?: number): string[];
                                    (splitter: {
                                        [Symbol.split](string: string, limit?: number): string[];
                                    }, limit?: number): string[];
                                };
                                substring: (start: number, end?: number) => string;
                                toLowerCase: () => string;
                                toLocaleLowerCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                toUpperCase: () => string;
                                toLocaleUpperCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                trim: () => string;
                                readonly length: number;
                                substr: (from: number, length?: number) => string;
                                valueOf: () => string;
                                codePointAt: (pos: number) => number | undefined;
                                includes: (searchString: string, position?: number) => boolean;
                                endsWith: (searchString: string, endPosition?: number) => boolean;
                                normalize: {
                                    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                    (form?: string): string;
                                };
                                repeat: (count: number) => string;
                                startsWith: (searchString: string, position?: number) => boolean;
                                anchor: (name: string) => string;
                                big: () => string;
                                blink: () => string;
                                bold: () => string;
                                fixed: () => string;
                                fontcolor: (color: string) => string;
                                fontsize: {
                                    (size: number): string;
                                    (size: string): string;
                                };
                                italics: () => string;
                                link: (url: string) => string;
                                small: () => string;
                                strike: () => string;
                                sub: () => string;
                                sup: () => string;
                                padStart: (maxLength: number, fillString?: string) => string;
                                padEnd: (maxLength: number, fillString?: string) => string;
                                trimEnd: () => string;
                                trimStart: () => string;
                                trimLeft: () => string;
                                trimRight: () => string;
                                matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                                [Symbol.iterator]: () => StringIterator<string>;
                                at: (index: number) => string | undefined;
                            } | null | undefined;
                            hide?: boolean | undefined;
                            draggable?: boolean | undefined;
                            snapOnRelease?: boolean | undefined;
                            dragSize?: ("auto" | number) | undefined;
                            lockClass?: string | undefined;
                            dragClass?: string | undefined;
                            scrollbarDisabledClass?: string | undefined;
                            horizontalClass?: string | undefined;
                            verticalClass?: string | undefined;
                        } | undefined;
                        thumbs?: {
                            swiper?: string | any | null | undefined;
                            slideThumbActiveClass?: string | undefined;
                            thumbsContainerClass?: string | undefined;
                            multipleActiveThumbs?: boolean | undefined;
                            autoScrollOffset?: number | undefined;
                        } | undefined;
                        virtual?: boolean | {
                            enabled?: boolean | undefined;
                            slides?: any[] | undefined;
                            cache?: boolean | undefined;
                            addSlidesBefore?: number | undefined;
                            addSlidesAfter?: number | undefined;
                            renderSlide?: ((slide: any, index: any) => any | null) | undefined;
                            renderExternal?: ((data: import('swiper/types').VirtualData<any>) => any | null) | undefined;
                            renderExternalUpdate?: boolean | undefined;
                        } | undefined;
                        zoom?: boolean | {
                            limitToOriginalSize?: boolean | undefined;
                            maxRatio?: number | undefined;
                            minRatio?: number | undefined;
                            toggle?: boolean | undefined;
                            containerClass?: string | undefined;
                            zoomedSlideClass?: string | undefined;
                        } | undefined;
                        freeMode?: boolean | {
                            enabled?: boolean | undefined;
                            momentum?: boolean | undefined;
                            momentumRatio?: number | undefined;
                            momentumVelocityRatio?: number | undefined;
                            momentumBounce?: boolean | undefined;
                            momentumBounceRatio?: number | undefined;
                            minimumVelocity?: number | undefined;
                            sticky?: boolean | undefined;
                        } | undefined;
                        grid?: {
                            rows?: number | undefined;
                            fill?: ("row" | "column") | undefined;
                        } | undefined;
                        _emitClasses?: boolean | undefined;
                    };
                    originalParams: {
                        modules?: import('swiper/types').SwiperModule[] | undefined;
                        injectStyles?: string[] | undefined;
                        injectStylesUrls?: string[] | undefined;
                        init?: boolean | undefined;
                        enabled?: boolean | undefined;
                        updateOnWindowResize?: boolean | undefined;
                        resizeObserver?: boolean | undefined;
                        initialSlide?: number | undefined;
                        direction?: ("horizontal" | "vertical") | undefined;
                        oneWayMovement?: boolean | undefined;
                        swiperElementNodeName?: string | undefined;
                        speed?: number | undefined;
                        setWrapperSize?: boolean | undefined;
                        virtualTranslate?: boolean | undefined;
                        width?: (number | null) | undefined;
                        height?: (number | null) | undefined;
                        autoHeight?: boolean | undefined;
                        roundLengths?: boolean | undefined;
                        nested?: boolean | undefined;
                        createElements?: boolean | undefined;
                        eventsPrefix?: string | undefined;
                        focusableElements?: string | undefined;
                        uniqueNavElements?: boolean | undefined;
                        effect?: ("slide" | "fade" | "cube" | "coverflow" | "flip" | "creative" | "cards" | string) | undefined;
                        runCallbacksOnInit?: boolean | undefined;
                        watchOverflow?: boolean | undefined;
                        userAgent?: (string | null) | undefined;
                        url?: (string | null) | undefined;
                        on?: {
                            init?: ((swiper: SwiperType) => any) | undefined;
                            beforeDestroy?: ((swiper: SwiperType) => void) | undefined;
                            slidesUpdated?: ((swiper: SwiperType) => void) | undefined;
                            slideChange?: ((swiper: SwiperType) => void) | undefined;
                            slideChangeTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                            slideChangeTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                            slideNextTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                            slideNextTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                            slidePrevTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                            slidePrevTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                            transitionStart?: ((swiper: SwiperType) => void) | undefined;
                            transitionEnd?: ((swiper: SwiperType) => void) | undefined;
                            touchStart?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            touchMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            touchMoveOpposite?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            sliderMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            touchEnd?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            click?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            tap?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            doubleTap?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            progress?: ((swiper: SwiperType, progress: number) => void) | undefined;
                            reachBeginning?: ((swiper: SwiperType) => void) | undefined;
                            reachEnd?: ((swiper: SwiperType) => void) | undefined;
                            toEdge?: ((swiper: SwiperType) => void) | undefined;
                            fromEdge?: ((swiper: SwiperType) => void) | undefined;
                            setTranslate?: ((swiper: SwiperType, translate: number) => void) | undefined;
                            setTransition?: ((swiper: SwiperType, transition: number) => void) | undefined;
                            resize?: ((swiper: SwiperType) => void) | undefined;
                            observerUpdate?: ((swiper: SwiperType) => void) | undefined;
                            beforeLoopFix?: ((swiper: SwiperType) => void) | undefined;
                            loopFix?: ((swiper: SwiperType) => void) | undefined;
                            breakpoint?: ((swiper: SwiperType, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                            _beforeBreakpoint?: ((swiper: SwiperType, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                            _containerClasses?: ((swiper: SwiperType, classNames: string) => void) | undefined;
                            _slideClass?: ((swiper: SwiperType, slideEl: HTMLElement, classNames: string) => void) | undefined;
                            _slideClasses?: ((swiper: SwiperType, slides: {
                                slideEl: HTMLElement;
                                classNames: string;
                                index: number;
                            }[]) => void) | undefined;
                            _swiper?: ((swiper: SwiperType) => void) | undefined;
                            _freeModeNoMomentumRelease?: ((swiper: SwiperType) => void) | undefined;
                            activeIndexChange?: ((swiper: SwiperType) => void) | undefined;
                            snapIndexChange?: ((swiper: SwiperType) => void) | undefined;
                            realIndexChange?: ((swiper: SwiperType) => void) | undefined;
                            afterInit?: ((swiper: SwiperType) => void) | undefined;
                            beforeInit?: ((swiper: SwiperType) => void) | undefined;
                            beforeResize?: ((swiper: SwiperType) => void) | undefined;
                            beforeSlideChangeStart?: ((swiper: SwiperType) => void) | undefined;
                            beforeTransitionStart?: ((swiper: SwiperType, speed: number, internal: any) => void) | undefined;
                            changeDirection?: ((swiper: SwiperType) => void) | undefined;
                            doubleClick?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            destroy?: ((swiper: SwiperType) => void) | undefined;
                            momentumBounce?: ((swiper: SwiperType) => void) | undefined;
                            orientationchange?: ((swiper: SwiperType) => void) | undefined;
                            slideResetTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                            slideResetTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                            sliderFirstMove?: ((swiper: SwiperType, event: TouchEvent) => void) | undefined;
                            slidesLengthChange?: ((swiper: SwiperType) => void) | undefined;
                            slidesGridLengthChange?: ((swiper: SwiperType) => void) | undefined;
                            snapGridLengthChange?: ((swiper: SwiperType) => void) | undefined;
                            update?: ((swiper: SwiperType) => void) | undefined;
                            lock?: ((swiper: SwiperType) => void) | undefined;
                            unlock?: ((swiper: SwiperType) => void) | undefined;
                            autoplayStart?: ((swiper: SwiperType) => void) | undefined;
                            autoplayStop?: ((swiper: SwiperType) => void) | undefined;
                            autoplayPause?: ((swiper: SwiperType) => void) | undefined;
                            autoplayResume?: ((swiper: SwiperType) => void) | undefined;
                            autoplayTimeLeft?: ((swiper: SwiperType, timeLeft: number, percentage: number) => void) | undefined;
                            autoplay?: ((swiper: SwiperType) => void) | undefined;
                            hashChange?: ((swiper: SwiperType) => void) | undefined;
                            hashSet?: ((swiper: SwiperType) => void) | undefined;
                            keyPress?: ((swiper: SwiperType, keyCode: string) => void) | undefined;
                            scroll?: ((swiper: SwiperType, event: WheelEvent) => void) | undefined;
                            navigationHide?: ((swiper: SwiperType) => void) | undefined;
                            navigationShow?: ((swiper: SwiperType) => void) | undefined;
                            navigationPrev?: ((swiper: SwiperType) => void) | undefined;
                            navigationNext?: ((swiper: SwiperType) => void) | undefined;
                            paginationRender?: ((swiper: SwiperType, paginationEl: HTMLElement) => void) | undefined;
                            paginationUpdate?: ((swiper: SwiperType, paginationEl: HTMLElement) => void) | undefined;
                            paginationHide?: ((swiper: SwiperType) => void) | undefined;
                            paginationShow?: ((swiper: SwiperType) => void) | undefined;
                            scrollbarDragStart?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            scrollbarDragMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            scrollbarDragEnd?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            zoomChange?: ((swiper: SwiperType, scale: number, imageEl: HTMLElement, slideEl: HTMLElement) => void) | undefined;
                        } | undefined;
                        onAny?: ((handler: (eventName: string, ...args: any[]) => void) => void) | undefined;
                        cssMode?: boolean | undefined;
                        spaceBetween?: (number | string) | undefined;
                        slidesPerView?: (number | "auto") | undefined;
                        maxBackfaceHiddenSlides?: number | undefined;
                        slidesPerGroup?: number | undefined;
                        slidesPerGroupSkip?: number | undefined;
                        slidesPerGroupAuto?: boolean | undefined;
                        centeredSlides?: boolean | undefined;
                        centeredSlidesBounds?: boolean | undefined;
                        slidesOffsetBefore?: number | undefined;
                        slidesOffsetAfter?: number | undefined;
                        normalizeSlideIndex?: boolean | undefined;
                        centerInsufficientSlides?: boolean | undefined;
                        grabCursor?: boolean | undefined;
                        touchEventsTarget?: ("container" | "wrapper") | undefined;
                        touchRatio?: number | undefined;
                        touchAngle?: number | undefined;
                        simulateTouch?: boolean | undefined;
                        shortSwipes?: boolean | undefined;
                        longSwipes?: boolean | undefined;
                        longSwipesRatio?: number | undefined;
                        longSwipesMs?: number | undefined;
                        followFinger?: boolean | undefined;
                        allowTouchMove?: boolean | undefined;
                        threshold?: number | undefined;
                        touchStartPreventDefault?: boolean | undefined;
                        touchStartForcePreventDefault?: boolean | undefined;
                        touchMoveStopPropagation?: boolean | undefined;
                        edgeSwipeDetection?: (boolean | string) | undefined;
                        edgeSwipeThreshold?: number | undefined;
                        touchReleaseOnEdges?: boolean | undefined;
                        passiveListeners?: boolean | undefined;
                        resistance?: boolean | undefined;
                        resistanceRatio?: number | undefined;
                        preventInteractionOnTransition?: boolean | undefined;
                        allowSlidePrev?: boolean | undefined;
                        allowSlideNext?: boolean | undefined;
                        noSwiping?: boolean | undefined;
                        noSwipingClass?: string | undefined;
                        noSwipingSelector?: string | undefined;
                        swipeHandler?: HTMLElement | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | null | undefined;
                        preventClicks?: boolean | undefined;
                        preventClicksPropagation?: boolean | undefined;
                        slideToClickedSlide?: boolean | undefined;
                        watchSlidesProgress?: boolean | undefined;
                        loop?: boolean | undefined;
                        loopAddBlankSlides?: boolean | undefined;
                        loopAdditionalSlides?: number | undefined;
                        loopPreventsSliding?: boolean | undefined;
                        rewind?: boolean | undefined;
                        breakpoints?: {
                            [width: number]: import('swiper/types').SwiperOptions;
                            [ratio: string]: import('swiper/types').SwiperOptions;
                        } | undefined;
                        breakpointsBase?: ("window" | "container") | undefined;
                        observer?: boolean | undefined;
                        observeSlideChildren?: boolean | undefined;
                        observeParents?: boolean | undefined;
                        containerModifierClass?: string | undefined;
                        slideClass?: string | undefined;
                        slideActiveClass?: string | undefined;
                        slideVisibleClass?: string | undefined;
                        slideFullyVisibleClass?: string | undefined;
                        slideBlankClass?: string | undefined;
                        slideNextClass?: string | undefined;
                        slidePrevClass?: string | undefined;
                        wrapperClass?: string | undefined;
                        lazyPreloaderClass?: string | undefined;
                        lazyPreloadPrevNext?: number | undefined;
                        a11y?: {
                            enabled?: boolean | undefined;
                            prevSlideMessage?: string | undefined;
                            nextSlideMessage?: string | undefined;
                            firstSlideMessage?: string | undefined;
                            lastSlideMessage?: string | undefined;
                            paginationBulletMessage?: string | undefined;
                            notificationClass?: string | undefined;
                            containerMessage?: (string | null) | undefined;
                            containerRoleDescriptionMessage?: (string | null) | undefined;
                            containerRole?: (string | null) | undefined;
                            itemRoleDescriptionMessage?: (string | null) | undefined;
                            slideLabelMessage?: string | undefined;
                            slideRole?: string | undefined;
                            id?: (string | number | null) | undefined;
                            scrollOnFocus?: boolean | undefined;
                        } | undefined;
                        autoplay?: boolean | {
                            delay?: number | undefined;
                            stopOnLastSlide?: boolean | undefined;
                            disableOnInteraction?: boolean | undefined;
                            reverseDirection?: boolean | undefined;
                            waitForTransition?: boolean | undefined;
                            pauseOnMouseEnter?: boolean | undefined;
                        } | undefined;
                        controller?: {
                            control?: string | HTMLElement | any | any[] | null | undefined;
                            inverse?: boolean | undefined;
                            by?: ("slide" | "container") | undefined;
                        } | undefined;
                        coverflowEffect?: {
                            slideShadows?: boolean | undefined;
                            rotate?: number | undefined;
                            stretch?: number | undefined;
                            depth?: number | undefined;
                            scale?: number | undefined;
                            modifier?: number | undefined;
                        } | undefined;
                        cubeEffect?: {
                            slideShadows?: boolean | undefined;
                            shadow?: boolean | undefined;
                            shadowOffset?: number | undefined;
                            shadowScale?: number | undefined;
                        } | undefined;
                        fadeEffect?: {
                            crossFade?: boolean | undefined;
                        } | undefined;
                        flipEffect?: {
                            slideShadows?: boolean | undefined;
                            limitRotation?: boolean | undefined;
                        } | undefined;
                        creativeEffect?: {
                            prev?: {
                                translate?: (string | number)[] | undefined;
                                rotate?: number[] | undefined;
                                opacity?: number | undefined;
                                scale?: number | undefined;
                                shadow?: boolean | undefined;
                                origin?: string | undefined;
                            } | undefined;
                            next?: {
                                translate?: (string | number)[] | undefined;
                                rotate?: number[] | undefined;
                                opacity?: number | undefined;
                                scale?: number | undefined;
                                shadow?: boolean | undefined;
                                origin?: string | undefined;
                            } | undefined;
                            limitProgress?: number | undefined;
                            shadowPerProgress?: boolean | undefined;
                            progressMultiplier?: number | undefined;
                            perspective?: boolean | undefined;
                        } | undefined;
                        cardsEffect?: {
                            slideShadows?: boolean | undefined;
                            rotate?: boolean | undefined;
                            perSlideRotate?: number | undefined;
                            perSlideOffset?: number | undefined;
                        } | undefined;
                        hashNavigation?: boolean | {
                            watchState?: boolean | undefined;
                            replaceState?: boolean | undefined;
                            getSlideIndex?: ((swiper: SwiperType, hash: string) => number) | undefined;
                        } | undefined;
                        history?: boolean | {
                            enabled?: boolean | undefined;
                            root?: string | undefined;
                            replaceState?: boolean | undefined;
                            key?: string | undefined;
                            keepQuery?: boolean | undefined;
                        } | undefined;
                        keyboard?: boolean | {
                            enabled?: boolean | undefined;
                            onlyInViewport?: boolean | undefined;
                            pageUpDown?: boolean | undefined;
                        } | undefined;
                        mousewheel?: boolean | {
                            enabled?: boolean | undefined;
                            forceToAxis?: boolean | undefined;
                            releaseOnEdges?: boolean | undefined;
                            invert?: boolean | undefined;
                            sensitivity?: number | undefined;
                            eventsTarget?: HTMLElement | "container" | "wrapper" | {
                                readonly [x: number]: string;
                                toString: () => string;
                                charAt: (pos: number) => string;
                                charCodeAt: (index: number) => number;
                                concat: (...strings: string[]) => string;
                                indexOf: (searchString: string, position?: number) => number;
                                lastIndexOf: (searchString: string, position?: number) => number;
                                localeCompare: {
                                    (that: string): number;
                                    (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                    (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                                };
                                match: {
                                    (regexp: string | RegExp): RegExpMatchArray | null;
                                    (matcher: {
                                        [Symbol.match](string: string): RegExpMatchArray | null;
                                    }): RegExpMatchArray | null;
                                };
                                replace: {
                                    (searchValue: string | RegExp, replaceValue: string): string;
                                    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replaceValue: string): string;
                                    }, replaceValue: string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                    }, replacer: (substring: string, ...args: any[]) => string): string;
                                };
                                search: {
                                    (regexp: string | RegExp): number;
                                    (searcher: {
                                        [Symbol.search](string: string): number;
                                    }): number;
                                };
                                slice: (start?: number, end?: number) => string;
                                split: {
                                    (separator: string | RegExp, limit?: number): string[];
                                    (splitter: {
                                        [Symbol.split](string: string, limit?: number): string[];
                                    }, limit?: number): string[];
                                };
                                substring: (start: number, end?: number) => string;
                                toLowerCase: () => string;
                                toLocaleLowerCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                toUpperCase: () => string;
                                toLocaleUpperCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                trim: () => string;
                                readonly length: number;
                                substr: (from: number, length?: number) => string;
                                valueOf: () => string;
                                codePointAt: (pos: number) => number | undefined;
                                includes: (searchString: string, position?: number) => boolean;
                                endsWith: (searchString: string, endPosition?: number) => boolean;
                                normalize: {
                                    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                    (form?: string): string;
                                };
                                repeat: (count: number) => string;
                                startsWith: (searchString: string, position?: number) => boolean;
                                anchor: (name: string) => string;
                                big: () => string;
                                blink: () => string;
                                bold: () => string;
                                fixed: () => string;
                                fontcolor: (color: string) => string;
                                fontsize: {
                                    (size: number): string;
                                    (size: string): string;
                                };
                                italics: () => string;
                                link: (url: string) => string;
                                small: () => string;
                                strike: () => string;
                                sub: () => string;
                                sup: () => string;
                                padStart: (maxLength: number, fillString?: string) => string;
                                padEnd: (maxLength: number, fillString?: string) => string;
                                trimEnd: () => string;
                                trimStart: () => string;
                                trimLeft: () => string;
                                trimRight: () => string;
                                matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                                [Symbol.iterator]: () => StringIterator<string>;
                                at: (index: number) => string | undefined;
                            } | undefined;
                            thresholdDelta?: (number | null) | undefined;
                            thresholdTime?: (number | null) | undefined;
                            noMousewheelClass?: string | undefined;
                        } | undefined;
                        navigation?: boolean | {
                            enabled?: boolean | undefined;
                            nextEl?: HTMLElement | {
                                readonly [x: number]: string;
                                toString: () => string;
                                charAt: (pos: number) => string;
                                charCodeAt: (index: number) => number;
                                concat: (...strings: string[]) => string;
                                indexOf: (searchString: string, position?: number) => number;
                                lastIndexOf: (searchString: string, position?: number) => number;
                                localeCompare: {
                                    (that: string): number;
                                    (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                    (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                                };
                                match: {
                                    (regexp: string | RegExp): RegExpMatchArray | null;
                                    (matcher: {
                                        [Symbol.match](string: string): RegExpMatchArray | null;
                                    }): RegExpMatchArray | null;
                                };
                                replace: {
                                    (searchValue: string | RegExp, replaceValue: string): string;
                                    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replaceValue: string): string;
                                    }, replaceValue: string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                    }, replacer: (substring: string, ...args: any[]) => string): string;
                                };
                                search: {
                                    (regexp: string | RegExp): number;
                                    (searcher: {
                                        [Symbol.search](string: string): number;
                                    }): number;
                                };
                                slice: (start?: number, end?: number) => string;
                                split: {
                                    (separator: string | RegExp, limit?: number): string[];
                                    (splitter: {
                                        [Symbol.split](string: string, limit?: number): string[];
                                    }, limit?: number): string[];
                                };
                                substring: (start: number, end?: number) => string;
                                toLowerCase: () => string;
                                toLocaleLowerCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                toUpperCase: () => string;
                                toLocaleUpperCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                trim: () => string;
                                readonly length: number;
                                substr: (from: number, length?: number) => string;
                                valueOf: () => string;
                                codePointAt: (pos: number) => number | undefined;
                                includes: (searchString: string, position?: number) => boolean;
                                endsWith: (searchString: string, endPosition?: number) => boolean;
                                normalize: {
                                    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                    (form?: string): string;
                                };
                                repeat: (count: number) => string;
                                startsWith: (searchString: string, position?: number) => boolean;
                                anchor: (name: string) => string;
                                big: () => string;
                                blink: () => string;
                                bold: () => string;
                                fixed: () => string;
                                fontcolor: (color: string) => string;
                                fontsize: {
                                    (size: number): string;
                                    (size: string): string;
                                };
                                italics: () => string;
                                link: (url: string) => string;
                                small: () => string;
                                strike: () => string;
                                sub: () => string;
                                sup: () => string;
                                padStart: (maxLength: number, fillString?: string) => string;
                                padEnd: (maxLength: number, fillString?: string) => string;
                                trimEnd: () => string;
                                trimStart: () => string;
                                trimLeft: () => string;
                                trimRight: () => string;
                                matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                                [Symbol.iterator]: () => StringIterator<string>;
                                at: (index: number) => string | undefined;
                            } | null | undefined;
                            prevEl?: HTMLElement | {
                                readonly [x: number]: string;
                                toString: () => string;
                                charAt: (pos: number) => string;
                                charCodeAt: (index: number) => number;
                                concat: (...strings: string[]) => string;
                                indexOf: (searchString: string, position?: number) => number;
                                lastIndexOf: (searchString: string, position?: number) => number;
                                localeCompare: {
                                    (that: string): number;
                                    (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                    (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                                };
                                match: {
                                    (regexp: string | RegExp): RegExpMatchArray | null;
                                    (matcher: {
                                        [Symbol.match](string: string): RegExpMatchArray | null;
                                    }): RegExpMatchArray | null;
                                };
                                replace: {
                                    (searchValue: string | RegExp, replaceValue: string): string;
                                    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replaceValue: string): string;
                                    }, replaceValue: string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                    }, replacer: (substring: string, ...args: any[]) => string): string;
                                };
                                search: {
                                    (regexp: string | RegExp): number;
                                    (searcher: {
                                        [Symbol.search](string: string): number;
                                    }): number;
                                };
                                slice: (start?: number, end?: number) => string;
                                split: {
                                    (separator: string | RegExp, limit?: number): string[];
                                    (splitter: {
                                        [Symbol.split](string: string, limit?: number): string[];
                                    }, limit?: number): string[];
                                };
                                substring: (start: number, end?: number) => string;
                                toLowerCase: () => string;
                                toLocaleLowerCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                toUpperCase: () => string;
                                toLocaleUpperCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                trim: () => string;
                                readonly length: number;
                                substr: (from: number, length?: number) => string;
                                valueOf: () => string;
                                codePointAt: (pos: number) => number | undefined;
                                includes: (searchString: string, position?: number) => boolean;
                                endsWith: (searchString: string, endPosition?: number) => boolean;
                                normalize: {
                                    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                    (form?: string): string;
                                };
                                repeat: (count: number) => string;
                                startsWith: (searchString: string, position?: number) => boolean;
                                anchor: (name: string) => string;
                                big: () => string;
                                blink: () => string;
                                bold: () => string;
                                fixed: () => string;
                                fontcolor: (color: string) => string;
                                fontsize: {
                                    (size: number): string;
                                    (size: string): string;
                                };
                                italics: () => string;
                                link: (url: string) => string;
                                small: () => string;
                                strike: () => string;
                                sub: () => string;
                                sup: () => string;
                                padStart: (maxLength: number, fillString?: string) => string;
                                padEnd: (maxLength: number, fillString?: string) => string;
                                trimEnd: () => string;
                                trimStart: () => string;
                                trimLeft: () => string;
                                trimRight: () => string;
                                matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                                [Symbol.iterator]: () => StringIterator<string>;
                                at: (index: number) => string | undefined;
                            } | null | undefined;
                            hideOnClick?: boolean | undefined;
                            disabledClass?: string | undefined;
                            hiddenClass?: string | undefined;
                            lockClass?: string | undefined;
                            navigationDisabledClass?: string | undefined;
                        } | undefined;
                        pagination?: boolean | {
                            enabled?: boolean | undefined;
                            el?: HTMLElement | {
                                readonly [x: number]: string;
                                toString: () => string;
                                charAt: (pos: number) => string;
                                charCodeAt: (index: number) => number;
                                concat: (...strings: string[]) => string;
                                indexOf: (searchString: string, position?: number) => number;
                                lastIndexOf: (searchString: string, position?: number) => number;
                                localeCompare: {
                                    (that: string): number;
                                    (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                    (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                                };
                                match: {
                                    (regexp: string | RegExp): RegExpMatchArray | null;
                                    (matcher: {
                                        [Symbol.match](string: string): RegExpMatchArray | null;
                                    }): RegExpMatchArray | null;
                                };
                                replace: {
                                    (searchValue: string | RegExp, replaceValue: string): string;
                                    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replaceValue: string): string;
                                    }, replaceValue: string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                    }, replacer: (substring: string, ...args: any[]) => string): string;
                                };
                                search: {
                                    (regexp: string | RegExp): number;
                                    (searcher: {
                                        [Symbol.search](string: string): number;
                                    }): number;
                                };
                                slice: (start?: number, end?: number) => string;
                                split: {
                                    (separator: string | RegExp, limit?: number): string[];
                                    (splitter: {
                                        [Symbol.split](string: string, limit?: number): string[];
                                    }, limit?: number): string[];
                                };
                                substring: (start: number, end?: number) => string;
                                toLowerCase: () => string;
                                toLocaleLowerCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                toUpperCase: () => string;
                                toLocaleUpperCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                trim: () => string;
                                readonly length: number;
                                substr: (from: number, length?: number) => string;
                                valueOf: () => string;
                                codePointAt: (pos: number) => number | undefined;
                                includes: (searchString: string, position?: number) => boolean;
                                endsWith: (searchString: string, endPosition?: number) => boolean;
                                normalize: {
                                    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                    (form?: string): string;
                                };
                                repeat: (count: number) => string;
                                startsWith: (searchString: string, position?: number) => boolean;
                                anchor: (name: string) => string;
                                big: () => string;
                                blink: () => string;
                                bold: () => string;
                                fixed: () => string;
                                fontcolor: (color: string) => string;
                                fontsize: {
                                    (size: number): string;
                                    (size: string): string;
                                };
                                italics: () => string;
                                link: (url: string) => string;
                                small: () => string;
                                strike: () => string;
                                sub: () => string;
                                sup: () => string;
                                padStart: (maxLength: number, fillString?: string) => string;
                                padEnd: (maxLength: number, fillString?: string) => string;
                                trimEnd: () => string;
                                trimStart: () => string;
                                trimLeft: () => string;
                                trimRight: () => string;
                                matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                                [Symbol.iterator]: () => StringIterator<string>;
                                at: (index: number) => string | undefined;
                            } | null | undefined;
                            type?: ("bullets" | "fraction" | "progressbar" | "custom") | undefined;
                            bulletElement?: string | undefined;
                            dynamicBullets?: boolean | undefined;
                            dynamicMainBullets?: number | undefined;
                            hideOnClick?: boolean | undefined;
                            clickable?: boolean | undefined;
                            progressbarOpposite?: boolean | undefined;
                            formatFractionCurrent?: ((number: number) => number | string) | undefined;
                            formatFractionTotal?: ((number: number) => number | string) | undefined;
                            renderBullet?: ((index: number, className: string) => string) | undefined;
                            renderFraction?: ((currentClass: string, totalClass: string) => string) | undefined;
                            renderProgressbar?: ((progressbarFillClass: string) => string) | undefined;
                            renderCustom?: ((swiper: SwiperType, current: number, total: number) => string) | undefined;
                            bulletClass?: string | undefined;
                            bulletActiveClass?: string | undefined;
                            modifierClass?: string | undefined;
                            currentClass?: string | undefined;
                            totalClass?: string | undefined;
                            hiddenClass?: string | undefined;
                            progressbarFillClass?: string | undefined;
                            progressbarOppositeClass?: string | undefined;
                            clickableClass?: string | undefined;
                            lockClass?: string | undefined;
                            horizontalClass?: string | undefined;
                            verticalClass?: string | undefined;
                            paginationDisabledClass?: string | undefined;
                        } | undefined;
                        parallax?: boolean | {
                            enabled?: boolean | undefined;
                        } | undefined;
                        scrollbar?: boolean | {
                            enabled?: boolean | undefined;
                            el?: HTMLElement | {
                                readonly [x: number]: string;
                                toString: () => string;
                                charAt: (pos: number) => string;
                                charCodeAt: (index: number) => number;
                                concat: (...strings: string[]) => string;
                                indexOf: (searchString: string, position?: number) => number;
                                lastIndexOf: (searchString: string, position?: number) => number;
                                localeCompare: {
                                    (that: string): number;
                                    (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                    (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                                };
                                match: {
                                    (regexp: string | RegExp): RegExpMatchArray | null;
                                    (matcher: {
                                        [Symbol.match](string: string): RegExpMatchArray | null;
                                    }): RegExpMatchArray | null;
                                };
                                replace: {
                                    (searchValue: string | RegExp, replaceValue: string): string;
                                    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replaceValue: string): string;
                                    }, replaceValue: string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                    }, replacer: (substring: string, ...args: any[]) => string): string;
                                };
                                search: {
                                    (regexp: string | RegExp): number;
                                    (searcher: {
                                        [Symbol.search](string: string): number;
                                    }): number;
                                };
                                slice: (start?: number, end?: number) => string;
                                split: {
                                    (separator: string | RegExp, limit?: number): string[];
                                    (splitter: {
                                        [Symbol.split](string: string, limit?: number): string[];
                                    }, limit?: number): string[];
                                };
                                substring: (start: number, end?: number) => string;
                                toLowerCase: () => string;
                                toLocaleLowerCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                toUpperCase: () => string;
                                toLocaleUpperCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                trim: () => string;
                                readonly length: number;
                                substr: (from: number, length?: number) => string;
                                valueOf: () => string;
                                codePointAt: (pos: number) => number | undefined;
                                includes: (searchString: string, position?: number) => boolean;
                                endsWith: (searchString: string, endPosition?: number) => boolean;
                                normalize: {
                                    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                    (form?: string): string;
                                };
                                repeat: (count: number) => string;
                                startsWith: (searchString: string, position?: number) => boolean;
                                anchor: (name: string) => string;
                                big: () => string;
                                blink: () => string;
                                bold: () => string;
                                fixed: () => string;
                                fontcolor: (color: string) => string;
                                fontsize: {
                                    (size: number): string;
                                    (size: string): string;
                                };
                                italics: () => string;
                                link: (url: string) => string;
                                small: () => string;
                                strike: () => string;
                                sub: () => string;
                                sup: () => string;
                                padStart: (maxLength: number, fillString?: string) => string;
                                padEnd: (maxLength: number, fillString?: string) => string;
                                trimEnd: () => string;
                                trimStart: () => string;
                                trimLeft: () => string;
                                trimRight: () => string;
                                matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                                [Symbol.iterator]: () => StringIterator<string>;
                                at: (index: number) => string | undefined;
                            } | null | undefined;
                            hide?: boolean | undefined;
                            draggable?: boolean | undefined;
                            snapOnRelease?: boolean | undefined;
                            dragSize?: ("auto" | number) | undefined;
                            lockClass?: string | undefined;
                            dragClass?: string | undefined;
                            scrollbarDisabledClass?: string | undefined;
                            horizontalClass?: string | undefined;
                            verticalClass?: string | undefined;
                        } | undefined;
                        thumbs?: {
                            swiper?: string | any | null | undefined;
                            slideThumbActiveClass?: string | undefined;
                            thumbsContainerClass?: string | undefined;
                            multipleActiveThumbs?: boolean | undefined;
                            autoScrollOffset?: number | undefined;
                        } | undefined;
                        virtual?: boolean | {
                            enabled?: boolean | undefined;
                            slides?: any[] | undefined;
                            cache?: boolean | undefined;
                            addSlidesBefore?: number | undefined;
                            addSlidesAfter?: number | undefined;
                            renderSlide?: ((slide: any, index: any) => any | null) | undefined;
                            renderExternal?: ((data: import('swiper/types').VirtualData<any>) => any | null) | undefined;
                            renderExternalUpdate?: boolean | undefined;
                        } | undefined;
                        zoom?: boolean | {
                            limitToOriginalSize?: boolean | undefined;
                            maxRatio?: number | undefined;
                            minRatio?: number | undefined;
                            toggle?: boolean | undefined;
                            containerClass?: string | undefined;
                            zoomedSlideClass?: string | undefined;
                        } | undefined;
                        freeMode?: boolean | {
                            enabled?: boolean | undefined;
                            momentum?: boolean | undefined;
                            momentumRatio?: number | undefined;
                            momentumVelocityRatio?: number | undefined;
                            momentumBounce?: boolean | undefined;
                            momentumBounceRatio?: number | undefined;
                            minimumVelocity?: number | undefined;
                            sticky?: boolean | undefined;
                        } | undefined;
                        grid?: {
                            rows?: number | undefined;
                            fill?: ("row" | "column") | undefined;
                        } | undefined;
                        _emitClasses?: boolean | undefined;
                    };
                    el: HTMLElement;
                    wrapperEl: HTMLElement;
                    slidesEl: HTMLElement;
                    slides: HTMLElement[];
                    loopedSlides: number | null;
                    width: number;
                    height: number;
                    translate: number;
                    progress: number;
                    activeIndex: number;
                    realIndex: number;
                    previousIndex: number;
                    snapIndex: number;
                    snapGrid: number[];
                    slidesGrid: number[];
                    slidesSizesGrid: number[];
                    isBeginning: boolean;
                    isEnd: boolean;
                    isLocked: boolean;
                    animating: boolean;
                    touches: {
                        startX: number;
                        startY: number;
                        currentX: number;
                        currentY: number;
                        diff: number;
                    };
                    clickedIndex: number;
                    clickedSlide: HTMLElement;
                    allowSlideNext: boolean;
                    allowSlidePrev: boolean;
                    allowTouchMove: boolean;
                    swipeDirection: "prev" | "next";
                    rtlTranslate: boolean;
                    disable: () => void;
                    enable: () => void;
                    setProgress: (progress: number, speed?: number) => void;
                    slideNext: (speed?: number, runCallbacks?: boolean) => boolean;
                    slidePrev: (speed?: number, runCallbacks?: boolean) => boolean;
                    slideTo: (index: number, speed?: number, runCallbacks?: boolean) => boolean;
                    slideToLoop: (index: number, speed?: number, runCallbacks?: boolean) => SwiperType;
                    slideReset: (speed?: number, runCallbacks?: boolean) => boolean;
                    slideToClosest: (speed?: number, runCallbacks?: boolean) => boolean;
                    slidesPerViewDynamic: () => number;
                    updateAutoHeight: (speed?: number) => void;
                    update: () => void;
                    updateSize: () => void;
                    updateSlides: () => void;
                    updateProgress: () => void;
                    updateSlidesClasses: () => void;
                    changeDirection: (direction?: "horizontal" | "vertical", needUpdate?: boolean) => void;
                    changeLanguageDirection: (direction: "rtl" | "ltr") => void;
                    detachEvents: () => void;
                    attachEvents: () => void;
                    loopCreate: () => void;
                    loopDestroy: () => void;
                    init: (el?: HTMLElement) => SwiperType;
                    destroy: (deleteInstance?: boolean, cleanStyles?: boolean) => void;
                    setTranslate: (translate: any) => void;
                    getTranslate: () => any;
                    translateTo: (translate: number, speed: number, runCallbacks?: boolean, translateBounds?: boolean) => any;
                    minTranslate: () => number;
                    maxTranslate: () => number;
                    unsetGrabCursor: () => void;
                    setGrabCursor: () => void;
                    onAny: (handler: (eventName: string, ...args: any[]) => void) => void;
                    offAny: (handler: (eventName: string, ...args: any[]) => void) => void;
                    isHorizontal: () => boolean;
                    getBreakpoint: (breakpoints: import('swiper/types').SwiperOptions["breakpoints"]) => string;
                    setBreakpoint: () => void;
                    currentBreakpoint: any;
                    destroyed: boolean;
                    modules: Array<import('swiper/types').SwiperModule>;
                    a11y: import('swiper/types').A11yMethods;
                    autoplay: {
                        running: boolean;
                        paused: boolean;
                        timeLeft: number;
                        pause: () => void;
                        resume: () => void;
                        start: () => boolean;
                        stop: () => boolean;
                    };
                    controller: {
                        control?: any | any[] | undefined;
                    };
                    coverflowEffect: import('swiper/types').CoverflowEffectMethods;
                    cubeEffect: import('swiper/types').CubeEffectMethods;
                    fadeEffect: import('swiper/types').FadeEffectMethods;
                    flipEffect: import('swiper/types').FlipEffectMethods;
                    creativeEffect: import('swiper/types').CreativeEffectMethods;
                    cardsEffect: import('swiper/types').CardsEffectMethods;
                    hashNavigation: import('swiper/types').HashNavigationMethods;
                    history: import('swiper/types').HistoryMethods;
                    keyboard: {
                        enabled: boolean;
                        enable: () => void;
                        disable: () => void;
                    };
                    mousewheel: {
                        enabled: boolean;
                        enable: () => void;
                        disable: () => void;
                    };
                    navigation: {
                        nextEl: HTMLElement;
                        prevEl: HTMLElement;
                        update: () => void;
                        init: () => void;
                        destroy: () => void;
                    };
                    pagination: {
                        el: HTMLElement;
                        bullets: HTMLElement[];
                        render: () => void;
                        update: () => void;
                        init: () => void;
                        destroy: () => void;
                    };
                    parallax: import('swiper/types').ParallaxMethods;
                    scrollbar: {
                        el: HTMLElement;
                        dragEl: HTMLElement;
                        updateSize: () => void;
                        setTranslate: () => void;
                        init: () => void;
                        destroy: () => void;
                    };
                    thumbs: {
                        swiper: any;
                        update: (initial: boolean) => void;
                        init: () => boolean;
                    };
                    virtual: {
                        cache: object;
                        from: number;
                        to: number;
                        slides: any[];
                        appendSlide: (slide: HTMLElement | string | HTMLElement[] | string[]) => void;
                        prependSlide: (slide: HTMLElement | string | HTMLElement[] | string[]) => void;
                        removeSlide: (slideIndexes: number[]) => void;
                        removeAllSlides: () => void;
                        update: (force: boolean) => void;
                    };
                    zoom: {
                        enabled: boolean;
                        scale: number;
                        enable: () => void;
                        disable: () => void;
                        in: (ratio?: number) => void;
                        out: () => void;
                        toggle: (event?: MouseEvent | TouchEvent | PointerEvent) => void;
                    };
                    freeMode: {
                        onTouchMove: () => void;
                        onTouchEnd: () => void;
                    };
                    on: <E extends keyof import('swiper/types').SwiperEvents>(event: E, handler: import('swiper/types').SwiperEvents[E]) => void;
                    once: <E extends keyof import('swiper/types').SwiperEvents>(event: E, handler: import('swiper/types').SwiperEvents[E]) => void;
                    off: {
                        <E extends keyof import('swiper/types').SwiperEvents>(event: E, handler: import('swiper/types').SwiperEvents[E]): void;
                        <E extends keyof import('swiper/types').SwiperEvents>(event: E): void;
                    };
                    emit: <E extends keyof import('swiper/types').SwiperEvents>(event: E, ...args: any[]) => void;
                    appendSlide: (slides: HTMLElement | string | string[] | HTMLElement[]) => void;
                    prependSlide: (slides: HTMLElement | string | string[] | HTMLElement[]) => void;
                    addSlide: (index: number, slides: HTMLElement | string | string[] | HTMLElement[]) => void;
                    removeSlide: (slideIndex: number | number[]) => void;
                    removeAllSlides: () => void;
                } | null, SwiperType | {
                    params: {
                        modules?: import('swiper/types').SwiperModule[] | undefined;
                        injectStyles?: string[] | undefined;
                        injectStylesUrls?: string[] | undefined;
                        init?: boolean | undefined;
                        enabled?: boolean | undefined;
                        updateOnWindowResize?: boolean | undefined;
                        resizeObserver?: boolean | undefined;
                        initialSlide?: number | undefined;
                        direction?: ("horizontal" | "vertical") | undefined;
                        oneWayMovement?: boolean | undefined;
                        swiperElementNodeName?: string | undefined;
                        speed?: number | undefined;
                        setWrapperSize?: boolean | undefined;
                        virtualTranslate?: boolean | undefined;
                        width?: (number | null) | undefined;
                        height?: (number | null) | undefined;
                        autoHeight?: boolean | undefined;
                        roundLengths?: boolean | undefined;
                        nested?: boolean | undefined;
                        createElements?: boolean | undefined;
                        eventsPrefix?: string | undefined;
                        focusableElements?: string | undefined;
                        uniqueNavElements?: boolean | undefined;
                        effect?: ("slide" | "fade" | "cube" | "coverflow" | "flip" | "creative" | "cards" | string) | undefined;
                        runCallbacksOnInit?: boolean | undefined;
                        watchOverflow?: boolean | undefined;
                        userAgent?: (string | null) | undefined;
                        url?: (string | null) | undefined;
                        on?: {
                            init?: ((swiper: SwiperType) => any) | undefined;
                            beforeDestroy?: ((swiper: SwiperType) => void) | undefined;
                            slidesUpdated?: ((swiper: SwiperType) => void) | undefined;
                            slideChange?: ((swiper: SwiperType) => void) | undefined;
                            slideChangeTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                            slideChangeTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                            slideNextTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                            slideNextTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                            slidePrevTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                            slidePrevTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                            transitionStart?: ((swiper: SwiperType) => void) | undefined;
                            transitionEnd?: ((swiper: SwiperType) => void) | undefined;
                            touchStart?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            touchMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            touchMoveOpposite?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            sliderMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            touchEnd?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            click?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            tap?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            doubleTap?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            progress?: ((swiper: SwiperType, progress: number) => void) | undefined;
                            reachBeginning?: ((swiper: SwiperType) => void) | undefined;
                            reachEnd?: ((swiper: SwiperType) => void) | undefined;
                            toEdge?: ((swiper: SwiperType) => void) | undefined;
                            fromEdge?: ((swiper: SwiperType) => void) | undefined;
                            setTranslate?: ((swiper: SwiperType, translate: number) => void) | undefined;
                            setTransition?: ((swiper: SwiperType, transition: number) => void) | undefined;
                            resize?: ((swiper: SwiperType) => void) | undefined;
                            observerUpdate?: ((swiper: SwiperType) => void) | undefined;
                            beforeLoopFix?: ((swiper: SwiperType) => void) | undefined;
                            loopFix?: ((swiper: SwiperType) => void) | undefined;
                            breakpoint?: ((swiper: SwiperType, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                            _beforeBreakpoint?: ((swiper: SwiperType, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                            _containerClasses?: ((swiper: SwiperType, classNames: string) => void) | undefined;
                            _slideClass?: ((swiper: SwiperType, slideEl: HTMLElement, classNames: string) => void) | undefined;
                            _slideClasses?: ((swiper: SwiperType, slides: {
                                slideEl: HTMLElement;
                                classNames: string;
                                index: number;
                            }[]) => void) | undefined;
                            _swiper?: ((swiper: SwiperType) => void) | undefined;
                            _freeModeNoMomentumRelease?: ((swiper: SwiperType) => void) | undefined;
                            activeIndexChange?: ((swiper: SwiperType) => void) | undefined;
                            snapIndexChange?: ((swiper: SwiperType) => void) | undefined;
                            realIndexChange?: ((swiper: SwiperType) => void) | undefined;
                            afterInit?: ((swiper: SwiperType) => void) | undefined;
                            beforeInit?: ((swiper: SwiperType) => void) | undefined;
                            beforeResize?: ((swiper: SwiperType) => void) | undefined;
                            beforeSlideChangeStart?: ((swiper: SwiperType) => void) | undefined;
                            beforeTransitionStart?: ((swiper: SwiperType, speed: number, internal: any) => void) | undefined;
                            changeDirection?: ((swiper: SwiperType) => void) | undefined;
                            doubleClick?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            destroy?: ((swiper: SwiperType) => void) | undefined;
                            momentumBounce?: ((swiper: SwiperType) => void) | undefined;
                            orientationchange?: ((swiper: SwiperType) => void) | undefined;
                            slideResetTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                            slideResetTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                            sliderFirstMove?: ((swiper: SwiperType, event: TouchEvent) => void) | undefined;
                            slidesLengthChange?: ((swiper: SwiperType) => void) | undefined;
                            slidesGridLengthChange?: ((swiper: SwiperType) => void) | undefined;
                            snapGridLengthChange?: ((swiper: SwiperType) => void) | undefined;
                            update?: ((swiper: SwiperType) => void) | undefined;
                            lock?: ((swiper: SwiperType) => void) | undefined;
                            unlock?: ((swiper: SwiperType) => void) | undefined;
                            autoplayStart?: ((swiper: SwiperType) => void) | undefined;
                            autoplayStop?: ((swiper: SwiperType) => void) | undefined;
                            autoplayPause?: ((swiper: SwiperType) => void) | undefined;
                            autoplayResume?: ((swiper: SwiperType) => void) | undefined;
                            autoplayTimeLeft?: ((swiper: SwiperType, timeLeft: number, percentage: number) => void) | undefined;
                            autoplay?: ((swiper: SwiperType) => void) | undefined;
                            hashChange?: ((swiper: SwiperType) => void) | undefined;
                            hashSet?: ((swiper: SwiperType) => void) | undefined;
                            keyPress?: ((swiper: SwiperType, keyCode: string) => void) | undefined;
                            scroll?: ((swiper: SwiperType, event: WheelEvent) => void) | undefined;
                            navigationHide?: ((swiper: SwiperType) => void) | undefined;
                            navigationShow?: ((swiper: SwiperType) => void) | undefined;
                            navigationPrev?: ((swiper: SwiperType) => void) | undefined;
                            navigationNext?: ((swiper: SwiperType) => void) | undefined;
                            paginationRender?: ((swiper: SwiperType, paginationEl: HTMLElement) => void) | undefined;
                            paginationUpdate?: ((swiper: SwiperType, paginationEl: HTMLElement) => void) | undefined;
                            paginationHide?: ((swiper: SwiperType) => void) | undefined;
                            paginationShow?: ((swiper: SwiperType) => void) | undefined;
                            scrollbarDragStart?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            scrollbarDragMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            scrollbarDragEnd?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            zoomChange?: ((swiper: SwiperType, scale: number, imageEl: HTMLElement, slideEl: HTMLElement) => void) | undefined;
                        } | undefined;
                        onAny?: ((handler: (eventName: string, ...args: any[]) => void) => void) | undefined;
                        cssMode?: boolean | undefined;
                        spaceBetween?: (number | string) | undefined;
                        slidesPerView?: (number | "auto") | undefined;
                        maxBackfaceHiddenSlides?: number | undefined;
                        slidesPerGroup?: number | undefined;
                        slidesPerGroupSkip?: number | undefined;
                        slidesPerGroupAuto?: boolean | undefined;
                        centeredSlides?: boolean | undefined;
                        centeredSlidesBounds?: boolean | undefined;
                        slidesOffsetBefore?: number | undefined;
                        slidesOffsetAfter?: number | undefined;
                        normalizeSlideIndex?: boolean | undefined;
                        centerInsufficientSlides?: boolean | undefined;
                        grabCursor?: boolean | undefined;
                        touchEventsTarget?: ("container" | "wrapper") | undefined;
                        touchRatio?: number | undefined;
                        touchAngle?: number | undefined;
                        simulateTouch?: boolean | undefined;
                        shortSwipes?: boolean | undefined;
                        longSwipes?: boolean | undefined;
                        longSwipesRatio?: number | undefined;
                        longSwipesMs?: number | undefined;
                        followFinger?: boolean | undefined;
                        allowTouchMove?: boolean | undefined;
                        threshold?: number | undefined;
                        touchStartPreventDefault?: boolean | undefined;
                        touchStartForcePreventDefault?: boolean | undefined;
                        touchMoveStopPropagation?: boolean | undefined;
                        edgeSwipeDetection?: (boolean | string) | undefined;
                        edgeSwipeThreshold?: number | undefined;
                        touchReleaseOnEdges?: boolean | undefined;
                        passiveListeners?: boolean | undefined;
                        resistance?: boolean | undefined;
                        resistanceRatio?: number | undefined;
                        preventInteractionOnTransition?: boolean | undefined;
                        allowSlidePrev?: boolean | undefined;
                        allowSlideNext?: boolean | undefined;
                        noSwiping?: boolean | undefined;
                        noSwipingClass?: string | undefined;
                        noSwipingSelector?: string | undefined;
                        swipeHandler?: HTMLElement | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | null | undefined;
                        preventClicks?: boolean | undefined;
                        preventClicksPropagation?: boolean | undefined;
                        slideToClickedSlide?: boolean | undefined;
                        watchSlidesProgress?: boolean | undefined;
                        loop?: boolean | undefined;
                        loopAddBlankSlides?: boolean | undefined;
                        loopAdditionalSlides?: number | undefined;
                        loopPreventsSliding?: boolean | undefined;
                        rewind?: boolean | undefined;
                        breakpoints?: {
                            [width: number]: import('swiper/types').SwiperOptions;
                            [ratio: string]: import('swiper/types').SwiperOptions;
                        } | undefined;
                        breakpointsBase?: ("window" | "container") | undefined;
                        observer?: boolean | undefined;
                        observeSlideChildren?: boolean | undefined;
                        observeParents?: boolean | undefined;
                        containerModifierClass?: string | undefined;
                        slideClass?: string | undefined;
                        slideActiveClass?: string | undefined;
                        slideVisibleClass?: string | undefined;
                        slideFullyVisibleClass?: string | undefined;
                        slideBlankClass?: string | undefined;
                        slideNextClass?: string | undefined;
                        slidePrevClass?: string | undefined;
                        wrapperClass?: string | undefined;
                        lazyPreloaderClass?: string | undefined;
                        lazyPreloadPrevNext?: number | undefined;
                        a11y?: {
                            enabled?: boolean | undefined;
                            prevSlideMessage?: string | undefined;
                            nextSlideMessage?: string | undefined;
                            firstSlideMessage?: string | undefined;
                            lastSlideMessage?: string | undefined;
                            paginationBulletMessage?: string | undefined;
                            notificationClass?: string | undefined;
                            containerMessage?: (string | null) | undefined;
                            containerRoleDescriptionMessage?: (string | null) | undefined;
                            containerRole?: (string | null) | undefined;
                            itemRoleDescriptionMessage?: (string | null) | undefined;
                            slideLabelMessage?: string | undefined;
                            slideRole?: string | undefined;
                            id?: (string | number | null) | undefined;
                            scrollOnFocus?: boolean | undefined;
                        } | undefined;
                        autoplay?: boolean | {
                            delay?: number | undefined;
                            stopOnLastSlide?: boolean | undefined;
                            disableOnInteraction?: boolean | undefined;
                            reverseDirection?: boolean | undefined;
                            waitForTransition?: boolean | undefined;
                            pauseOnMouseEnter?: boolean | undefined;
                        } | undefined;
                        controller?: {
                            control?: string | HTMLElement | any | any[] | null | undefined;
                            inverse?: boolean | undefined;
                            by?: ("slide" | "container") | undefined;
                        } | undefined;
                        coverflowEffect?: {
                            slideShadows?: boolean | undefined;
                            rotate?: number | undefined;
                            stretch?: number | undefined;
                            depth?: number | undefined;
                            scale?: number | undefined;
                            modifier?: number | undefined;
                        } | undefined;
                        cubeEffect?: {
                            slideShadows?: boolean | undefined;
                            shadow?: boolean | undefined;
                            shadowOffset?: number | undefined;
                            shadowScale?: number | undefined;
                        } | undefined;
                        fadeEffect?: {
                            crossFade?: boolean | undefined;
                        } | undefined;
                        flipEffect?: {
                            slideShadows?: boolean | undefined;
                            limitRotation?: boolean | undefined;
                        } | undefined;
                        creativeEffect?: {
                            prev?: {
                                translate?: (string | number)[] | undefined;
                                rotate?: number[] | undefined;
                                opacity?: number | undefined;
                                scale?: number | undefined;
                                shadow?: boolean | undefined;
                                origin?: string | undefined;
                            } | undefined;
                            next?: {
                                translate?: (string | number)[] | undefined;
                                rotate?: number[] | undefined;
                                opacity?: number | undefined;
                                scale?: number | undefined;
                                shadow?: boolean | undefined;
                                origin?: string | undefined;
                            } | undefined;
                            limitProgress?: number | undefined;
                            shadowPerProgress?: boolean | undefined;
                            progressMultiplier?: number | undefined;
                            perspective?: boolean | undefined;
                        } | undefined;
                        cardsEffect?: {
                            slideShadows?: boolean | undefined;
                            rotate?: boolean | undefined;
                            perSlideRotate?: number | undefined;
                            perSlideOffset?: number | undefined;
                        } | undefined;
                        hashNavigation?: boolean | {
                            watchState?: boolean | undefined;
                            replaceState?: boolean | undefined;
                            getSlideIndex?: ((swiper: SwiperType, hash: string) => number) | undefined;
                        } | undefined;
                        history?: boolean | {
                            enabled?: boolean | undefined;
                            root?: string | undefined;
                            replaceState?: boolean | undefined;
                            key?: string | undefined;
                            keepQuery?: boolean | undefined;
                        } | undefined;
                        keyboard?: boolean | {
                            enabled?: boolean | undefined;
                            onlyInViewport?: boolean | undefined;
                            pageUpDown?: boolean | undefined;
                        } | undefined;
                        mousewheel?: boolean | {
                            enabled?: boolean | undefined;
                            forceToAxis?: boolean | undefined;
                            releaseOnEdges?: boolean | undefined;
                            invert?: boolean | undefined;
                            sensitivity?: number | undefined;
                            eventsTarget?: HTMLElement | "container" | "wrapper" | {
                                readonly [x: number]: string;
                                toString: () => string;
                                charAt: (pos: number) => string;
                                charCodeAt: (index: number) => number;
                                concat: (...strings: string[]) => string;
                                indexOf: (searchString: string, position?: number) => number;
                                lastIndexOf: (searchString: string, position?: number) => number;
                                localeCompare: {
                                    (that: string): number;
                                    (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                    (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                                };
                                match: {
                                    (regexp: string | RegExp): RegExpMatchArray | null;
                                    (matcher: {
                                        [Symbol.match](string: string): RegExpMatchArray | null;
                                    }): RegExpMatchArray | null;
                                };
                                replace: {
                                    (searchValue: string | RegExp, replaceValue: string): string;
                                    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replaceValue: string): string;
                                    }, replaceValue: string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                    }, replacer: (substring: string, ...args: any[]) => string): string;
                                };
                                search: {
                                    (regexp: string | RegExp): number;
                                    (searcher: {
                                        [Symbol.search](string: string): number;
                                    }): number;
                                };
                                slice: (start?: number, end?: number) => string;
                                split: {
                                    (separator: string | RegExp, limit?: number): string[];
                                    (splitter: {
                                        [Symbol.split](string: string, limit?: number): string[];
                                    }, limit?: number): string[];
                                };
                                substring: (start: number, end?: number) => string;
                                toLowerCase: () => string;
                                toLocaleLowerCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                toUpperCase: () => string;
                                toLocaleUpperCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                trim: () => string;
                                readonly length: number;
                                substr: (from: number, length?: number) => string;
                                valueOf: () => string;
                                codePointAt: (pos: number) => number | undefined;
                                includes: (searchString: string, position?: number) => boolean;
                                endsWith: (searchString: string, endPosition?: number) => boolean;
                                normalize: {
                                    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                    (form?: string): string;
                                };
                                repeat: (count: number) => string;
                                startsWith: (searchString: string, position?: number) => boolean;
                                anchor: (name: string) => string;
                                big: () => string;
                                blink: () => string;
                                bold: () => string;
                                fixed: () => string;
                                fontcolor: (color: string) => string;
                                fontsize: {
                                    (size: number): string;
                                    (size: string): string;
                                };
                                italics: () => string;
                                link: (url: string) => string;
                                small: () => string;
                                strike: () => string;
                                sub: () => string;
                                sup: () => string;
                                padStart: (maxLength: number, fillString?: string) => string;
                                padEnd: (maxLength: number, fillString?: string) => string;
                                trimEnd: () => string;
                                trimStart: () => string;
                                trimLeft: () => string;
                                trimRight: () => string;
                                matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                                [Symbol.iterator]: () => StringIterator<string>;
                                at: (index: number) => string | undefined;
                            } | undefined;
                            thresholdDelta?: (number | null) | undefined;
                            thresholdTime?: (number | null) | undefined;
                            noMousewheelClass?: string | undefined;
                        } | undefined;
                        navigation?: boolean | {
                            enabled?: boolean | undefined;
                            nextEl?: HTMLElement | {
                                readonly [x: number]: string;
                                toString: () => string;
                                charAt: (pos: number) => string;
                                charCodeAt: (index: number) => number;
                                concat: (...strings: string[]) => string;
                                indexOf: (searchString: string, position?: number) => number;
                                lastIndexOf: (searchString: string, position?: number) => number;
                                localeCompare: {
                                    (that: string): number;
                                    (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                    (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                                };
                                match: {
                                    (regexp: string | RegExp): RegExpMatchArray | null;
                                    (matcher: {
                                        [Symbol.match](string: string): RegExpMatchArray | null;
                                    }): RegExpMatchArray | null;
                                };
                                replace: {
                                    (searchValue: string | RegExp, replaceValue: string): string;
                                    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replaceValue: string): string;
                                    }, replaceValue: string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                    }, replacer: (substring: string, ...args: any[]) => string): string;
                                };
                                search: {
                                    (regexp: string | RegExp): number;
                                    (searcher: {
                                        [Symbol.search](string: string): number;
                                    }): number;
                                };
                                slice: (start?: number, end?: number) => string;
                                split: {
                                    (separator: string | RegExp, limit?: number): string[];
                                    (splitter: {
                                        [Symbol.split](string: string, limit?: number): string[];
                                    }, limit?: number): string[];
                                };
                                substring: (start: number, end?: number) => string;
                                toLowerCase: () => string;
                                toLocaleLowerCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                toUpperCase: () => string;
                                toLocaleUpperCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                trim: () => string;
                                readonly length: number;
                                substr: (from: number, length?: number) => string;
                                valueOf: () => string;
                                codePointAt: (pos: number) => number | undefined;
                                includes: (searchString: string, position?: number) => boolean;
                                endsWith: (searchString: string, endPosition?: number) => boolean;
                                normalize: {
                                    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                    (form?: string): string;
                                };
                                repeat: (count: number) => string;
                                startsWith: (searchString: string, position?: number) => boolean;
                                anchor: (name: string) => string;
                                big: () => string;
                                blink: () => string;
                                bold: () => string;
                                fixed: () => string;
                                fontcolor: (color: string) => string;
                                fontsize: {
                                    (size: number): string;
                                    (size: string): string;
                                };
                                italics: () => string;
                                link: (url: string) => string;
                                small: () => string;
                                strike: () => string;
                                sub: () => string;
                                sup: () => string;
                                padStart: (maxLength: number, fillString?: string) => string;
                                padEnd: (maxLength: number, fillString?: string) => string;
                                trimEnd: () => string;
                                trimStart: () => string;
                                trimLeft: () => string;
                                trimRight: () => string;
                                matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                                [Symbol.iterator]: () => StringIterator<string>;
                                at: (index: number) => string | undefined;
                            } | null | undefined;
                            prevEl?: HTMLElement | {
                                readonly [x: number]: string;
                                toString: () => string;
                                charAt: (pos: number) => string;
                                charCodeAt: (index: number) => number;
                                concat: (...strings: string[]) => string;
                                indexOf: (searchString: string, position?: number) => number;
                                lastIndexOf: (searchString: string, position?: number) => number;
                                localeCompare: {
                                    (that: string): number;
                                    (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                    (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                                };
                                match: {
                                    (regexp: string | RegExp): RegExpMatchArray | null;
                                    (matcher: {
                                        [Symbol.match](string: string): RegExpMatchArray | null;
                                    }): RegExpMatchArray | null;
                                };
                                replace: {
                                    (searchValue: string | RegExp, replaceValue: string): string;
                                    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replaceValue: string): string;
                                    }, replaceValue: string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                    }, replacer: (substring: string, ...args: any[]) => string): string;
                                };
                                search: {
                                    (regexp: string | RegExp): number;
                                    (searcher: {
                                        [Symbol.search](string: string): number;
                                    }): number;
                                };
                                slice: (start?: number, end?: number) => string;
                                split: {
                                    (separator: string | RegExp, limit?: number): string[];
                                    (splitter: {
                                        [Symbol.split](string: string, limit?: number): string[];
                                    }, limit?: number): string[];
                                };
                                substring: (start: number, end?: number) => string;
                                toLowerCase: () => string;
                                toLocaleLowerCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                toUpperCase: () => string;
                                toLocaleUpperCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                trim: () => string;
                                readonly length: number;
                                substr: (from: number, length?: number) => string;
                                valueOf: () => string;
                                codePointAt: (pos: number) => number | undefined;
                                includes: (searchString: string, position?: number) => boolean;
                                endsWith: (searchString: string, endPosition?: number) => boolean;
                                normalize: {
                                    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                    (form?: string): string;
                                };
                                repeat: (count: number) => string;
                                startsWith: (searchString: string, position?: number) => boolean;
                                anchor: (name: string) => string;
                                big: () => string;
                                blink: () => string;
                                bold: () => string;
                                fixed: () => string;
                                fontcolor: (color: string) => string;
                                fontsize: {
                                    (size: number): string;
                                    (size: string): string;
                                };
                                italics: () => string;
                                link: (url: string) => string;
                                small: () => string;
                                strike: () => string;
                                sub: () => string;
                                sup: () => string;
                                padStart: (maxLength: number, fillString?: string) => string;
                                padEnd: (maxLength: number, fillString?: string) => string;
                                trimEnd: () => string;
                                trimStart: () => string;
                                trimLeft: () => string;
                                trimRight: () => string;
                                matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                                [Symbol.iterator]: () => StringIterator<string>;
                                at: (index: number) => string | undefined;
                            } | null | undefined;
                            hideOnClick?: boolean | undefined;
                            disabledClass?: string | undefined;
                            hiddenClass?: string | undefined;
                            lockClass?: string | undefined;
                            navigationDisabledClass?: string | undefined;
                        } | undefined;
                        pagination?: boolean | {
                            enabled?: boolean | undefined;
                            el?: HTMLElement | {
                                readonly [x: number]: string;
                                toString: () => string;
                                charAt: (pos: number) => string;
                                charCodeAt: (index: number) => number;
                                concat: (...strings: string[]) => string;
                                indexOf: (searchString: string, position?: number) => number;
                                lastIndexOf: (searchString: string, position?: number) => number;
                                localeCompare: {
                                    (that: string): number;
                                    (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                    (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                                };
                                match: {
                                    (regexp: string | RegExp): RegExpMatchArray | null;
                                    (matcher: {
                                        [Symbol.match](string: string): RegExpMatchArray | null;
                                    }): RegExpMatchArray | null;
                                };
                                replace: {
                                    (searchValue: string | RegExp, replaceValue: string): string;
                                    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replaceValue: string): string;
                                    }, replaceValue: string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                    }, replacer: (substring: string, ...args: any[]) => string): string;
                                };
                                search: {
                                    (regexp: string | RegExp): number;
                                    (searcher: {
                                        [Symbol.search](string: string): number;
                                    }): number;
                                };
                                slice: (start?: number, end?: number) => string;
                                split: {
                                    (separator: string | RegExp, limit?: number): string[];
                                    (splitter: {
                                        [Symbol.split](string: string, limit?: number): string[];
                                    }, limit?: number): string[];
                                };
                                substring: (start: number, end?: number) => string;
                                toLowerCase: () => string;
                                toLocaleLowerCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                toUpperCase: () => string;
                                toLocaleUpperCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                trim: () => string;
                                readonly length: number;
                                substr: (from: number, length?: number) => string;
                                valueOf: () => string;
                                codePointAt: (pos: number) => number | undefined;
                                includes: (searchString: string, position?: number) => boolean;
                                endsWith: (searchString: string, endPosition?: number) => boolean;
                                normalize: {
                                    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                    (form?: string): string;
                                };
                                repeat: (count: number) => string;
                                startsWith: (searchString: string, position?: number) => boolean;
                                anchor: (name: string) => string;
                                big: () => string;
                                blink: () => string;
                                bold: () => string;
                                fixed: () => string;
                                fontcolor: (color: string) => string;
                                fontsize: {
                                    (size: number): string;
                                    (size: string): string;
                                };
                                italics: () => string;
                                link: (url: string) => string;
                                small: () => string;
                                strike: () => string;
                                sub: () => string;
                                sup: () => string;
                                padStart: (maxLength: number, fillString?: string) => string;
                                padEnd: (maxLength: number, fillString?: string) => string;
                                trimEnd: () => string;
                                trimStart: () => string;
                                trimLeft: () => string;
                                trimRight: () => string;
                                matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                                [Symbol.iterator]: () => StringIterator<string>;
                                at: (index: number) => string | undefined;
                            } | null | undefined;
                            type?: ("bullets" | "fraction" | "progressbar" | "custom") | undefined;
                            bulletElement?: string | undefined;
                            dynamicBullets?: boolean | undefined;
                            dynamicMainBullets?: number | undefined;
                            hideOnClick?: boolean | undefined;
                            clickable?: boolean | undefined;
                            progressbarOpposite?: boolean | undefined;
                            formatFractionCurrent?: ((number: number) => number | string) | undefined;
                            formatFractionTotal?: ((number: number) => number | string) | undefined;
                            renderBullet?: ((index: number, className: string) => string) | undefined;
                            renderFraction?: ((currentClass: string, totalClass: string) => string) | undefined;
                            renderProgressbar?: ((progressbarFillClass: string) => string) | undefined;
                            renderCustom?: ((swiper: SwiperType, current: number, total: number) => string) | undefined;
                            bulletClass?: string | undefined;
                            bulletActiveClass?: string | undefined;
                            modifierClass?: string | undefined;
                            currentClass?: string | undefined;
                            totalClass?: string | undefined;
                            hiddenClass?: string | undefined;
                            progressbarFillClass?: string | undefined;
                            progressbarOppositeClass?: string | undefined;
                            clickableClass?: string | undefined;
                            lockClass?: string | undefined;
                            horizontalClass?: string | undefined;
                            verticalClass?: string | undefined;
                            paginationDisabledClass?: string | undefined;
                        } | undefined;
                        parallax?: boolean | {
                            enabled?: boolean | undefined;
                        } | undefined;
                        scrollbar?: boolean | {
                            enabled?: boolean | undefined;
                            el?: HTMLElement | {
                                readonly [x: number]: string;
                                toString: () => string;
                                charAt: (pos: number) => string;
                                charCodeAt: (index: number) => number;
                                concat: (...strings: string[]) => string;
                                indexOf: (searchString: string, position?: number) => number;
                                lastIndexOf: (searchString: string, position?: number) => number;
                                localeCompare: {
                                    (that: string): number;
                                    (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                    (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                                };
                                match: {
                                    (regexp: string | RegExp): RegExpMatchArray | null;
                                    (matcher: {
                                        [Symbol.match](string: string): RegExpMatchArray | null;
                                    }): RegExpMatchArray | null;
                                };
                                replace: {
                                    (searchValue: string | RegExp, replaceValue: string): string;
                                    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replaceValue: string): string;
                                    }, replaceValue: string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                    }, replacer: (substring: string, ...args: any[]) => string): string;
                                };
                                search: {
                                    (regexp: string | RegExp): number;
                                    (searcher: {
                                        [Symbol.search](string: string): number;
                                    }): number;
                                };
                                slice: (start?: number, end?: number) => string;
                                split: {
                                    (separator: string | RegExp, limit?: number): string[];
                                    (splitter: {
                                        [Symbol.split](string: string, limit?: number): string[];
                                    }, limit?: number): string[];
                                };
                                substring: (start: number, end?: number) => string;
                                toLowerCase: () => string;
                                toLocaleLowerCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                toUpperCase: () => string;
                                toLocaleUpperCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                trim: () => string;
                                readonly length: number;
                                substr: (from: number, length?: number) => string;
                                valueOf: () => string;
                                codePointAt: (pos: number) => number | undefined;
                                includes: (searchString: string, position?: number) => boolean;
                                endsWith: (searchString: string, endPosition?: number) => boolean;
                                normalize: {
                                    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                    (form?: string): string;
                                };
                                repeat: (count: number) => string;
                                startsWith: (searchString: string, position?: number) => boolean;
                                anchor: (name: string) => string;
                                big: () => string;
                                blink: () => string;
                                bold: () => string;
                                fixed: () => string;
                                fontcolor: (color: string) => string;
                                fontsize: {
                                    (size: number): string;
                                    (size: string): string;
                                };
                                italics: () => string;
                                link: (url: string) => string;
                                small: () => string;
                                strike: () => string;
                                sub: () => string;
                                sup: () => string;
                                padStart: (maxLength: number, fillString?: string) => string;
                                padEnd: (maxLength: number, fillString?: string) => string;
                                trimEnd: () => string;
                                trimStart: () => string;
                                trimLeft: () => string;
                                trimRight: () => string;
                                matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                                [Symbol.iterator]: () => StringIterator<string>;
                                at: (index: number) => string | undefined;
                            } | null | undefined;
                            hide?: boolean | undefined;
                            draggable?: boolean | undefined;
                            snapOnRelease?: boolean | undefined;
                            dragSize?: ("auto" | number) | undefined;
                            lockClass?: string | undefined;
                            dragClass?: string | undefined;
                            scrollbarDisabledClass?: string | undefined;
                            horizontalClass?: string | undefined;
                            verticalClass?: string | undefined;
                        } | undefined;
                        thumbs?: {
                            swiper?: string | any | null | undefined;
                            slideThumbActiveClass?: string | undefined;
                            thumbsContainerClass?: string | undefined;
                            multipleActiveThumbs?: boolean | undefined;
                            autoScrollOffset?: number | undefined;
                        } | undefined;
                        virtual?: boolean | {
                            enabled?: boolean | undefined;
                            slides?: any[] | undefined;
                            cache?: boolean | undefined;
                            addSlidesBefore?: number | undefined;
                            addSlidesAfter?: number | undefined;
                            renderSlide?: ((slide: any, index: any) => any | null) | undefined;
                            renderExternal?: ((data: import('swiper/types').VirtualData<any>) => any | null) | undefined;
                            renderExternalUpdate?: boolean | undefined;
                        } | undefined;
                        zoom?: boolean | {
                            limitToOriginalSize?: boolean | undefined;
                            maxRatio?: number | undefined;
                            minRatio?: number | undefined;
                            toggle?: boolean | undefined;
                            containerClass?: string | undefined;
                            zoomedSlideClass?: string | undefined;
                        } | undefined;
                        freeMode?: boolean | {
                            enabled?: boolean | undefined;
                            momentum?: boolean | undefined;
                            momentumRatio?: number | undefined;
                            momentumVelocityRatio?: number | undefined;
                            momentumBounce?: boolean | undefined;
                            momentumBounceRatio?: number | undefined;
                            minimumVelocity?: number | undefined;
                            sticky?: boolean | undefined;
                        } | undefined;
                        grid?: {
                            rows?: number | undefined;
                            fill?: ("row" | "column") | undefined;
                        } | undefined;
                        _emitClasses?: boolean | undefined;
                    };
                    originalParams: {
                        modules?: import('swiper/types').SwiperModule[] | undefined;
                        injectStyles?: string[] | undefined;
                        injectStylesUrls?: string[] | undefined;
                        init?: boolean | undefined;
                        enabled?: boolean | undefined;
                        updateOnWindowResize?: boolean | undefined;
                        resizeObserver?: boolean | undefined;
                        initialSlide?: number | undefined;
                        direction?: ("horizontal" | "vertical") | undefined;
                        oneWayMovement?: boolean | undefined;
                        swiperElementNodeName?: string | undefined;
                        speed?: number | undefined;
                        setWrapperSize?: boolean | undefined;
                        virtualTranslate?: boolean | undefined;
                        width?: (number | null) | undefined;
                        height?: (number | null) | undefined;
                        autoHeight?: boolean | undefined;
                        roundLengths?: boolean | undefined;
                        nested?: boolean | undefined;
                        createElements?: boolean | undefined;
                        eventsPrefix?: string | undefined;
                        focusableElements?: string | undefined;
                        uniqueNavElements?: boolean | undefined;
                        effect?: ("slide" | "fade" | "cube" | "coverflow" | "flip" | "creative" | "cards" | string) | undefined;
                        runCallbacksOnInit?: boolean | undefined;
                        watchOverflow?: boolean | undefined;
                        userAgent?: (string | null) | undefined;
                        url?: (string | null) | undefined;
                        on?: {
                            init?: ((swiper: SwiperType) => any) | undefined;
                            beforeDestroy?: ((swiper: SwiperType) => void) | undefined;
                            slidesUpdated?: ((swiper: SwiperType) => void) | undefined;
                            slideChange?: ((swiper: SwiperType) => void) | undefined;
                            slideChangeTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                            slideChangeTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                            slideNextTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                            slideNextTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                            slidePrevTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                            slidePrevTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                            transitionStart?: ((swiper: SwiperType) => void) | undefined;
                            transitionEnd?: ((swiper: SwiperType) => void) | undefined;
                            touchStart?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            touchMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            touchMoveOpposite?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            sliderMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            touchEnd?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            click?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            tap?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            doubleTap?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            progress?: ((swiper: SwiperType, progress: number) => void) | undefined;
                            reachBeginning?: ((swiper: SwiperType) => void) | undefined;
                            reachEnd?: ((swiper: SwiperType) => void) | undefined;
                            toEdge?: ((swiper: SwiperType) => void) | undefined;
                            fromEdge?: ((swiper: SwiperType) => void) | undefined;
                            setTranslate?: ((swiper: SwiperType, translate: number) => void) | undefined;
                            setTransition?: ((swiper: SwiperType, transition: number) => void) | undefined;
                            resize?: ((swiper: SwiperType) => void) | undefined;
                            observerUpdate?: ((swiper: SwiperType) => void) | undefined;
                            beforeLoopFix?: ((swiper: SwiperType) => void) | undefined;
                            loopFix?: ((swiper: SwiperType) => void) | undefined;
                            breakpoint?: ((swiper: SwiperType, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                            _beforeBreakpoint?: ((swiper: SwiperType, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                            _containerClasses?: ((swiper: SwiperType, classNames: string) => void) | undefined;
                            _slideClass?: ((swiper: SwiperType, slideEl: HTMLElement, classNames: string) => void) | undefined;
                            _slideClasses?: ((swiper: SwiperType, slides: {
                                slideEl: HTMLElement;
                                classNames: string;
                                index: number;
                            }[]) => void) | undefined;
                            _swiper?: ((swiper: SwiperType) => void) | undefined;
                            _freeModeNoMomentumRelease?: ((swiper: SwiperType) => void) | undefined;
                            activeIndexChange?: ((swiper: SwiperType) => void) | undefined;
                            snapIndexChange?: ((swiper: SwiperType) => void) | undefined;
                            realIndexChange?: ((swiper: SwiperType) => void) | undefined;
                            afterInit?: ((swiper: SwiperType) => void) | undefined;
                            beforeInit?: ((swiper: SwiperType) => void) | undefined;
                            beforeResize?: ((swiper: SwiperType) => void) | undefined;
                            beforeSlideChangeStart?: ((swiper: SwiperType) => void) | undefined;
                            beforeTransitionStart?: ((swiper: SwiperType, speed: number, internal: any) => void) | undefined;
                            changeDirection?: ((swiper: SwiperType) => void) | undefined;
                            doubleClick?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            destroy?: ((swiper: SwiperType) => void) | undefined;
                            momentumBounce?: ((swiper: SwiperType) => void) | undefined;
                            orientationchange?: ((swiper: SwiperType) => void) | undefined;
                            slideResetTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                            slideResetTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                            sliderFirstMove?: ((swiper: SwiperType, event: TouchEvent) => void) | undefined;
                            slidesLengthChange?: ((swiper: SwiperType) => void) | undefined;
                            slidesGridLengthChange?: ((swiper: SwiperType) => void) | undefined;
                            snapGridLengthChange?: ((swiper: SwiperType) => void) | undefined;
                            update?: ((swiper: SwiperType) => void) | undefined;
                            lock?: ((swiper: SwiperType) => void) | undefined;
                            unlock?: ((swiper: SwiperType) => void) | undefined;
                            autoplayStart?: ((swiper: SwiperType) => void) | undefined;
                            autoplayStop?: ((swiper: SwiperType) => void) | undefined;
                            autoplayPause?: ((swiper: SwiperType) => void) | undefined;
                            autoplayResume?: ((swiper: SwiperType) => void) | undefined;
                            autoplayTimeLeft?: ((swiper: SwiperType, timeLeft: number, percentage: number) => void) | undefined;
                            autoplay?: ((swiper: SwiperType) => void) | undefined;
                            hashChange?: ((swiper: SwiperType) => void) | undefined;
                            hashSet?: ((swiper: SwiperType) => void) | undefined;
                            keyPress?: ((swiper: SwiperType, keyCode: string) => void) | undefined;
                            scroll?: ((swiper: SwiperType, event: WheelEvent) => void) | undefined;
                            navigationHide?: ((swiper: SwiperType) => void) | undefined;
                            navigationShow?: ((swiper: SwiperType) => void) | undefined;
                            navigationPrev?: ((swiper: SwiperType) => void) | undefined;
                            navigationNext?: ((swiper: SwiperType) => void) | undefined;
                            paginationRender?: ((swiper: SwiperType, paginationEl: HTMLElement) => void) | undefined;
                            paginationUpdate?: ((swiper: SwiperType, paginationEl: HTMLElement) => void) | undefined;
                            paginationHide?: ((swiper: SwiperType) => void) | undefined;
                            paginationShow?: ((swiper: SwiperType) => void) | undefined;
                            scrollbarDragStart?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            scrollbarDragMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            scrollbarDragEnd?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            zoomChange?: ((swiper: SwiperType, scale: number, imageEl: HTMLElement, slideEl: HTMLElement) => void) | undefined;
                        } | undefined;
                        onAny?: ((handler: (eventName: string, ...args: any[]) => void) => void) | undefined;
                        cssMode?: boolean | undefined;
                        spaceBetween?: (number | string) | undefined;
                        slidesPerView?: (number | "auto") | undefined;
                        maxBackfaceHiddenSlides?: number | undefined;
                        slidesPerGroup?: number | undefined;
                        slidesPerGroupSkip?: number | undefined;
                        slidesPerGroupAuto?: boolean | undefined;
                        centeredSlides?: boolean | undefined;
                        centeredSlidesBounds?: boolean | undefined;
                        slidesOffsetBefore?: number | undefined;
                        slidesOffsetAfter?: number | undefined;
                        normalizeSlideIndex?: boolean | undefined;
                        centerInsufficientSlides?: boolean | undefined;
                        grabCursor?: boolean | undefined;
                        touchEventsTarget?: ("container" | "wrapper") | undefined;
                        touchRatio?: number | undefined;
                        touchAngle?: number | undefined;
                        simulateTouch?: boolean | undefined;
                        shortSwipes?: boolean | undefined;
                        longSwipes?: boolean | undefined;
                        longSwipesRatio?: number | undefined;
                        longSwipesMs?: number | undefined;
                        followFinger?: boolean | undefined;
                        allowTouchMove?: boolean | undefined;
                        threshold?: number | undefined;
                        touchStartPreventDefault?: boolean | undefined;
                        touchStartForcePreventDefault?: boolean | undefined;
                        touchMoveStopPropagation?: boolean | undefined;
                        edgeSwipeDetection?: (boolean | string) | undefined;
                        edgeSwipeThreshold?: number | undefined;
                        touchReleaseOnEdges?: boolean | undefined;
                        passiveListeners?: boolean | undefined;
                        resistance?: boolean | undefined;
                        resistanceRatio?: number | undefined;
                        preventInteractionOnTransition?: boolean | undefined;
                        allowSlidePrev?: boolean | undefined;
                        allowSlideNext?: boolean | undefined;
                        noSwiping?: boolean | undefined;
                        noSwipingClass?: string | undefined;
                        noSwipingSelector?: string | undefined;
                        swipeHandler?: HTMLElement | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | null | undefined;
                        preventClicks?: boolean | undefined;
                        preventClicksPropagation?: boolean | undefined;
                        slideToClickedSlide?: boolean | undefined;
                        watchSlidesProgress?: boolean | undefined;
                        loop?: boolean | undefined;
                        loopAddBlankSlides?: boolean | undefined;
                        loopAdditionalSlides?: number | undefined;
                        loopPreventsSliding?: boolean | undefined;
                        rewind?: boolean | undefined;
                        breakpoints?: {
                            [width: number]: import('swiper/types').SwiperOptions;
                            [ratio: string]: import('swiper/types').SwiperOptions;
                        } | undefined;
                        breakpointsBase?: ("window" | "container") | undefined;
                        observer?: boolean | undefined;
                        observeSlideChildren?: boolean | undefined;
                        observeParents?: boolean | undefined;
                        containerModifierClass?: string | undefined;
                        slideClass?: string | undefined;
                        slideActiveClass?: string | undefined;
                        slideVisibleClass?: string | undefined;
                        slideFullyVisibleClass?: string | undefined;
                        slideBlankClass?: string | undefined;
                        slideNextClass?: string | undefined;
                        slidePrevClass?: string | undefined;
                        wrapperClass?: string | undefined;
                        lazyPreloaderClass?: string | undefined;
                        lazyPreloadPrevNext?: number | undefined;
                        a11y?: {
                            enabled?: boolean | undefined;
                            prevSlideMessage?: string | undefined;
                            nextSlideMessage?: string | undefined;
                            firstSlideMessage?: string | undefined;
                            lastSlideMessage?: string | undefined;
                            paginationBulletMessage?: string | undefined;
                            notificationClass?: string | undefined;
                            containerMessage?: (string | null) | undefined;
                            containerRoleDescriptionMessage?: (string | null) | undefined;
                            containerRole?: (string | null) | undefined;
                            itemRoleDescriptionMessage?: (string | null) | undefined;
                            slideLabelMessage?: string | undefined;
                            slideRole?: string | undefined;
                            id?: (string | number | null) | undefined;
                            scrollOnFocus?: boolean | undefined;
                        } | undefined;
                        autoplay?: boolean | {
                            delay?: number | undefined;
                            stopOnLastSlide?: boolean | undefined;
                            disableOnInteraction?: boolean | undefined;
                            reverseDirection?: boolean | undefined;
                            waitForTransition?: boolean | undefined;
                            pauseOnMouseEnter?: boolean | undefined;
                        } | undefined;
                        controller?: {
                            control?: string | HTMLElement | any | any[] | null | undefined;
                            inverse?: boolean | undefined;
                            by?: ("slide" | "container") | undefined;
                        } | undefined;
                        coverflowEffect?: {
                            slideShadows?: boolean | undefined;
                            rotate?: number | undefined;
                            stretch?: number | undefined;
                            depth?: number | undefined;
                            scale?: number | undefined;
                            modifier?: number | undefined;
                        } | undefined;
                        cubeEffect?: {
                            slideShadows?: boolean | undefined;
                            shadow?: boolean | undefined;
                            shadowOffset?: number | undefined;
                            shadowScale?: number | undefined;
                        } | undefined;
                        fadeEffect?: {
                            crossFade?: boolean | undefined;
                        } | undefined;
                        flipEffect?: {
                            slideShadows?: boolean | undefined;
                            limitRotation?: boolean | undefined;
                        } | undefined;
                        creativeEffect?: {
                            prev?: {
                                translate?: (string | number)[] | undefined;
                                rotate?: number[] | undefined;
                                opacity?: number | undefined;
                                scale?: number | undefined;
                                shadow?: boolean | undefined;
                                origin?: string | undefined;
                            } | undefined;
                            next?: {
                                translate?: (string | number)[] | undefined;
                                rotate?: number[] | undefined;
                                opacity?: number | undefined;
                                scale?: number | undefined;
                                shadow?: boolean | undefined;
                                origin?: string | undefined;
                            } | undefined;
                            limitProgress?: number | undefined;
                            shadowPerProgress?: boolean | undefined;
                            progressMultiplier?: number | undefined;
                            perspective?: boolean | undefined;
                        } | undefined;
                        cardsEffect?: {
                            slideShadows?: boolean | undefined;
                            rotate?: boolean | undefined;
                            perSlideRotate?: number | undefined;
                            perSlideOffset?: number | undefined;
                        } | undefined;
                        hashNavigation?: boolean | {
                            watchState?: boolean | undefined;
                            replaceState?: boolean | undefined;
                            getSlideIndex?: ((swiper: SwiperType, hash: string) => number) | undefined;
                        } | undefined;
                        history?: boolean | {
                            enabled?: boolean | undefined;
                            root?: string | undefined;
                            replaceState?: boolean | undefined;
                            key?: string | undefined;
                            keepQuery?: boolean | undefined;
                        } | undefined;
                        keyboard?: boolean | {
                            enabled?: boolean | undefined;
                            onlyInViewport?: boolean | undefined;
                            pageUpDown?: boolean | undefined;
                        } | undefined;
                        mousewheel?: boolean | {
                            enabled?: boolean | undefined;
                            forceToAxis?: boolean | undefined;
                            releaseOnEdges?: boolean | undefined;
                            invert?: boolean | undefined;
                            sensitivity?: number | undefined;
                            eventsTarget?: HTMLElement | "container" | "wrapper" | {
                                readonly [x: number]: string;
                                toString: () => string;
                                charAt: (pos: number) => string;
                                charCodeAt: (index: number) => number;
                                concat: (...strings: string[]) => string;
                                indexOf: (searchString: string, position?: number) => number;
                                lastIndexOf: (searchString: string, position?: number) => number;
                                localeCompare: {
                                    (that: string): number;
                                    (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                    (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                                };
                                match: {
                                    (regexp: string | RegExp): RegExpMatchArray | null;
                                    (matcher: {
                                        [Symbol.match](string: string): RegExpMatchArray | null;
                                    }): RegExpMatchArray | null;
                                };
                                replace: {
                                    (searchValue: string | RegExp, replaceValue: string): string;
                                    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replaceValue: string): string;
                                    }, replaceValue: string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                    }, replacer: (substring: string, ...args: any[]) => string): string;
                                };
                                search: {
                                    (regexp: string | RegExp): number;
                                    (searcher: {
                                        [Symbol.search](string: string): number;
                                    }): number;
                                };
                                slice: (start?: number, end?: number) => string;
                                split: {
                                    (separator: string | RegExp, limit?: number): string[];
                                    (splitter: {
                                        [Symbol.split](string: string, limit?: number): string[];
                                    }, limit?: number): string[];
                                };
                                substring: (start: number, end?: number) => string;
                                toLowerCase: () => string;
                                toLocaleLowerCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                toUpperCase: () => string;
                                toLocaleUpperCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                trim: () => string;
                                readonly length: number;
                                substr: (from: number, length?: number) => string;
                                valueOf: () => string;
                                codePointAt: (pos: number) => number | undefined;
                                includes: (searchString: string, position?: number) => boolean;
                                endsWith: (searchString: string, endPosition?: number) => boolean;
                                normalize: {
                                    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                    (form?: string): string;
                                };
                                repeat: (count: number) => string;
                                startsWith: (searchString: string, position?: number) => boolean;
                                anchor: (name: string) => string;
                                big: () => string;
                                blink: () => string;
                                bold: () => string;
                                fixed: () => string;
                                fontcolor: (color: string) => string;
                                fontsize: {
                                    (size: number): string;
                                    (size: string): string;
                                };
                                italics: () => string;
                                link: (url: string) => string;
                                small: () => string;
                                strike: () => string;
                                sub: () => string;
                                sup: () => string;
                                padStart: (maxLength: number, fillString?: string) => string;
                                padEnd: (maxLength: number, fillString?: string) => string;
                                trimEnd: () => string;
                                trimStart: () => string;
                                trimLeft: () => string;
                                trimRight: () => string;
                                matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                                [Symbol.iterator]: () => StringIterator<string>;
                                at: (index: number) => string | undefined;
                            } | undefined;
                            thresholdDelta?: (number | null) | undefined;
                            thresholdTime?: (number | null) | undefined;
                            noMousewheelClass?: string | undefined;
                        } | undefined;
                        navigation?: boolean | {
                            enabled?: boolean | undefined;
                            nextEl?: HTMLElement | {
                                readonly [x: number]: string;
                                toString: () => string;
                                charAt: (pos: number) => string;
                                charCodeAt: (index: number) => number;
                                concat: (...strings: string[]) => string;
                                indexOf: (searchString: string, position?: number) => number;
                                lastIndexOf: (searchString: string, position?: number) => number;
                                localeCompare: {
                                    (that: string): number;
                                    (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                    (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                                };
                                match: {
                                    (regexp: string | RegExp): RegExpMatchArray | null;
                                    (matcher: {
                                        [Symbol.match](string: string): RegExpMatchArray | null;
                                    }): RegExpMatchArray | null;
                                };
                                replace: {
                                    (searchValue: string | RegExp, replaceValue: string): string;
                                    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replaceValue: string): string;
                                    }, replaceValue: string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                    }, replacer: (substring: string, ...args: any[]) => string): string;
                                };
                                search: {
                                    (regexp: string | RegExp): number;
                                    (searcher: {
                                        [Symbol.search](string: string): number;
                                    }): number;
                                };
                                slice: (start?: number, end?: number) => string;
                                split: {
                                    (separator: string | RegExp, limit?: number): string[];
                                    (splitter: {
                                        [Symbol.split](string: string, limit?: number): string[];
                                    }, limit?: number): string[];
                                };
                                substring: (start: number, end?: number) => string;
                                toLowerCase: () => string;
                                toLocaleLowerCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                toUpperCase: () => string;
                                toLocaleUpperCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                trim: () => string;
                                readonly length: number;
                                substr: (from: number, length?: number) => string;
                                valueOf: () => string;
                                codePointAt: (pos: number) => number | undefined;
                                includes: (searchString: string, position?: number) => boolean;
                                endsWith: (searchString: string, endPosition?: number) => boolean;
                                normalize: {
                                    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                    (form?: string): string;
                                };
                                repeat: (count: number) => string;
                                startsWith: (searchString: string, position?: number) => boolean;
                                anchor: (name: string) => string;
                                big: () => string;
                                blink: () => string;
                                bold: () => string;
                                fixed: () => string;
                                fontcolor: (color: string) => string;
                                fontsize: {
                                    (size: number): string;
                                    (size: string): string;
                                };
                                italics: () => string;
                                link: (url: string) => string;
                                small: () => string;
                                strike: () => string;
                                sub: () => string;
                                sup: () => string;
                                padStart: (maxLength: number, fillString?: string) => string;
                                padEnd: (maxLength: number, fillString?: string) => string;
                                trimEnd: () => string;
                                trimStart: () => string;
                                trimLeft: () => string;
                                trimRight: () => string;
                                matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                                [Symbol.iterator]: () => StringIterator<string>;
                                at: (index: number) => string | undefined;
                            } | null | undefined;
                            prevEl?: HTMLElement | {
                                readonly [x: number]: string;
                                toString: () => string;
                                charAt: (pos: number) => string;
                                charCodeAt: (index: number) => number;
                                concat: (...strings: string[]) => string;
                                indexOf: (searchString: string, position?: number) => number;
                                lastIndexOf: (searchString: string, position?: number) => number;
                                localeCompare: {
                                    (that: string): number;
                                    (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                    (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                                };
                                match: {
                                    (regexp: string | RegExp): RegExpMatchArray | null;
                                    (matcher: {
                                        [Symbol.match](string: string): RegExpMatchArray | null;
                                    }): RegExpMatchArray | null;
                                };
                                replace: {
                                    (searchValue: string | RegExp, replaceValue: string): string;
                                    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replaceValue: string): string;
                                    }, replaceValue: string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                    }, replacer: (substring: string, ...args: any[]) => string): string;
                                };
                                search: {
                                    (regexp: string | RegExp): number;
                                    (searcher: {
                                        [Symbol.search](string: string): number;
                                    }): number;
                                };
                                slice: (start?: number, end?: number) => string;
                                split: {
                                    (separator: string | RegExp, limit?: number): string[];
                                    (splitter: {
                                        [Symbol.split](string: string, limit?: number): string[];
                                    }, limit?: number): string[];
                                };
                                substring: (start: number, end?: number) => string;
                                toLowerCase: () => string;
                                toLocaleLowerCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                toUpperCase: () => string;
                                toLocaleUpperCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                trim: () => string;
                                readonly length: number;
                                substr: (from: number, length?: number) => string;
                                valueOf: () => string;
                                codePointAt: (pos: number) => number | undefined;
                                includes: (searchString: string, position?: number) => boolean;
                                endsWith: (searchString: string, endPosition?: number) => boolean;
                                normalize: {
                                    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                    (form?: string): string;
                                };
                                repeat: (count: number) => string;
                                startsWith: (searchString: string, position?: number) => boolean;
                                anchor: (name: string) => string;
                                big: () => string;
                                blink: () => string;
                                bold: () => string;
                                fixed: () => string;
                                fontcolor: (color: string) => string;
                                fontsize: {
                                    (size: number): string;
                                    (size: string): string;
                                };
                                italics: () => string;
                                link: (url: string) => string;
                                small: () => string;
                                strike: () => string;
                                sub: () => string;
                                sup: () => string;
                                padStart: (maxLength: number, fillString?: string) => string;
                                padEnd: (maxLength: number, fillString?: string) => string;
                                trimEnd: () => string;
                                trimStart: () => string;
                                trimLeft: () => string;
                                trimRight: () => string;
                                matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                                [Symbol.iterator]: () => StringIterator<string>;
                                at: (index: number) => string | undefined;
                            } | null | undefined;
                            hideOnClick?: boolean | undefined;
                            disabledClass?: string | undefined;
                            hiddenClass?: string | undefined;
                            lockClass?: string | undefined;
                            navigationDisabledClass?: string | undefined;
                        } | undefined;
                        pagination?: boolean | {
                            enabled?: boolean | undefined;
                            el?: HTMLElement | {
                                readonly [x: number]: string;
                                toString: () => string;
                                charAt: (pos: number) => string;
                                charCodeAt: (index: number) => number;
                                concat: (...strings: string[]) => string;
                                indexOf: (searchString: string, position?: number) => number;
                                lastIndexOf: (searchString: string, position?: number) => number;
                                localeCompare: {
                                    (that: string): number;
                                    (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                    (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                                };
                                match: {
                                    (regexp: string | RegExp): RegExpMatchArray | null;
                                    (matcher: {
                                        [Symbol.match](string: string): RegExpMatchArray | null;
                                    }): RegExpMatchArray | null;
                                };
                                replace: {
                                    (searchValue: string | RegExp, replaceValue: string): string;
                                    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replaceValue: string): string;
                                    }, replaceValue: string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                    }, replacer: (substring: string, ...args: any[]) => string): string;
                                };
                                search: {
                                    (regexp: string | RegExp): number;
                                    (searcher: {
                                        [Symbol.search](string: string): number;
                                    }): number;
                                };
                                slice: (start?: number, end?: number) => string;
                                split: {
                                    (separator: string | RegExp, limit?: number): string[];
                                    (splitter: {
                                        [Symbol.split](string: string, limit?: number): string[];
                                    }, limit?: number): string[];
                                };
                                substring: (start: number, end?: number) => string;
                                toLowerCase: () => string;
                                toLocaleLowerCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                toUpperCase: () => string;
                                toLocaleUpperCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                trim: () => string;
                                readonly length: number;
                                substr: (from: number, length?: number) => string;
                                valueOf: () => string;
                                codePointAt: (pos: number) => number | undefined;
                                includes: (searchString: string, position?: number) => boolean;
                                endsWith: (searchString: string, endPosition?: number) => boolean;
                                normalize: {
                                    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                    (form?: string): string;
                                };
                                repeat: (count: number) => string;
                                startsWith: (searchString: string, position?: number) => boolean;
                                anchor: (name: string) => string;
                                big: () => string;
                                blink: () => string;
                                bold: () => string;
                                fixed: () => string;
                                fontcolor: (color: string) => string;
                                fontsize: {
                                    (size: number): string;
                                    (size: string): string;
                                };
                                italics: () => string;
                                link: (url: string) => string;
                                small: () => string;
                                strike: () => string;
                                sub: () => string;
                                sup: () => string;
                                padStart: (maxLength: number, fillString?: string) => string;
                                padEnd: (maxLength: number, fillString?: string) => string;
                                trimEnd: () => string;
                                trimStart: () => string;
                                trimLeft: () => string;
                                trimRight: () => string;
                                matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                                [Symbol.iterator]: () => StringIterator<string>;
                                at: (index: number) => string | undefined;
                            } | null | undefined;
                            type?: ("bullets" | "fraction" | "progressbar" | "custom") | undefined;
                            bulletElement?: string | undefined;
                            dynamicBullets?: boolean | undefined;
                            dynamicMainBullets?: number | undefined;
                            hideOnClick?: boolean | undefined;
                            clickable?: boolean | undefined;
                            progressbarOpposite?: boolean | undefined;
                            formatFractionCurrent?: ((number: number) => number | string) | undefined;
                            formatFractionTotal?: ((number: number) => number | string) | undefined;
                            renderBullet?: ((index: number, className: string) => string) | undefined;
                            renderFraction?: ((currentClass: string, totalClass: string) => string) | undefined;
                            renderProgressbar?: ((progressbarFillClass: string) => string) | undefined;
                            renderCustom?: ((swiper: SwiperType, current: number, total: number) => string) | undefined;
                            bulletClass?: string | undefined;
                            bulletActiveClass?: string | undefined;
                            modifierClass?: string | undefined;
                            currentClass?: string | undefined;
                            totalClass?: string | undefined;
                            hiddenClass?: string | undefined;
                            progressbarFillClass?: string | undefined;
                            progressbarOppositeClass?: string | undefined;
                            clickableClass?: string | undefined;
                            lockClass?: string | undefined;
                            horizontalClass?: string | undefined;
                            verticalClass?: string | undefined;
                            paginationDisabledClass?: string | undefined;
                        } | undefined;
                        parallax?: boolean | {
                            enabled?: boolean | undefined;
                        } | undefined;
                        scrollbar?: boolean | {
                            enabled?: boolean | undefined;
                            el?: HTMLElement | {
                                readonly [x: number]: string;
                                toString: () => string;
                                charAt: (pos: number) => string;
                                charCodeAt: (index: number) => number;
                                concat: (...strings: string[]) => string;
                                indexOf: (searchString: string, position?: number) => number;
                                lastIndexOf: (searchString: string, position?: number) => number;
                                localeCompare: {
                                    (that: string): number;
                                    (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                    (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                                };
                                match: {
                                    (regexp: string | RegExp): RegExpMatchArray | null;
                                    (matcher: {
                                        [Symbol.match](string: string): RegExpMatchArray | null;
                                    }): RegExpMatchArray | null;
                                };
                                replace: {
                                    (searchValue: string | RegExp, replaceValue: string): string;
                                    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replaceValue: string): string;
                                    }, replaceValue: string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                    }, replacer: (substring: string, ...args: any[]) => string): string;
                                };
                                search: {
                                    (regexp: string | RegExp): number;
                                    (searcher: {
                                        [Symbol.search](string: string): number;
                                    }): number;
                                };
                                slice: (start?: number, end?: number) => string;
                                split: {
                                    (separator: string | RegExp, limit?: number): string[];
                                    (splitter: {
                                        [Symbol.split](string: string, limit?: number): string[];
                                    }, limit?: number): string[];
                                };
                                substring: (start: number, end?: number) => string;
                                toLowerCase: () => string;
                                toLocaleLowerCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                toUpperCase: () => string;
                                toLocaleUpperCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                trim: () => string;
                                readonly length: number;
                                substr: (from: number, length?: number) => string;
                                valueOf: () => string;
                                codePointAt: (pos: number) => number | undefined;
                                includes: (searchString: string, position?: number) => boolean;
                                endsWith: (searchString: string, endPosition?: number) => boolean;
                                normalize: {
                                    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                    (form?: string): string;
                                };
                                repeat: (count: number) => string;
                                startsWith: (searchString: string, position?: number) => boolean;
                                anchor: (name: string) => string;
                                big: () => string;
                                blink: () => string;
                                bold: () => string;
                                fixed: () => string;
                                fontcolor: (color: string) => string;
                                fontsize: {
                                    (size: number): string;
                                    (size: string): string;
                                };
                                italics: () => string;
                                link: (url: string) => string;
                                small: () => string;
                                strike: () => string;
                                sub: () => string;
                                sup: () => string;
                                padStart: (maxLength: number, fillString?: string) => string;
                                padEnd: (maxLength: number, fillString?: string) => string;
                                trimEnd: () => string;
                                trimStart: () => string;
                                trimLeft: () => string;
                                trimRight: () => string;
                                matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                                [Symbol.iterator]: () => StringIterator<string>;
                                at: (index: number) => string | undefined;
                            } | null | undefined;
                            hide?: boolean | undefined;
                            draggable?: boolean | undefined;
                            snapOnRelease?: boolean | undefined;
                            dragSize?: ("auto" | number) | undefined;
                            lockClass?: string | undefined;
                            dragClass?: string | undefined;
                            scrollbarDisabledClass?: string | undefined;
                            horizontalClass?: string | undefined;
                            verticalClass?: string | undefined;
                        } | undefined;
                        thumbs?: {
                            swiper?: string | any | null | undefined;
                            slideThumbActiveClass?: string | undefined;
                            thumbsContainerClass?: string | undefined;
                            multipleActiveThumbs?: boolean | undefined;
                            autoScrollOffset?: number | undefined;
                        } | undefined;
                        virtual?: boolean | {
                            enabled?: boolean | undefined;
                            slides?: any[] | undefined;
                            cache?: boolean | undefined;
                            addSlidesBefore?: number | undefined;
                            addSlidesAfter?: number | undefined;
                            renderSlide?: ((slide: any, index: any) => any | null) | undefined;
                            renderExternal?: ((data: import('swiper/types').VirtualData<any>) => any | null) | undefined;
                            renderExternalUpdate?: boolean | undefined;
                        } | undefined;
                        zoom?: boolean | {
                            limitToOriginalSize?: boolean | undefined;
                            maxRatio?: number | undefined;
                            minRatio?: number | undefined;
                            toggle?: boolean | undefined;
                            containerClass?: string | undefined;
                            zoomedSlideClass?: string | undefined;
                        } | undefined;
                        freeMode?: boolean | {
                            enabled?: boolean | undefined;
                            momentum?: boolean | undefined;
                            momentumRatio?: number | undefined;
                            momentumVelocityRatio?: number | undefined;
                            momentumBounce?: boolean | undefined;
                            momentumBounceRatio?: number | undefined;
                            minimumVelocity?: number | undefined;
                            sticky?: boolean | undefined;
                        } | undefined;
                        grid?: {
                            rows?: number | undefined;
                            fill?: ("row" | "column") | undefined;
                        } | undefined;
                        _emitClasses?: boolean | undefined;
                    };
                    el: HTMLElement;
                    wrapperEl: HTMLElement;
                    slidesEl: HTMLElement;
                    slides: HTMLElement[];
                    loopedSlides: number | null;
                    width: number;
                    height: number;
                    translate: number;
                    progress: number;
                    activeIndex: number;
                    realIndex: number;
                    previousIndex: number;
                    snapIndex: number;
                    snapGrid: number[];
                    slidesGrid: number[];
                    slidesSizesGrid: number[];
                    isBeginning: boolean;
                    isEnd: boolean;
                    isLocked: boolean;
                    animating: boolean;
                    touches: {
                        startX: number;
                        startY: number;
                        currentX: number;
                        currentY: number;
                        diff: number;
                    };
                    clickedIndex: number;
                    clickedSlide: HTMLElement;
                    allowSlideNext: boolean;
                    allowSlidePrev: boolean;
                    allowTouchMove: boolean;
                    swipeDirection: "prev" | "next";
                    rtlTranslate: boolean;
                    disable: () => void;
                    enable: () => void;
                    setProgress: (progress: number, speed?: number) => void;
                    slideNext: (speed?: number, runCallbacks?: boolean) => boolean;
                    slidePrev: (speed?: number, runCallbacks?: boolean) => boolean;
                    slideTo: (index: number, speed?: number, runCallbacks?: boolean) => boolean;
                    slideToLoop: (index: number, speed?: number, runCallbacks?: boolean) => SwiperType;
                    slideReset: (speed?: number, runCallbacks?: boolean) => boolean;
                    slideToClosest: (speed?: number, runCallbacks?: boolean) => boolean;
                    slidesPerViewDynamic: () => number;
                    updateAutoHeight: (speed?: number) => void;
                    update: () => void;
                    updateSize: () => void;
                    updateSlides: () => void;
                    updateProgress: () => void;
                    updateSlidesClasses: () => void;
                    changeDirection: (direction?: "horizontal" | "vertical", needUpdate?: boolean) => void;
                    changeLanguageDirection: (direction: "rtl" | "ltr") => void;
                    detachEvents: () => void;
                    attachEvents: () => void;
                    loopCreate: () => void;
                    loopDestroy: () => void;
                    init: (el?: HTMLElement) => SwiperType;
                    destroy: (deleteInstance?: boolean, cleanStyles?: boolean) => void;
                    setTranslate: (translate: any) => void;
                    getTranslate: () => any;
                    translateTo: (translate: number, speed: number, runCallbacks?: boolean, translateBounds?: boolean) => any;
                    minTranslate: () => number;
                    maxTranslate: () => number;
                    unsetGrabCursor: () => void;
                    setGrabCursor: () => void;
                    onAny: (handler: (eventName: string, ...args: any[]) => void) => void;
                    offAny: (handler: (eventName: string, ...args: any[]) => void) => void;
                    isHorizontal: () => boolean;
                    getBreakpoint: (breakpoints: import('swiper/types').SwiperOptions["breakpoints"]) => string;
                    setBreakpoint: () => void;
                    currentBreakpoint: any;
                    destroyed: boolean;
                    modules: Array<import('swiper/types').SwiperModule>;
                    a11y: import('swiper/types').A11yMethods;
                    autoplay: {
                        running: boolean;
                        paused: boolean;
                        timeLeft: number;
                        pause: () => void;
                        resume: () => void;
                        start: () => boolean;
                        stop: () => boolean;
                    };
                    controller: {
                        control?: any | any[] | undefined;
                    };
                    coverflowEffect: import('swiper/types').CoverflowEffectMethods;
                    cubeEffect: import('swiper/types').CubeEffectMethods;
                    fadeEffect: import('swiper/types').FadeEffectMethods;
                    flipEffect: import('swiper/types').FlipEffectMethods;
                    creativeEffect: import('swiper/types').CreativeEffectMethods;
                    cardsEffect: import('swiper/types').CardsEffectMethods;
                    hashNavigation: import('swiper/types').HashNavigationMethods;
                    history: import('swiper/types').HistoryMethods;
                    keyboard: {
                        enabled: boolean;
                        enable: () => void;
                        disable: () => void;
                    };
                    mousewheel: {
                        enabled: boolean;
                        enable: () => void;
                        disable: () => void;
                    };
                    navigation: {
                        nextEl: HTMLElement;
                        prevEl: HTMLElement;
                        update: () => void;
                        init: () => void;
                        destroy: () => void;
                    };
                    pagination: {
                        el: HTMLElement;
                        bullets: HTMLElement[];
                        render: () => void;
                        update: () => void;
                        init: () => void;
                        destroy: () => void;
                    };
                    parallax: import('swiper/types').ParallaxMethods;
                    scrollbar: {
                        el: HTMLElement;
                        dragEl: HTMLElement;
                        updateSize: () => void;
                        setTranslate: () => void;
                        init: () => void;
                        destroy: () => void;
                    };
                    thumbs: {
                        swiper: any;
                        update: (initial: boolean) => void;
                        init: () => boolean;
                    };
                    virtual: {
                        cache: object;
                        from: number;
                        to: number;
                        slides: any[];
                        appendSlide: (slide: HTMLElement | string | HTMLElement[] | string[]) => void;
                        prependSlide: (slide: HTMLElement | string | HTMLElement[] | string[]) => void;
                        removeSlide: (slideIndexes: number[]) => void;
                        removeAllSlides: () => void;
                        update: (force: boolean) => void;
                    };
                    zoom: {
                        enabled: boolean;
                        scale: number;
                        enable: () => void;
                        disable: () => void;
                        in: (ratio?: number) => void;
                        out: () => void;
                        toggle: (event?: MouseEvent | TouchEvent | PointerEvent) => void;
                    };
                    freeMode: {
                        onTouchMove: () => void;
                        onTouchEnd: () => void;
                    };
                    on: <E extends keyof import('swiper/types').SwiperEvents>(event: E, handler: import('swiper/types').SwiperEvents[E]) => void;
                    once: <E extends keyof import('swiper/types').SwiperEvents>(event: E, handler: import('swiper/types').SwiperEvents[E]) => void;
                    off: {
                        <E extends keyof import('swiper/types').SwiperEvents>(event: E, handler: import('swiper/types').SwiperEvents[E]): void;
                        <E extends keyof import('swiper/types').SwiperEvents>(event: E): void;
                    };
                    emit: <E extends keyof import('swiper/types').SwiperEvents>(event: E, ...args: any[]) => void;
                    appendSlide: (slides: HTMLElement | string | string[] | HTMLElement[]) => void;
                    prependSlide: (slides: HTMLElement | string | string[] | HTMLElement[]) => void;
                    addSlide: (index: number, slides: HTMLElement | string | string[] | HTMLElement[]) => void;
                    removeSlide: (slideIndex: number | number[]) => void;
                    removeAllSlides: () => void;
                } | null>;
            }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
                "update:activeSlideIdx": (activeSlideIdx: number) => any;
            }, string, {
                width: string | number;
                height: string | number;
                direction: "horizontal" | "vertical";
                transitionDelay: number | string;
                initialSlide: number;
                slidesPerView: number;
                mousewheel: boolean;
                navigation: boolean;
                navDirection: "horizontal" | "vertical";
                navAlign: "center" | "start" | "end";
                navSize: string | number;
                navColor: string;
                navDisabledColor: string;
                transitionFun: string;
                transitionSpeed: number;
                swiperOverflow: string;
                enableSlideClick: boolean;
                slideClickHandler: (swiper: SwiperType) => void;
            }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & {
                beforeCreate?: (() => void) | (() => void)[];
                created?: (() => void) | (() => void)[];
                beforeMount?: (() => void) | (() => void)[];
                mounted?: (() => void) | (() => void)[];
                beforeUpdate?: (() => void) | (() => void)[];
                updated?: (() => void) | (() => void)[];
                activated?: (() => void) | (() => void)[];
                deactivated?: (() => void) | (() => void)[];
                beforeDestroy?: (() => void) | (() => void)[];
                beforeUnmount?: (() => void) | (() => void)[];
                destroyed?: (() => void) | (() => void)[];
                unmounted?: (() => void) | (() => void)[];
                renderTracked?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
                renderTriggered?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
                errorCaptured?: ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void) | ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void)[];
            };
            $forceUpdate: () => void;
            $nextTick: typeof import('vue').nextTick;
            $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (...args: [R, R, import('@vue/reactivity').OnCleanup]) => any : (...args: [any, any, import('@vue/reactivity').OnCleanup]) => any, options?: import('vue').WatchOptions): import('vue').WatchStopHandle;
        } & Readonly<{
            width: string | number;
            height: string | number;
            direction: "horizontal" | "vertical";
            transitionDelay: number | string;
            initialSlide: number;
            slidesPerView: number;
            mousewheel: boolean;
            navigation: boolean;
            navDirection: "horizontal" | "vertical";
            navAlign: "center" | "start" | "end";
            navSize: string | number;
            navColor: string;
            navDisabledColor: string;
            transitionFun: string;
            transitionSpeed: number;
            swiperOverflow: string;
            enableSlideClick: boolean;
            slideClickHandler: (swiper: SwiperType) => void;
        }> & Omit<Readonly<{
            activeSlideIdx?: number;
        } & {
            width?: string | number;
            height?: string | number;
            initialSlide?: number;
            direction?: "horizontal" | "vertical";
            slidesPerView?: number;
            slidesOffsetBefore?: number;
            slidesOffsetAfter?: number;
            mousewheel?: boolean;
            navigation?: boolean;
            navDirection?: "horizontal" | "vertical";
            navAlign?: "center" | "start" | "end";
            navSize?: string | number;
            navColor?: string;
            navDisabledColor?: string;
            transitionFun?: string;
            transitionSpeed?: number;
            transitionDelay?: number | string;
            controlSwiper?: SwiperType | SwiperType[];
            swiperOverflow?: string;
            enableSlideClick?: boolean;
            slideClickHandler?: (swiper: SwiperType) => void;
        }> & Readonly<{
            "onUpdate:activeSlideIdx"?: ((activeSlideIdx: number) => any) | undefined;
        }>, "swiper" | ("width" | "height" | "direction" | "transitionDelay" | "initialSlide" | "slidesPerView" | "mousewheel" | "navigation" | "navDirection" | "navAlign" | "navSize" | "navColor" | "navDisabledColor" | "transitionFun" | "transitionSpeed" | "swiperOverflow" | "enableSlideClick" | "slideClickHandler")> & import('vue').ShallowUnwrapRef<{
            swiper: import('vue').Ref<{
                params: {
                    modules?: import('swiper/types').SwiperModule[] | undefined;
                    injectStyles?: string[] | undefined;
                    injectStylesUrls?: string[] | undefined;
                    init?: boolean | undefined;
                    enabled?: boolean | undefined;
                    updateOnWindowResize?: boolean | undefined;
                    resizeObserver?: boolean | undefined;
                    initialSlide?: number | undefined;
                    direction?: ("horizontal" | "vertical") | undefined;
                    oneWayMovement?: boolean | undefined;
                    swiperElementNodeName?: string | undefined;
                    speed?: number | undefined;
                    setWrapperSize?: boolean | undefined;
                    virtualTranslate?: boolean | undefined;
                    width?: (number | null) | undefined;
                    height?: (number | null) | undefined;
                    autoHeight?: boolean | undefined;
                    roundLengths?: boolean | undefined;
                    nested?: boolean | undefined;
                    createElements?: boolean | undefined;
                    eventsPrefix?: string | undefined;
                    focusableElements?: string | undefined;
                    uniqueNavElements?: boolean | undefined;
                    effect?: ("slide" | "fade" | "cube" | "coverflow" | "flip" | "creative" | "cards" | string) | undefined;
                    runCallbacksOnInit?: boolean | undefined;
                    watchOverflow?: boolean | undefined;
                    userAgent?: (string | null) | undefined;
                    url?: (string | null) | undefined;
                    on?: {
                        init?: ((swiper: SwiperType) => any) | undefined;
                        beforeDestroy?: ((swiper: SwiperType) => void) | undefined;
                        slidesUpdated?: ((swiper: SwiperType) => void) | undefined;
                        slideChange?: ((swiper: SwiperType) => void) | undefined;
                        slideChangeTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                        slideChangeTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                        slideNextTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                        slideNextTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                        slidePrevTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                        slidePrevTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                        transitionStart?: ((swiper: SwiperType) => void) | undefined;
                        transitionEnd?: ((swiper: SwiperType) => void) | undefined;
                        touchStart?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        touchMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        touchMoveOpposite?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        sliderMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        touchEnd?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        click?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        tap?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        doubleTap?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        progress?: ((swiper: SwiperType, progress: number) => void) | undefined;
                        reachBeginning?: ((swiper: SwiperType) => void) | undefined;
                        reachEnd?: ((swiper: SwiperType) => void) | undefined;
                        toEdge?: ((swiper: SwiperType) => void) | undefined;
                        fromEdge?: ((swiper: SwiperType) => void) | undefined;
                        setTranslate?: ((swiper: SwiperType, translate: number) => void) | undefined;
                        setTransition?: ((swiper: SwiperType, transition: number) => void) | undefined;
                        resize?: ((swiper: SwiperType) => void) | undefined;
                        observerUpdate?: ((swiper: SwiperType) => void) | undefined;
                        beforeLoopFix?: ((swiper: SwiperType) => void) | undefined;
                        loopFix?: ((swiper: SwiperType) => void) | undefined;
                        breakpoint?: ((swiper: SwiperType, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                        _beforeBreakpoint?: ((swiper: SwiperType, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                        _containerClasses?: ((swiper: SwiperType, classNames: string) => void) | undefined;
                        _slideClass?: ((swiper: SwiperType, slideEl: HTMLElement, classNames: string) => void) | undefined;
                        _slideClasses?: ((swiper: SwiperType, slides: {
                            slideEl: HTMLElement;
                            classNames: string;
                            index: number;
                        }[]) => void) | undefined;
                        _swiper?: ((swiper: SwiperType) => void) | undefined;
                        _freeModeNoMomentumRelease?: ((swiper: SwiperType) => void) | undefined;
                        activeIndexChange?: ((swiper: SwiperType) => void) | undefined;
                        snapIndexChange?: ((swiper: SwiperType) => void) | undefined;
                        realIndexChange?: ((swiper: SwiperType) => void) | undefined;
                        afterInit?: ((swiper: SwiperType) => void) | undefined;
                        beforeInit?: ((swiper: SwiperType) => void) | undefined;
                        beforeResize?: ((swiper: SwiperType) => void) | undefined;
                        beforeSlideChangeStart?: ((swiper: SwiperType) => void) | undefined;
                        beforeTransitionStart?: ((swiper: SwiperType, speed: number, internal: any) => void) | undefined;
                        changeDirection?: ((swiper: SwiperType) => void) | undefined;
                        doubleClick?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        destroy?: ((swiper: SwiperType) => void) | undefined;
                        momentumBounce?: ((swiper: SwiperType) => void) | undefined;
                        orientationchange?: ((swiper: SwiperType) => void) | undefined;
                        slideResetTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                        slideResetTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                        sliderFirstMove?: ((swiper: SwiperType, event: TouchEvent) => void) | undefined;
                        slidesLengthChange?: ((swiper: SwiperType) => void) | undefined;
                        slidesGridLengthChange?: ((swiper: SwiperType) => void) | undefined;
                        snapGridLengthChange?: ((swiper: SwiperType) => void) | undefined;
                        update?: ((swiper: SwiperType) => void) | undefined;
                        lock?: ((swiper: SwiperType) => void) | undefined;
                        unlock?: ((swiper: SwiperType) => void) | undefined;
                        autoplayStart?: ((swiper: SwiperType) => void) | undefined;
                        autoplayStop?: ((swiper: SwiperType) => void) | undefined;
                        autoplayPause?: ((swiper: SwiperType) => void) | undefined;
                        autoplayResume?: ((swiper: SwiperType) => void) | undefined;
                        autoplayTimeLeft?: ((swiper: SwiperType, timeLeft: number, percentage: number) => void) | undefined;
                        autoplay?: ((swiper: SwiperType) => void) | undefined;
                        hashChange?: ((swiper: SwiperType) => void) | undefined;
                        hashSet?: ((swiper: SwiperType) => void) | undefined;
                        keyPress?: ((swiper: SwiperType, keyCode: string) => void) | undefined;
                        scroll?: ((swiper: SwiperType, event: WheelEvent) => void) | undefined;
                        navigationHide?: ((swiper: SwiperType) => void) | undefined;
                        navigationShow?: ((swiper: SwiperType) => void) | undefined;
                        navigationPrev?: ((swiper: SwiperType) => void) | undefined;
                        navigationNext?: ((swiper: SwiperType) => void) | undefined;
                        paginationRender?: ((swiper: SwiperType, paginationEl: HTMLElement) => void) | undefined;
                        paginationUpdate?: ((swiper: SwiperType, paginationEl: HTMLElement) => void) | undefined;
                        paginationHide?: ((swiper: SwiperType) => void) | undefined;
                        paginationShow?: ((swiper: SwiperType) => void) | undefined;
                        scrollbarDragStart?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        scrollbarDragMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        scrollbarDragEnd?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        zoomChange?: ((swiper: SwiperType, scale: number, imageEl: HTMLElement, slideEl: HTMLElement) => void) | undefined;
                    } | undefined;
                    onAny?: ((handler: (eventName: string, ...args: any[]) => void) => void) | undefined;
                    cssMode?: boolean | undefined;
                    spaceBetween?: (number | string) | undefined;
                    slidesPerView?: (number | "auto") | undefined;
                    maxBackfaceHiddenSlides?: number | undefined;
                    slidesPerGroup?: number | undefined;
                    slidesPerGroupSkip?: number | undefined;
                    slidesPerGroupAuto?: boolean | undefined;
                    centeredSlides?: boolean | undefined;
                    centeredSlidesBounds?: boolean | undefined;
                    slidesOffsetBefore?: number | undefined;
                    slidesOffsetAfter?: number | undefined;
                    normalizeSlideIndex?: boolean | undefined;
                    centerInsufficientSlides?: boolean | undefined;
                    grabCursor?: boolean | undefined;
                    touchEventsTarget?: ("container" | "wrapper") | undefined;
                    touchRatio?: number | undefined;
                    touchAngle?: number | undefined;
                    simulateTouch?: boolean | undefined;
                    shortSwipes?: boolean | undefined;
                    longSwipes?: boolean | undefined;
                    longSwipesRatio?: number | undefined;
                    longSwipesMs?: number | undefined;
                    followFinger?: boolean | undefined;
                    allowTouchMove?: boolean | undefined;
                    threshold?: number | undefined;
                    touchStartPreventDefault?: boolean | undefined;
                    touchStartForcePreventDefault?: boolean | undefined;
                    touchMoveStopPropagation?: boolean | undefined;
                    edgeSwipeDetection?: (boolean | string) | undefined;
                    edgeSwipeThreshold?: number | undefined;
                    touchReleaseOnEdges?: boolean | undefined;
                    passiveListeners?: boolean | undefined;
                    resistance?: boolean | undefined;
                    resistanceRatio?: number | undefined;
                    preventInteractionOnTransition?: boolean | undefined;
                    allowSlidePrev?: boolean | undefined;
                    allowSlideNext?: boolean | undefined;
                    noSwiping?: boolean | undefined;
                    noSwipingClass?: string | undefined;
                    noSwipingSelector?: string | undefined;
                    swipeHandler?: HTMLElement | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | null | undefined;
                    preventClicks?: boolean | undefined;
                    preventClicksPropagation?: boolean | undefined;
                    slideToClickedSlide?: boolean | undefined;
                    watchSlidesProgress?: boolean | undefined;
                    loop?: boolean | undefined;
                    loopAddBlankSlides?: boolean | undefined;
                    loopAdditionalSlides?: number | undefined;
                    loopPreventsSliding?: boolean | undefined;
                    rewind?: boolean | undefined;
                    breakpoints?: {
                        [width: number]: import('swiper/types').SwiperOptions;
                        [ratio: string]: import('swiper/types').SwiperOptions;
                    } | undefined;
                    breakpointsBase?: ("window" | "container") | undefined;
                    observer?: boolean | undefined;
                    observeSlideChildren?: boolean | undefined;
                    observeParents?: boolean | undefined;
                    containerModifierClass?: string | undefined;
                    slideClass?: string | undefined;
                    slideActiveClass?: string | undefined;
                    slideVisibleClass?: string | undefined;
                    slideFullyVisibleClass?: string | undefined;
                    slideBlankClass?: string | undefined;
                    slideNextClass?: string | undefined;
                    slidePrevClass?: string | undefined;
                    wrapperClass?: string | undefined;
                    lazyPreloaderClass?: string | undefined;
                    lazyPreloadPrevNext?: number | undefined;
                    a11y?: {
                        enabled?: boolean | undefined;
                        prevSlideMessage?: string | undefined;
                        nextSlideMessage?: string | undefined;
                        firstSlideMessage?: string | undefined;
                        lastSlideMessage?: string | undefined;
                        paginationBulletMessage?: string | undefined;
                        notificationClass?: string | undefined;
                        containerMessage?: (string | null) | undefined;
                        containerRoleDescriptionMessage?: (string | null) | undefined;
                        containerRole?: (string | null) | undefined;
                        itemRoleDescriptionMessage?: (string | null) | undefined;
                        slideLabelMessage?: string | undefined;
                        slideRole?: string | undefined;
                        id?: (string | number | null) | undefined;
                        scrollOnFocus?: boolean | undefined;
                    } | undefined;
                    autoplay?: boolean | {
                        delay?: number | undefined;
                        stopOnLastSlide?: boolean | undefined;
                        disableOnInteraction?: boolean | undefined;
                        reverseDirection?: boolean | undefined;
                        waitForTransition?: boolean | undefined;
                        pauseOnMouseEnter?: boolean | undefined;
                    } | undefined;
                    controller?: {
                        control?: string | HTMLElement | any | any[] | null | undefined;
                        inverse?: boolean | undefined;
                        by?: ("slide" | "container") | undefined;
                    } | undefined;
                    coverflowEffect?: {
                        slideShadows?: boolean | undefined;
                        rotate?: number | undefined;
                        stretch?: number | undefined;
                        depth?: number | undefined;
                        scale?: number | undefined;
                        modifier?: number | undefined;
                    } | undefined;
                    cubeEffect?: {
                        slideShadows?: boolean | undefined;
                        shadow?: boolean | undefined;
                        shadowOffset?: number | undefined;
                        shadowScale?: number | undefined;
                    } | undefined;
                    fadeEffect?: {
                        crossFade?: boolean | undefined;
                    } | undefined;
                    flipEffect?: {
                        slideShadows?: boolean | undefined;
                        limitRotation?: boolean | undefined;
                    } | undefined;
                    creativeEffect?: {
                        prev?: {
                            translate?: (string | number)[] | undefined;
                            rotate?: number[] | undefined;
                            opacity?: number | undefined;
                            scale?: number | undefined;
                            shadow?: boolean | undefined;
                            origin?: string | undefined;
                        } | undefined;
                        next?: {
                            translate?: (string | number)[] | undefined;
                            rotate?: number[] | undefined;
                            opacity?: number | undefined;
                            scale?: number | undefined;
                            shadow?: boolean | undefined;
                            origin?: string | undefined;
                        } | undefined;
                        limitProgress?: number | undefined;
                        shadowPerProgress?: boolean | undefined;
                        progressMultiplier?: number | undefined;
                        perspective?: boolean | undefined;
                    } | undefined;
                    cardsEffect?: {
                        slideShadows?: boolean | undefined;
                        rotate?: boolean | undefined;
                        perSlideRotate?: number | undefined;
                        perSlideOffset?: number | undefined;
                    } | undefined;
                    hashNavigation?: boolean | {
                        watchState?: boolean | undefined;
                        replaceState?: boolean | undefined;
                        getSlideIndex?: ((swiper: SwiperType, hash: string) => number) | undefined;
                    } | undefined;
                    history?: boolean | {
                        enabled?: boolean | undefined;
                        root?: string | undefined;
                        replaceState?: boolean | undefined;
                        key?: string | undefined;
                        keepQuery?: boolean | undefined;
                    } | undefined;
                    keyboard?: boolean | {
                        enabled?: boolean | undefined;
                        onlyInViewport?: boolean | undefined;
                        pageUpDown?: boolean | undefined;
                    } | undefined;
                    mousewheel?: boolean | {
                        enabled?: boolean | undefined;
                        forceToAxis?: boolean | undefined;
                        releaseOnEdges?: boolean | undefined;
                        invert?: boolean | undefined;
                        sensitivity?: number | undefined;
                        eventsTarget?: HTMLElement | "container" | "wrapper" | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | undefined;
                        thresholdDelta?: (number | null) | undefined;
                        thresholdTime?: (number | null) | undefined;
                        noMousewheelClass?: string | undefined;
                    } | undefined;
                    navigation?: boolean | {
                        enabled?: boolean | undefined;
                        nextEl?: HTMLElement | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | null | undefined;
                        prevEl?: HTMLElement | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | null | undefined;
                        hideOnClick?: boolean | undefined;
                        disabledClass?: string | undefined;
                        hiddenClass?: string | undefined;
                        lockClass?: string | undefined;
                        navigationDisabledClass?: string | undefined;
                    } | undefined;
                    pagination?: boolean | {
                        enabled?: boolean | undefined;
                        el?: HTMLElement | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | null | undefined;
                        type?: ("bullets" | "fraction" | "progressbar" | "custom") | undefined;
                        bulletElement?: string | undefined;
                        dynamicBullets?: boolean | undefined;
                        dynamicMainBullets?: number | undefined;
                        hideOnClick?: boolean | undefined;
                        clickable?: boolean | undefined;
                        progressbarOpposite?: boolean | undefined;
                        formatFractionCurrent?: ((number: number) => number | string) | undefined;
                        formatFractionTotal?: ((number: number) => number | string) | undefined;
                        renderBullet?: ((index: number, className: string) => string) | undefined;
                        renderFraction?: ((currentClass: string, totalClass: string) => string) | undefined;
                        renderProgressbar?: ((progressbarFillClass: string) => string) | undefined;
                        renderCustom?: ((swiper: SwiperType, current: number, total: number) => string) | undefined;
                        bulletClass?: string | undefined;
                        bulletActiveClass?: string | undefined;
                        modifierClass?: string | undefined;
                        currentClass?: string | undefined;
                        totalClass?: string | undefined;
                        hiddenClass?: string | undefined;
                        progressbarFillClass?: string | undefined;
                        progressbarOppositeClass?: string | undefined;
                        clickableClass?: string | undefined;
                        lockClass?: string | undefined;
                        horizontalClass?: string | undefined;
                        verticalClass?: string | undefined;
                        paginationDisabledClass?: string | undefined;
                    } | undefined;
                    parallax?: boolean | {
                        enabled?: boolean | undefined;
                    } | undefined;
                    scrollbar?: boolean | {
                        enabled?: boolean | undefined;
                        el?: HTMLElement | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | null | undefined;
                        hide?: boolean | undefined;
                        draggable?: boolean | undefined;
                        snapOnRelease?: boolean | undefined;
                        dragSize?: ("auto" | number) | undefined;
                        lockClass?: string | undefined;
                        dragClass?: string | undefined;
                        scrollbarDisabledClass?: string | undefined;
                        horizontalClass?: string | undefined;
                        verticalClass?: string | undefined;
                    } | undefined;
                    thumbs?: {
                        swiper?: string | any | null | undefined;
                        slideThumbActiveClass?: string | undefined;
                        thumbsContainerClass?: string | undefined;
                        multipleActiveThumbs?: boolean | undefined;
                        autoScrollOffset?: number | undefined;
                    } | undefined;
                    virtual?: boolean | {
                        enabled?: boolean | undefined;
                        slides?: any[] | undefined;
                        cache?: boolean | undefined;
                        addSlidesBefore?: number | undefined;
                        addSlidesAfter?: number | undefined;
                        renderSlide?: ((slide: any, index: any) => any | null) | undefined;
                        renderExternal?: ((data: import('swiper/types').VirtualData<any>) => any | null) | undefined;
                        renderExternalUpdate?: boolean | undefined;
                    } | undefined;
                    zoom?: boolean | {
                        limitToOriginalSize?: boolean | undefined;
                        maxRatio?: number | undefined;
                        minRatio?: number | undefined;
                        toggle?: boolean | undefined;
                        containerClass?: string | undefined;
                        zoomedSlideClass?: string | undefined;
                    } | undefined;
                    freeMode?: boolean | {
                        enabled?: boolean | undefined;
                        momentum?: boolean | undefined;
                        momentumRatio?: number | undefined;
                        momentumVelocityRatio?: number | undefined;
                        momentumBounce?: boolean | undefined;
                        momentumBounceRatio?: number | undefined;
                        minimumVelocity?: number | undefined;
                        sticky?: boolean | undefined;
                    } | undefined;
                    grid?: {
                        rows?: number | undefined;
                        fill?: ("row" | "column") | undefined;
                    } | undefined;
                    _emitClasses?: boolean | undefined;
                };
                originalParams: {
                    modules?: import('swiper/types').SwiperModule[] | undefined;
                    injectStyles?: string[] | undefined;
                    injectStylesUrls?: string[] | undefined;
                    init?: boolean | undefined;
                    enabled?: boolean | undefined;
                    updateOnWindowResize?: boolean | undefined;
                    resizeObserver?: boolean | undefined;
                    initialSlide?: number | undefined;
                    direction?: ("horizontal" | "vertical") | undefined;
                    oneWayMovement?: boolean | undefined;
                    swiperElementNodeName?: string | undefined;
                    speed?: number | undefined;
                    setWrapperSize?: boolean | undefined;
                    virtualTranslate?: boolean | undefined;
                    width?: (number | null) | undefined;
                    height?: (number | null) | undefined;
                    autoHeight?: boolean | undefined;
                    roundLengths?: boolean | undefined;
                    nested?: boolean | undefined;
                    createElements?: boolean | undefined;
                    eventsPrefix?: string | undefined;
                    focusableElements?: string | undefined;
                    uniqueNavElements?: boolean | undefined;
                    effect?: ("slide" | "fade" | "cube" | "coverflow" | "flip" | "creative" | "cards" | string) | undefined;
                    runCallbacksOnInit?: boolean | undefined;
                    watchOverflow?: boolean | undefined;
                    userAgent?: (string | null) | undefined;
                    url?: (string | null) | undefined;
                    on?: {
                        init?: ((swiper: SwiperType) => any) | undefined;
                        beforeDestroy?: ((swiper: SwiperType) => void) | undefined;
                        slidesUpdated?: ((swiper: SwiperType) => void) | undefined;
                        slideChange?: ((swiper: SwiperType) => void) | undefined;
                        slideChangeTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                        slideChangeTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                        slideNextTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                        slideNextTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                        slidePrevTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                        slidePrevTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                        transitionStart?: ((swiper: SwiperType) => void) | undefined;
                        transitionEnd?: ((swiper: SwiperType) => void) | undefined;
                        touchStart?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        touchMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        touchMoveOpposite?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        sliderMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        touchEnd?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        click?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        tap?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        doubleTap?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        progress?: ((swiper: SwiperType, progress: number) => void) | undefined;
                        reachBeginning?: ((swiper: SwiperType) => void) | undefined;
                        reachEnd?: ((swiper: SwiperType) => void) | undefined;
                        toEdge?: ((swiper: SwiperType) => void) | undefined;
                        fromEdge?: ((swiper: SwiperType) => void) | undefined;
                        setTranslate?: ((swiper: SwiperType, translate: number) => void) | undefined;
                        setTransition?: ((swiper: SwiperType, transition: number) => void) | undefined;
                        resize?: ((swiper: SwiperType) => void) | undefined;
                        observerUpdate?: ((swiper: SwiperType) => void) | undefined;
                        beforeLoopFix?: ((swiper: SwiperType) => void) | undefined;
                        loopFix?: ((swiper: SwiperType) => void) | undefined;
                        breakpoint?: ((swiper: SwiperType, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                        _beforeBreakpoint?: ((swiper: SwiperType, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                        _containerClasses?: ((swiper: SwiperType, classNames: string) => void) | undefined;
                        _slideClass?: ((swiper: SwiperType, slideEl: HTMLElement, classNames: string) => void) | undefined;
                        _slideClasses?: ((swiper: SwiperType, slides: {
                            slideEl: HTMLElement;
                            classNames: string;
                            index: number;
                        }[]) => void) | undefined;
                        _swiper?: ((swiper: SwiperType) => void) | undefined;
                        _freeModeNoMomentumRelease?: ((swiper: SwiperType) => void) | undefined;
                        activeIndexChange?: ((swiper: SwiperType) => void) | undefined;
                        snapIndexChange?: ((swiper: SwiperType) => void) | undefined;
                        realIndexChange?: ((swiper: SwiperType) => void) | undefined;
                        afterInit?: ((swiper: SwiperType) => void) | undefined;
                        beforeInit?: ((swiper: SwiperType) => void) | undefined;
                        beforeResize?: ((swiper: SwiperType) => void) | undefined;
                        beforeSlideChangeStart?: ((swiper: SwiperType) => void) | undefined;
                        beforeTransitionStart?: ((swiper: SwiperType, speed: number, internal: any) => void) | undefined;
                        changeDirection?: ((swiper: SwiperType) => void) | undefined;
                        doubleClick?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        destroy?: ((swiper: SwiperType) => void) | undefined;
                        momentumBounce?: ((swiper: SwiperType) => void) | undefined;
                        orientationchange?: ((swiper: SwiperType) => void) | undefined;
                        slideResetTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                        slideResetTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                        sliderFirstMove?: ((swiper: SwiperType, event: TouchEvent) => void) | undefined;
                        slidesLengthChange?: ((swiper: SwiperType) => void) | undefined;
                        slidesGridLengthChange?: ((swiper: SwiperType) => void) | undefined;
                        snapGridLengthChange?: ((swiper: SwiperType) => void) | undefined;
                        update?: ((swiper: SwiperType) => void) | undefined;
                        lock?: ((swiper: SwiperType) => void) | undefined;
                        unlock?: ((swiper: SwiperType) => void) | undefined;
                        autoplayStart?: ((swiper: SwiperType) => void) | undefined;
                        autoplayStop?: ((swiper: SwiperType) => void) | undefined;
                        autoplayPause?: ((swiper: SwiperType) => void) | undefined;
                        autoplayResume?: ((swiper: SwiperType) => void) | undefined;
                        autoplayTimeLeft?: ((swiper: SwiperType, timeLeft: number, percentage: number) => void) | undefined;
                        autoplay?: ((swiper: SwiperType) => void) | undefined;
                        hashChange?: ((swiper: SwiperType) => void) | undefined;
                        hashSet?: ((swiper: SwiperType) => void) | undefined;
                        keyPress?: ((swiper: SwiperType, keyCode: string) => void) | undefined;
                        scroll?: ((swiper: SwiperType, event: WheelEvent) => void) | undefined;
                        navigationHide?: ((swiper: SwiperType) => void) | undefined;
                        navigationShow?: ((swiper: SwiperType) => void) | undefined;
                        navigationPrev?: ((swiper: SwiperType) => void) | undefined;
                        navigationNext?: ((swiper: SwiperType) => void) | undefined;
                        paginationRender?: ((swiper: SwiperType, paginationEl: HTMLElement) => void) | undefined;
                        paginationUpdate?: ((swiper: SwiperType, paginationEl: HTMLElement) => void) | undefined;
                        paginationHide?: ((swiper: SwiperType) => void) | undefined;
                        paginationShow?: ((swiper: SwiperType) => void) | undefined;
                        scrollbarDragStart?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        scrollbarDragMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        scrollbarDragEnd?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        zoomChange?: ((swiper: SwiperType, scale: number, imageEl: HTMLElement, slideEl: HTMLElement) => void) | undefined;
                    } | undefined;
                    onAny?: ((handler: (eventName: string, ...args: any[]) => void) => void) | undefined;
                    cssMode?: boolean | undefined;
                    spaceBetween?: (number | string) | undefined;
                    slidesPerView?: (number | "auto") | undefined;
                    maxBackfaceHiddenSlides?: number | undefined;
                    slidesPerGroup?: number | undefined;
                    slidesPerGroupSkip?: number | undefined;
                    slidesPerGroupAuto?: boolean | undefined;
                    centeredSlides?: boolean | undefined;
                    centeredSlidesBounds?: boolean | undefined;
                    slidesOffsetBefore?: number | undefined;
                    slidesOffsetAfter?: number | undefined;
                    normalizeSlideIndex?: boolean | undefined;
                    centerInsufficientSlides?: boolean | undefined;
                    grabCursor?: boolean | undefined;
                    touchEventsTarget?: ("container" | "wrapper") | undefined;
                    touchRatio?: number | undefined;
                    touchAngle?: number | undefined;
                    simulateTouch?: boolean | undefined;
                    shortSwipes?: boolean | undefined;
                    longSwipes?: boolean | undefined;
                    longSwipesRatio?: number | undefined;
                    longSwipesMs?: number | undefined;
                    followFinger?: boolean | undefined;
                    allowTouchMove?: boolean | undefined;
                    threshold?: number | undefined;
                    touchStartPreventDefault?: boolean | undefined;
                    touchStartForcePreventDefault?: boolean | undefined;
                    touchMoveStopPropagation?: boolean | undefined;
                    edgeSwipeDetection?: (boolean | string) | undefined;
                    edgeSwipeThreshold?: number | undefined;
                    touchReleaseOnEdges?: boolean | undefined;
                    passiveListeners?: boolean | undefined;
                    resistance?: boolean | undefined;
                    resistanceRatio?: number | undefined;
                    preventInteractionOnTransition?: boolean | undefined;
                    allowSlidePrev?: boolean | undefined;
                    allowSlideNext?: boolean | undefined;
                    noSwiping?: boolean | undefined;
                    noSwipingClass?: string | undefined;
                    noSwipingSelector?: string | undefined;
                    swipeHandler?: HTMLElement | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | null | undefined;
                    preventClicks?: boolean | undefined;
                    preventClicksPropagation?: boolean | undefined;
                    slideToClickedSlide?: boolean | undefined;
                    watchSlidesProgress?: boolean | undefined;
                    loop?: boolean | undefined;
                    loopAddBlankSlides?: boolean | undefined;
                    loopAdditionalSlides?: number | undefined;
                    loopPreventsSliding?: boolean | undefined;
                    rewind?: boolean | undefined;
                    breakpoints?: {
                        [width: number]: import('swiper/types').SwiperOptions;
                        [ratio: string]: import('swiper/types').SwiperOptions;
                    } | undefined;
                    breakpointsBase?: ("window" | "container") | undefined;
                    observer?: boolean | undefined;
                    observeSlideChildren?: boolean | undefined;
                    observeParents?: boolean | undefined;
                    containerModifierClass?: string | undefined;
                    slideClass?: string | undefined;
                    slideActiveClass?: string | undefined;
                    slideVisibleClass?: string | undefined;
                    slideFullyVisibleClass?: string | undefined;
                    slideBlankClass?: string | undefined;
                    slideNextClass?: string | undefined;
                    slidePrevClass?: string | undefined;
                    wrapperClass?: string | undefined;
                    lazyPreloaderClass?: string | undefined;
                    lazyPreloadPrevNext?: number | undefined;
                    a11y?: {
                        enabled?: boolean | undefined;
                        prevSlideMessage?: string | undefined;
                        nextSlideMessage?: string | undefined;
                        firstSlideMessage?: string | undefined;
                        lastSlideMessage?: string | undefined;
                        paginationBulletMessage?: string | undefined;
                        notificationClass?: string | undefined;
                        containerMessage?: (string | null) | undefined;
                        containerRoleDescriptionMessage?: (string | null) | undefined;
                        containerRole?: (string | null) | undefined;
                        itemRoleDescriptionMessage?: (string | null) | undefined;
                        slideLabelMessage?: string | undefined;
                        slideRole?: string | undefined;
                        id?: (string | number | null) | undefined;
                        scrollOnFocus?: boolean | undefined;
                    } | undefined;
                    autoplay?: boolean | {
                        delay?: number | undefined;
                        stopOnLastSlide?: boolean | undefined;
                        disableOnInteraction?: boolean | undefined;
                        reverseDirection?: boolean | undefined;
                        waitForTransition?: boolean | undefined;
                        pauseOnMouseEnter?: boolean | undefined;
                    } | undefined;
                    controller?: {
                        control?: string | HTMLElement | any | any[] | null | undefined;
                        inverse?: boolean | undefined;
                        by?: ("slide" | "container") | undefined;
                    } | undefined;
                    coverflowEffect?: {
                        slideShadows?: boolean | undefined;
                        rotate?: number | undefined;
                        stretch?: number | undefined;
                        depth?: number | undefined;
                        scale?: number | undefined;
                        modifier?: number | undefined;
                    } | undefined;
                    cubeEffect?: {
                        slideShadows?: boolean | undefined;
                        shadow?: boolean | undefined;
                        shadowOffset?: number | undefined;
                        shadowScale?: number | undefined;
                    } | undefined;
                    fadeEffect?: {
                        crossFade?: boolean | undefined;
                    } | undefined;
                    flipEffect?: {
                        slideShadows?: boolean | undefined;
                        limitRotation?: boolean | undefined;
                    } | undefined;
                    creativeEffect?: {
                        prev?: {
                            translate?: (string | number)[] | undefined;
                            rotate?: number[] | undefined;
                            opacity?: number | undefined;
                            scale?: number | undefined;
                            shadow?: boolean | undefined;
                            origin?: string | undefined;
                        } | undefined;
                        next?: {
                            translate?: (string | number)[] | undefined;
                            rotate?: number[] | undefined;
                            opacity?: number | undefined;
                            scale?: number | undefined;
                            shadow?: boolean | undefined;
                            origin?: string | undefined;
                        } | undefined;
                        limitProgress?: number | undefined;
                        shadowPerProgress?: boolean | undefined;
                        progressMultiplier?: number | undefined;
                        perspective?: boolean | undefined;
                    } | undefined;
                    cardsEffect?: {
                        slideShadows?: boolean | undefined;
                        rotate?: boolean | undefined;
                        perSlideRotate?: number | undefined;
                        perSlideOffset?: number | undefined;
                    } | undefined;
                    hashNavigation?: boolean | {
                        watchState?: boolean | undefined;
                        replaceState?: boolean | undefined;
                        getSlideIndex?: ((swiper: SwiperType, hash: string) => number) | undefined;
                    } | undefined;
                    history?: boolean | {
                        enabled?: boolean | undefined;
                        root?: string | undefined;
                        replaceState?: boolean | undefined;
                        key?: string | undefined;
                        keepQuery?: boolean | undefined;
                    } | undefined;
                    keyboard?: boolean | {
                        enabled?: boolean | undefined;
                        onlyInViewport?: boolean | undefined;
                        pageUpDown?: boolean | undefined;
                    } | undefined;
                    mousewheel?: boolean | {
                        enabled?: boolean | undefined;
                        forceToAxis?: boolean | undefined;
                        releaseOnEdges?: boolean | undefined;
                        invert?: boolean | undefined;
                        sensitivity?: number | undefined;
                        eventsTarget?: HTMLElement | "container" | "wrapper" | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | undefined;
                        thresholdDelta?: (number | null) | undefined;
                        thresholdTime?: (number | null) | undefined;
                        noMousewheelClass?: string | undefined;
                    } | undefined;
                    navigation?: boolean | {
                        enabled?: boolean | undefined;
                        nextEl?: HTMLElement | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | null | undefined;
                        prevEl?: HTMLElement | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | null | undefined;
                        hideOnClick?: boolean | undefined;
                        disabledClass?: string | undefined;
                        hiddenClass?: string | undefined;
                        lockClass?: string | undefined;
                        navigationDisabledClass?: string | undefined;
                    } | undefined;
                    pagination?: boolean | {
                        enabled?: boolean | undefined;
                        el?: HTMLElement | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | null | undefined;
                        type?: ("bullets" | "fraction" | "progressbar" | "custom") | undefined;
                        bulletElement?: string | undefined;
                        dynamicBullets?: boolean | undefined;
                        dynamicMainBullets?: number | undefined;
                        hideOnClick?: boolean | undefined;
                        clickable?: boolean | undefined;
                        progressbarOpposite?: boolean | undefined;
                        formatFractionCurrent?: ((number: number) => number | string) | undefined;
                        formatFractionTotal?: ((number: number) => number | string) | undefined;
                        renderBullet?: ((index: number, className: string) => string) | undefined;
                        renderFraction?: ((currentClass: string, totalClass: string) => string) | undefined;
                        renderProgressbar?: ((progressbarFillClass: string) => string) | undefined;
                        renderCustom?: ((swiper: SwiperType, current: number, total: number) => string) | undefined;
                        bulletClass?: string | undefined;
                        bulletActiveClass?: string | undefined;
                        modifierClass?: string | undefined;
                        currentClass?: string | undefined;
                        totalClass?: string | undefined;
                        hiddenClass?: string | undefined;
                        progressbarFillClass?: string | undefined;
                        progressbarOppositeClass?: string | undefined;
                        clickableClass?: string | undefined;
                        lockClass?: string | undefined;
                        horizontalClass?: string | undefined;
                        verticalClass?: string | undefined;
                        paginationDisabledClass?: string | undefined;
                    } | undefined;
                    parallax?: boolean | {
                        enabled?: boolean | undefined;
                    } | undefined;
                    scrollbar?: boolean | {
                        enabled?: boolean | undefined;
                        el?: HTMLElement | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | null | undefined;
                        hide?: boolean | undefined;
                        draggable?: boolean | undefined;
                        snapOnRelease?: boolean | undefined;
                        dragSize?: ("auto" | number) | undefined;
                        lockClass?: string | undefined;
                        dragClass?: string | undefined;
                        scrollbarDisabledClass?: string | undefined;
                        horizontalClass?: string | undefined;
                        verticalClass?: string | undefined;
                    } | undefined;
                    thumbs?: {
                        swiper?: string | any | null | undefined;
                        slideThumbActiveClass?: string | undefined;
                        thumbsContainerClass?: string | undefined;
                        multipleActiveThumbs?: boolean | undefined;
                        autoScrollOffset?: number | undefined;
                    } | undefined;
                    virtual?: boolean | {
                        enabled?: boolean | undefined;
                        slides?: any[] | undefined;
                        cache?: boolean | undefined;
                        addSlidesBefore?: number | undefined;
                        addSlidesAfter?: number | undefined;
                        renderSlide?: ((slide: any, index: any) => any | null) | undefined;
                        renderExternal?: ((data: import('swiper/types').VirtualData<any>) => any | null) | undefined;
                        renderExternalUpdate?: boolean | undefined;
                    } | undefined;
                    zoom?: boolean | {
                        limitToOriginalSize?: boolean | undefined;
                        maxRatio?: number | undefined;
                        minRatio?: number | undefined;
                        toggle?: boolean | undefined;
                        containerClass?: string | undefined;
                        zoomedSlideClass?: string | undefined;
                    } | undefined;
                    freeMode?: boolean | {
                        enabled?: boolean | undefined;
                        momentum?: boolean | undefined;
                        momentumRatio?: number | undefined;
                        momentumVelocityRatio?: number | undefined;
                        momentumBounce?: boolean | undefined;
                        momentumBounceRatio?: number | undefined;
                        minimumVelocity?: number | undefined;
                        sticky?: boolean | undefined;
                    } | undefined;
                    grid?: {
                        rows?: number | undefined;
                        fill?: ("row" | "column") | undefined;
                    } | undefined;
                    _emitClasses?: boolean | undefined;
                };
                el: HTMLElement;
                wrapperEl: HTMLElement;
                slidesEl: HTMLElement;
                slides: HTMLElement[];
                loopedSlides: number | null;
                width: number;
                height: number;
                translate: number;
                progress: number;
                activeIndex: number;
                realIndex: number;
                previousIndex: number;
                snapIndex: number;
                snapGrid: number[];
                slidesGrid: number[];
                slidesSizesGrid: number[];
                isBeginning: boolean;
                isEnd: boolean;
                isLocked: boolean;
                animating: boolean;
                touches: {
                    startX: number;
                    startY: number;
                    currentX: number;
                    currentY: number;
                    diff: number;
                };
                clickedIndex: number;
                clickedSlide: HTMLElement;
                allowSlideNext: boolean;
                allowSlidePrev: boolean;
                allowTouchMove: boolean;
                swipeDirection: "prev" | "next";
                rtlTranslate: boolean;
                disable: () => void;
                enable: () => void;
                setProgress: (progress: number, speed?: number) => void;
                slideNext: (speed?: number, runCallbacks?: boolean) => boolean;
                slidePrev: (speed?: number, runCallbacks?: boolean) => boolean;
                slideTo: (index: number, speed?: number, runCallbacks?: boolean) => boolean;
                slideToLoop: (index: number, speed?: number, runCallbacks?: boolean) => SwiperType;
                slideReset: (speed?: number, runCallbacks?: boolean) => boolean;
                slideToClosest: (speed?: number, runCallbacks?: boolean) => boolean;
                slidesPerViewDynamic: () => number;
                updateAutoHeight: (speed?: number) => void;
                update: () => void;
                updateSize: () => void;
                updateSlides: () => void;
                updateProgress: () => void;
                updateSlidesClasses: () => void;
                changeDirection: (direction?: "horizontal" | "vertical", needUpdate?: boolean) => void;
                changeLanguageDirection: (direction: "rtl" | "ltr") => void;
                detachEvents: () => void;
                attachEvents: () => void;
                loopCreate: () => void;
                loopDestroy: () => void;
                init: (el?: HTMLElement) => SwiperType;
                destroy: (deleteInstance?: boolean, cleanStyles?: boolean) => void;
                setTranslate: (translate: any) => void;
                getTranslate: () => any;
                translateTo: (translate: number, speed: number, runCallbacks?: boolean, translateBounds?: boolean) => any;
                minTranslate: () => number;
                maxTranslate: () => number;
                unsetGrabCursor: () => void;
                setGrabCursor: () => void;
                onAny: (handler: (eventName: string, ...args: any[]) => void) => void;
                offAny: (handler: (eventName: string, ...args: any[]) => void) => void;
                isHorizontal: () => boolean;
                getBreakpoint: (breakpoints: import('swiper/types').SwiperOptions["breakpoints"]) => string;
                setBreakpoint: () => void;
                currentBreakpoint: any;
                destroyed: boolean;
                modules: Array<import('swiper/types').SwiperModule>;
                a11y: import('swiper/types').A11yMethods;
                autoplay: {
                    running: boolean;
                    paused: boolean;
                    timeLeft: number;
                    pause: () => void;
                    resume: () => void;
                    start: () => boolean;
                    stop: () => boolean;
                };
                controller: {
                    control?: any | any[] | undefined;
                };
                coverflowEffect: import('swiper/types').CoverflowEffectMethods;
                cubeEffect: import('swiper/types').CubeEffectMethods;
                fadeEffect: import('swiper/types').FadeEffectMethods;
                flipEffect: import('swiper/types').FlipEffectMethods;
                creativeEffect: import('swiper/types').CreativeEffectMethods;
                cardsEffect: import('swiper/types').CardsEffectMethods;
                hashNavigation: import('swiper/types').HashNavigationMethods;
                history: import('swiper/types').HistoryMethods;
                keyboard: {
                    enabled: boolean;
                    enable: () => void;
                    disable: () => void;
                };
                mousewheel: {
                    enabled: boolean;
                    enable: () => void;
                    disable: () => void;
                };
                navigation: {
                    nextEl: HTMLElement;
                    prevEl: HTMLElement;
                    update: () => void;
                    init: () => void;
                    destroy: () => void;
                };
                pagination: {
                    el: HTMLElement;
                    bullets: HTMLElement[];
                    render: () => void;
                    update: () => void;
                    init: () => void;
                    destroy: () => void;
                };
                parallax: import('swiper/types').ParallaxMethods;
                scrollbar: {
                    el: HTMLElement;
                    dragEl: HTMLElement;
                    updateSize: () => void;
                    setTranslate: () => void;
                    init: () => void;
                    destroy: () => void;
                };
                thumbs: {
                    swiper: any;
                    update: (initial: boolean) => void;
                    init: () => boolean;
                };
                virtual: {
                    cache: object;
                    from: number;
                    to: number;
                    slides: any[];
                    appendSlide: (slide: HTMLElement | string | HTMLElement[] | string[]) => void;
                    prependSlide: (slide: HTMLElement | string | HTMLElement[] | string[]) => void;
                    removeSlide: (slideIndexes: number[]) => void;
                    removeAllSlides: () => void;
                    update: (force: boolean) => void;
                };
                zoom: {
                    enabled: boolean;
                    scale: number;
                    enable: () => void;
                    disable: () => void;
                    in: (ratio?: number) => void;
                    out: () => void;
                    toggle: (event?: MouseEvent | TouchEvent | PointerEvent) => void;
                };
                freeMode: {
                    onTouchMove: () => void;
                    onTouchEnd: () => void;
                };
                on: <E extends keyof import('swiper/types').SwiperEvents>(event: E, handler: import('swiper/types').SwiperEvents[E]) => void;
                once: <E extends keyof import('swiper/types').SwiperEvents>(event: E, handler: import('swiper/types').SwiperEvents[E]) => void;
                off: {
                    <E extends keyof import('swiper/types').SwiperEvents>(event: E, handler: import('swiper/types').SwiperEvents[E]): void;
                    <E extends keyof import('swiper/types').SwiperEvents>(event: E): void;
                };
                emit: <E extends keyof import('swiper/types').SwiperEvents>(event: E, ...args: any[]) => void;
                appendSlide: (slides: HTMLElement | string | string[] | HTMLElement[]) => void;
                prependSlide: (slides: HTMLElement | string | string[] | HTMLElement[]) => void;
                addSlide: (index: number, slides: HTMLElement | string | string[] | HTMLElement[]) => void;
                removeSlide: (slideIndex: number | number[]) => void;
                removeAllSlides: () => void;
            } | null, SwiperType | {
                params: {
                    modules?: import('swiper/types').SwiperModule[] | undefined;
                    injectStyles?: string[] | undefined;
                    injectStylesUrls?: string[] | undefined;
                    init?: boolean | undefined;
                    enabled?: boolean | undefined;
                    updateOnWindowResize?: boolean | undefined;
                    resizeObserver?: boolean | undefined;
                    initialSlide?: number | undefined;
                    direction?: ("horizontal" | "vertical") | undefined;
                    oneWayMovement?: boolean | undefined;
                    swiperElementNodeName?: string | undefined;
                    speed?: number | undefined;
                    setWrapperSize?: boolean | undefined;
                    virtualTranslate?: boolean | undefined;
                    width?: (number | null) | undefined;
                    height?: (number | null) | undefined;
                    autoHeight?: boolean | undefined;
                    roundLengths?: boolean | undefined;
                    nested?: boolean | undefined;
                    createElements?: boolean | undefined;
                    eventsPrefix?: string | undefined;
                    focusableElements?: string | undefined;
                    uniqueNavElements?: boolean | undefined;
                    effect?: ("slide" | "fade" | "cube" | "coverflow" | "flip" | "creative" | "cards" | string) | undefined;
                    runCallbacksOnInit?: boolean | undefined;
                    watchOverflow?: boolean | undefined;
                    userAgent?: (string | null) | undefined;
                    url?: (string | null) | undefined;
                    on?: {
                        init?: ((swiper: SwiperType) => any) | undefined;
                        beforeDestroy?: ((swiper: SwiperType) => void) | undefined;
                        slidesUpdated?: ((swiper: SwiperType) => void) | undefined;
                        slideChange?: ((swiper: SwiperType) => void) | undefined;
                        slideChangeTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                        slideChangeTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                        slideNextTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                        slideNextTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                        slidePrevTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                        slidePrevTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                        transitionStart?: ((swiper: SwiperType) => void) | undefined;
                        transitionEnd?: ((swiper: SwiperType) => void) | undefined;
                        touchStart?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        touchMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        touchMoveOpposite?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        sliderMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        touchEnd?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        click?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        tap?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        doubleTap?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        progress?: ((swiper: SwiperType, progress: number) => void) | undefined;
                        reachBeginning?: ((swiper: SwiperType) => void) | undefined;
                        reachEnd?: ((swiper: SwiperType) => void) | undefined;
                        toEdge?: ((swiper: SwiperType) => void) | undefined;
                        fromEdge?: ((swiper: SwiperType) => void) | undefined;
                        setTranslate?: ((swiper: SwiperType, translate: number) => void) | undefined;
                        setTransition?: ((swiper: SwiperType, transition: number) => void) | undefined;
                        resize?: ((swiper: SwiperType) => void) | undefined;
                        observerUpdate?: ((swiper: SwiperType) => void) | undefined;
                        beforeLoopFix?: ((swiper: SwiperType) => void) | undefined;
                        loopFix?: ((swiper: SwiperType) => void) | undefined;
                        breakpoint?: ((swiper: SwiperType, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                        _beforeBreakpoint?: ((swiper: SwiperType, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                        _containerClasses?: ((swiper: SwiperType, classNames: string) => void) | undefined;
                        _slideClass?: ((swiper: SwiperType, slideEl: HTMLElement, classNames: string) => void) | undefined;
                        _slideClasses?: ((swiper: SwiperType, slides: {
                            slideEl: HTMLElement;
                            classNames: string;
                            index: number;
                        }[]) => void) | undefined;
                        _swiper?: ((swiper: SwiperType) => void) | undefined;
                        _freeModeNoMomentumRelease?: ((swiper: SwiperType) => void) | undefined;
                        activeIndexChange?: ((swiper: SwiperType) => void) | undefined;
                        snapIndexChange?: ((swiper: SwiperType) => void) | undefined;
                        realIndexChange?: ((swiper: SwiperType) => void) | undefined;
                        afterInit?: ((swiper: SwiperType) => void) | undefined;
                        beforeInit?: ((swiper: SwiperType) => void) | undefined;
                        beforeResize?: ((swiper: SwiperType) => void) | undefined;
                        beforeSlideChangeStart?: ((swiper: SwiperType) => void) | undefined;
                        beforeTransitionStart?: ((swiper: SwiperType, speed: number, internal: any) => void) | undefined;
                        changeDirection?: ((swiper: SwiperType) => void) | undefined;
                        doubleClick?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        destroy?: ((swiper: SwiperType) => void) | undefined;
                        momentumBounce?: ((swiper: SwiperType) => void) | undefined;
                        orientationchange?: ((swiper: SwiperType) => void) | undefined;
                        slideResetTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                        slideResetTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                        sliderFirstMove?: ((swiper: SwiperType, event: TouchEvent) => void) | undefined;
                        slidesLengthChange?: ((swiper: SwiperType) => void) | undefined;
                        slidesGridLengthChange?: ((swiper: SwiperType) => void) | undefined;
                        snapGridLengthChange?: ((swiper: SwiperType) => void) | undefined;
                        update?: ((swiper: SwiperType) => void) | undefined;
                        lock?: ((swiper: SwiperType) => void) | undefined;
                        unlock?: ((swiper: SwiperType) => void) | undefined;
                        autoplayStart?: ((swiper: SwiperType) => void) | undefined;
                        autoplayStop?: ((swiper: SwiperType) => void) | undefined;
                        autoplayPause?: ((swiper: SwiperType) => void) | undefined;
                        autoplayResume?: ((swiper: SwiperType) => void) | undefined;
                        autoplayTimeLeft?: ((swiper: SwiperType, timeLeft: number, percentage: number) => void) | undefined;
                        autoplay?: ((swiper: SwiperType) => void) | undefined;
                        hashChange?: ((swiper: SwiperType) => void) | undefined;
                        hashSet?: ((swiper: SwiperType) => void) | undefined;
                        keyPress?: ((swiper: SwiperType, keyCode: string) => void) | undefined;
                        scroll?: ((swiper: SwiperType, event: WheelEvent) => void) | undefined;
                        navigationHide?: ((swiper: SwiperType) => void) | undefined;
                        navigationShow?: ((swiper: SwiperType) => void) | undefined;
                        navigationPrev?: ((swiper: SwiperType) => void) | undefined;
                        navigationNext?: ((swiper: SwiperType) => void) | undefined;
                        paginationRender?: ((swiper: SwiperType, paginationEl: HTMLElement) => void) | undefined;
                        paginationUpdate?: ((swiper: SwiperType, paginationEl: HTMLElement) => void) | undefined;
                        paginationHide?: ((swiper: SwiperType) => void) | undefined;
                        paginationShow?: ((swiper: SwiperType) => void) | undefined;
                        scrollbarDragStart?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        scrollbarDragMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        scrollbarDragEnd?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        zoomChange?: ((swiper: SwiperType, scale: number, imageEl: HTMLElement, slideEl: HTMLElement) => void) | undefined;
                    } | undefined;
                    onAny?: ((handler: (eventName: string, ...args: any[]) => void) => void) | undefined;
                    cssMode?: boolean | undefined;
                    spaceBetween?: (number | string) | undefined;
                    slidesPerView?: (number | "auto") | undefined;
                    maxBackfaceHiddenSlides?: number | undefined;
                    slidesPerGroup?: number | undefined;
                    slidesPerGroupSkip?: number | undefined;
                    slidesPerGroupAuto?: boolean | undefined;
                    centeredSlides?: boolean | undefined;
                    centeredSlidesBounds?: boolean | undefined;
                    slidesOffsetBefore?: number | undefined;
                    slidesOffsetAfter?: number | undefined;
                    normalizeSlideIndex?: boolean | undefined;
                    centerInsufficientSlides?: boolean | undefined;
                    grabCursor?: boolean | undefined;
                    touchEventsTarget?: ("container" | "wrapper") | undefined;
                    touchRatio?: number | undefined;
                    touchAngle?: number | undefined;
                    simulateTouch?: boolean | undefined;
                    shortSwipes?: boolean | undefined;
                    longSwipes?: boolean | undefined;
                    longSwipesRatio?: number | undefined;
                    longSwipesMs?: number | undefined;
                    followFinger?: boolean | undefined;
                    allowTouchMove?: boolean | undefined;
                    threshold?: number | undefined;
                    touchStartPreventDefault?: boolean | undefined;
                    touchStartForcePreventDefault?: boolean | undefined;
                    touchMoveStopPropagation?: boolean | undefined;
                    edgeSwipeDetection?: (boolean | string) | undefined;
                    edgeSwipeThreshold?: number | undefined;
                    touchReleaseOnEdges?: boolean | undefined;
                    passiveListeners?: boolean | undefined;
                    resistance?: boolean | undefined;
                    resistanceRatio?: number | undefined;
                    preventInteractionOnTransition?: boolean | undefined;
                    allowSlidePrev?: boolean | undefined;
                    allowSlideNext?: boolean | undefined;
                    noSwiping?: boolean | undefined;
                    noSwipingClass?: string | undefined;
                    noSwipingSelector?: string | undefined;
                    swipeHandler?: HTMLElement | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | null | undefined;
                    preventClicks?: boolean | undefined;
                    preventClicksPropagation?: boolean | undefined;
                    slideToClickedSlide?: boolean | undefined;
                    watchSlidesProgress?: boolean | undefined;
                    loop?: boolean | undefined;
                    loopAddBlankSlides?: boolean | undefined;
                    loopAdditionalSlides?: number | undefined;
                    loopPreventsSliding?: boolean | undefined;
                    rewind?: boolean | undefined;
                    breakpoints?: {
                        [width: number]: import('swiper/types').SwiperOptions;
                        [ratio: string]: import('swiper/types').SwiperOptions;
                    } | undefined;
                    breakpointsBase?: ("window" | "container") | undefined;
                    observer?: boolean | undefined;
                    observeSlideChildren?: boolean | undefined;
                    observeParents?: boolean | undefined;
                    containerModifierClass?: string | undefined;
                    slideClass?: string | undefined;
                    slideActiveClass?: string | undefined;
                    slideVisibleClass?: string | undefined;
                    slideFullyVisibleClass?: string | undefined;
                    slideBlankClass?: string | undefined;
                    slideNextClass?: string | undefined;
                    slidePrevClass?: string | undefined;
                    wrapperClass?: string | undefined;
                    lazyPreloaderClass?: string | undefined;
                    lazyPreloadPrevNext?: number | undefined;
                    a11y?: {
                        enabled?: boolean | undefined;
                        prevSlideMessage?: string | undefined;
                        nextSlideMessage?: string | undefined;
                        firstSlideMessage?: string | undefined;
                        lastSlideMessage?: string | undefined;
                        paginationBulletMessage?: string | undefined;
                        notificationClass?: string | undefined;
                        containerMessage?: (string | null) | undefined;
                        containerRoleDescriptionMessage?: (string | null) | undefined;
                        containerRole?: (string | null) | undefined;
                        itemRoleDescriptionMessage?: (string | null) | undefined;
                        slideLabelMessage?: string | undefined;
                        slideRole?: string | undefined;
                        id?: (string | number | null) | undefined;
                        scrollOnFocus?: boolean | undefined;
                    } | undefined;
                    autoplay?: boolean | {
                        delay?: number | undefined;
                        stopOnLastSlide?: boolean | undefined;
                        disableOnInteraction?: boolean | undefined;
                        reverseDirection?: boolean | undefined;
                        waitForTransition?: boolean | undefined;
                        pauseOnMouseEnter?: boolean | undefined;
                    } | undefined;
                    controller?: {
                        control?: string | HTMLElement | any | any[] | null | undefined;
                        inverse?: boolean | undefined;
                        by?: ("slide" | "container") | undefined;
                    } | undefined;
                    coverflowEffect?: {
                        slideShadows?: boolean | undefined;
                        rotate?: number | undefined;
                        stretch?: number | undefined;
                        depth?: number | undefined;
                        scale?: number | undefined;
                        modifier?: number | undefined;
                    } | undefined;
                    cubeEffect?: {
                        slideShadows?: boolean | undefined;
                        shadow?: boolean | undefined;
                        shadowOffset?: number | undefined;
                        shadowScale?: number | undefined;
                    } | undefined;
                    fadeEffect?: {
                        crossFade?: boolean | undefined;
                    } | undefined;
                    flipEffect?: {
                        slideShadows?: boolean | undefined;
                        limitRotation?: boolean | undefined;
                    } | undefined;
                    creativeEffect?: {
                        prev?: {
                            translate?: (string | number)[] | undefined;
                            rotate?: number[] | undefined;
                            opacity?: number | undefined;
                            scale?: number | undefined;
                            shadow?: boolean | undefined;
                            origin?: string | undefined;
                        } | undefined;
                        next?: {
                            translate?: (string | number)[] | undefined;
                            rotate?: number[] | undefined;
                            opacity?: number | undefined;
                            scale?: number | undefined;
                            shadow?: boolean | undefined;
                            origin?: string | undefined;
                        } | undefined;
                        limitProgress?: number | undefined;
                        shadowPerProgress?: boolean | undefined;
                        progressMultiplier?: number | undefined;
                        perspective?: boolean | undefined;
                    } | undefined;
                    cardsEffect?: {
                        slideShadows?: boolean | undefined;
                        rotate?: boolean | undefined;
                        perSlideRotate?: number | undefined;
                        perSlideOffset?: number | undefined;
                    } | undefined;
                    hashNavigation?: boolean | {
                        watchState?: boolean | undefined;
                        replaceState?: boolean | undefined;
                        getSlideIndex?: ((swiper: SwiperType, hash: string) => number) | undefined;
                    } | undefined;
                    history?: boolean | {
                        enabled?: boolean | undefined;
                        root?: string | undefined;
                        replaceState?: boolean | undefined;
                        key?: string | undefined;
                        keepQuery?: boolean | undefined;
                    } | undefined;
                    keyboard?: boolean | {
                        enabled?: boolean | undefined;
                        onlyInViewport?: boolean | undefined;
                        pageUpDown?: boolean | undefined;
                    } | undefined;
                    mousewheel?: boolean | {
                        enabled?: boolean | undefined;
                        forceToAxis?: boolean | undefined;
                        releaseOnEdges?: boolean | undefined;
                        invert?: boolean | undefined;
                        sensitivity?: number | undefined;
                        eventsTarget?: HTMLElement | "container" | "wrapper" | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | undefined;
                        thresholdDelta?: (number | null) | undefined;
                        thresholdTime?: (number | null) | undefined;
                        noMousewheelClass?: string | undefined;
                    } | undefined;
                    navigation?: boolean | {
                        enabled?: boolean | undefined;
                        nextEl?: HTMLElement | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | null | undefined;
                        prevEl?: HTMLElement | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | null | undefined;
                        hideOnClick?: boolean | undefined;
                        disabledClass?: string | undefined;
                        hiddenClass?: string | undefined;
                        lockClass?: string | undefined;
                        navigationDisabledClass?: string | undefined;
                    } | undefined;
                    pagination?: boolean | {
                        enabled?: boolean | undefined;
                        el?: HTMLElement | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | null | undefined;
                        type?: ("bullets" | "fraction" | "progressbar" | "custom") | undefined;
                        bulletElement?: string | undefined;
                        dynamicBullets?: boolean | undefined;
                        dynamicMainBullets?: number | undefined;
                        hideOnClick?: boolean | undefined;
                        clickable?: boolean | undefined;
                        progressbarOpposite?: boolean | undefined;
                        formatFractionCurrent?: ((number: number) => number | string) | undefined;
                        formatFractionTotal?: ((number: number) => number | string) | undefined;
                        renderBullet?: ((index: number, className: string) => string) | undefined;
                        renderFraction?: ((currentClass: string, totalClass: string) => string) | undefined;
                        renderProgressbar?: ((progressbarFillClass: string) => string) | undefined;
                        renderCustom?: ((swiper: SwiperType, current: number, total: number) => string) | undefined;
                        bulletClass?: string | undefined;
                        bulletActiveClass?: string | undefined;
                        modifierClass?: string | undefined;
                        currentClass?: string | undefined;
                        totalClass?: string | undefined;
                        hiddenClass?: string | undefined;
                        progressbarFillClass?: string | undefined;
                        progressbarOppositeClass?: string | undefined;
                        clickableClass?: string | undefined;
                        lockClass?: string | undefined;
                        horizontalClass?: string | undefined;
                        verticalClass?: string | undefined;
                        paginationDisabledClass?: string | undefined;
                    } | undefined;
                    parallax?: boolean | {
                        enabled?: boolean | undefined;
                    } | undefined;
                    scrollbar?: boolean | {
                        enabled?: boolean | undefined;
                        el?: HTMLElement | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | null | undefined;
                        hide?: boolean | undefined;
                        draggable?: boolean | undefined;
                        snapOnRelease?: boolean | undefined;
                        dragSize?: ("auto" | number) | undefined;
                        lockClass?: string | undefined;
                        dragClass?: string | undefined;
                        scrollbarDisabledClass?: string | undefined;
                        horizontalClass?: string | undefined;
                        verticalClass?: string | undefined;
                    } | undefined;
                    thumbs?: {
                        swiper?: string | any | null | undefined;
                        slideThumbActiveClass?: string | undefined;
                        thumbsContainerClass?: string | undefined;
                        multipleActiveThumbs?: boolean | undefined;
                        autoScrollOffset?: number | undefined;
                    } | undefined;
                    virtual?: boolean | {
                        enabled?: boolean | undefined;
                        slides?: any[] | undefined;
                        cache?: boolean | undefined;
                        addSlidesBefore?: number | undefined;
                        addSlidesAfter?: number | undefined;
                        renderSlide?: ((slide: any, index: any) => any | null) | undefined;
                        renderExternal?: ((data: import('swiper/types').VirtualData<any>) => any | null) | undefined;
                        renderExternalUpdate?: boolean | undefined;
                    } | undefined;
                    zoom?: boolean | {
                        limitToOriginalSize?: boolean | undefined;
                        maxRatio?: number | undefined;
                        minRatio?: number | undefined;
                        toggle?: boolean | undefined;
                        containerClass?: string | undefined;
                        zoomedSlideClass?: string | undefined;
                    } | undefined;
                    freeMode?: boolean | {
                        enabled?: boolean | undefined;
                        momentum?: boolean | undefined;
                        momentumRatio?: number | undefined;
                        momentumVelocityRatio?: number | undefined;
                        momentumBounce?: boolean | undefined;
                        momentumBounceRatio?: number | undefined;
                        minimumVelocity?: number | undefined;
                        sticky?: boolean | undefined;
                    } | undefined;
                    grid?: {
                        rows?: number | undefined;
                        fill?: ("row" | "column") | undefined;
                    } | undefined;
                    _emitClasses?: boolean | undefined;
                };
                originalParams: {
                    modules?: import('swiper/types').SwiperModule[] | undefined;
                    injectStyles?: string[] | undefined;
                    injectStylesUrls?: string[] | undefined;
                    init?: boolean | undefined;
                    enabled?: boolean | undefined;
                    updateOnWindowResize?: boolean | undefined;
                    resizeObserver?: boolean | undefined;
                    initialSlide?: number | undefined;
                    direction?: ("horizontal" | "vertical") | undefined;
                    oneWayMovement?: boolean | undefined;
                    swiperElementNodeName?: string | undefined;
                    speed?: number | undefined;
                    setWrapperSize?: boolean | undefined;
                    virtualTranslate?: boolean | undefined;
                    width?: (number | null) | undefined;
                    height?: (number | null) | undefined;
                    autoHeight?: boolean | undefined;
                    roundLengths?: boolean | undefined;
                    nested?: boolean | undefined;
                    createElements?: boolean | undefined;
                    eventsPrefix?: string | undefined;
                    focusableElements?: string | undefined;
                    uniqueNavElements?: boolean | undefined;
                    effect?: ("slide" | "fade" | "cube" | "coverflow" | "flip" | "creative" | "cards" | string) | undefined;
                    runCallbacksOnInit?: boolean | undefined;
                    watchOverflow?: boolean | undefined;
                    userAgent?: (string | null) | undefined;
                    url?: (string | null) | undefined;
                    on?: {
                        init?: ((swiper: SwiperType) => any) | undefined;
                        beforeDestroy?: ((swiper: SwiperType) => void) | undefined;
                        slidesUpdated?: ((swiper: SwiperType) => void) | undefined;
                        slideChange?: ((swiper: SwiperType) => void) | undefined;
                        slideChangeTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                        slideChangeTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                        slideNextTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                        slideNextTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                        slidePrevTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                        slidePrevTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                        transitionStart?: ((swiper: SwiperType) => void) | undefined;
                        transitionEnd?: ((swiper: SwiperType) => void) | undefined;
                        touchStart?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        touchMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        touchMoveOpposite?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        sliderMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        touchEnd?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        click?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        tap?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        doubleTap?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        progress?: ((swiper: SwiperType, progress: number) => void) | undefined;
                        reachBeginning?: ((swiper: SwiperType) => void) | undefined;
                        reachEnd?: ((swiper: SwiperType) => void) | undefined;
                        toEdge?: ((swiper: SwiperType) => void) | undefined;
                        fromEdge?: ((swiper: SwiperType) => void) | undefined;
                        setTranslate?: ((swiper: SwiperType, translate: number) => void) | undefined;
                        setTransition?: ((swiper: SwiperType, transition: number) => void) | undefined;
                        resize?: ((swiper: SwiperType) => void) | undefined;
                        observerUpdate?: ((swiper: SwiperType) => void) | undefined;
                        beforeLoopFix?: ((swiper: SwiperType) => void) | undefined;
                        loopFix?: ((swiper: SwiperType) => void) | undefined;
                        breakpoint?: ((swiper: SwiperType, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                        _beforeBreakpoint?: ((swiper: SwiperType, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                        _containerClasses?: ((swiper: SwiperType, classNames: string) => void) | undefined;
                        _slideClass?: ((swiper: SwiperType, slideEl: HTMLElement, classNames: string) => void) | undefined;
                        _slideClasses?: ((swiper: SwiperType, slides: {
                            slideEl: HTMLElement;
                            classNames: string;
                            index: number;
                        }[]) => void) | undefined;
                        _swiper?: ((swiper: SwiperType) => void) | undefined;
                        _freeModeNoMomentumRelease?: ((swiper: SwiperType) => void) | undefined;
                        activeIndexChange?: ((swiper: SwiperType) => void) | undefined;
                        snapIndexChange?: ((swiper: SwiperType) => void) | undefined;
                        realIndexChange?: ((swiper: SwiperType) => void) | undefined;
                        afterInit?: ((swiper: SwiperType) => void) | undefined;
                        beforeInit?: ((swiper: SwiperType) => void) | undefined;
                        beforeResize?: ((swiper: SwiperType) => void) | undefined;
                        beforeSlideChangeStart?: ((swiper: SwiperType) => void) | undefined;
                        beforeTransitionStart?: ((swiper: SwiperType, speed: number, internal: any) => void) | undefined;
                        changeDirection?: ((swiper: SwiperType) => void) | undefined;
                        doubleClick?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        destroy?: ((swiper: SwiperType) => void) | undefined;
                        momentumBounce?: ((swiper: SwiperType) => void) | undefined;
                        orientationchange?: ((swiper: SwiperType) => void) | undefined;
                        slideResetTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                        slideResetTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                        sliderFirstMove?: ((swiper: SwiperType, event: TouchEvent) => void) | undefined;
                        slidesLengthChange?: ((swiper: SwiperType) => void) | undefined;
                        slidesGridLengthChange?: ((swiper: SwiperType) => void) | undefined;
                        snapGridLengthChange?: ((swiper: SwiperType) => void) | undefined;
                        update?: ((swiper: SwiperType) => void) | undefined;
                        lock?: ((swiper: SwiperType) => void) | undefined;
                        unlock?: ((swiper: SwiperType) => void) | undefined;
                        autoplayStart?: ((swiper: SwiperType) => void) | undefined;
                        autoplayStop?: ((swiper: SwiperType) => void) | undefined;
                        autoplayPause?: ((swiper: SwiperType) => void) | undefined;
                        autoplayResume?: ((swiper: SwiperType) => void) | undefined;
                        autoplayTimeLeft?: ((swiper: SwiperType, timeLeft: number, percentage: number) => void) | undefined;
                        autoplay?: ((swiper: SwiperType) => void) | undefined;
                        hashChange?: ((swiper: SwiperType) => void) | undefined;
                        hashSet?: ((swiper: SwiperType) => void) | undefined;
                        keyPress?: ((swiper: SwiperType, keyCode: string) => void) | undefined;
                        scroll?: ((swiper: SwiperType, event: WheelEvent) => void) | undefined;
                        navigationHide?: ((swiper: SwiperType) => void) | undefined;
                        navigationShow?: ((swiper: SwiperType) => void) | undefined;
                        navigationPrev?: ((swiper: SwiperType) => void) | undefined;
                        navigationNext?: ((swiper: SwiperType) => void) | undefined;
                        paginationRender?: ((swiper: SwiperType, paginationEl: HTMLElement) => void) | undefined;
                        paginationUpdate?: ((swiper: SwiperType, paginationEl: HTMLElement) => void) | undefined;
                        paginationHide?: ((swiper: SwiperType) => void) | undefined;
                        paginationShow?: ((swiper: SwiperType) => void) | undefined;
                        scrollbarDragStart?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        scrollbarDragMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        scrollbarDragEnd?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        zoomChange?: ((swiper: SwiperType, scale: number, imageEl: HTMLElement, slideEl: HTMLElement) => void) | undefined;
                    } | undefined;
                    onAny?: ((handler: (eventName: string, ...args: any[]) => void) => void) | undefined;
                    cssMode?: boolean | undefined;
                    spaceBetween?: (number | string) | undefined;
                    slidesPerView?: (number | "auto") | undefined;
                    maxBackfaceHiddenSlides?: number | undefined;
                    slidesPerGroup?: number | undefined;
                    slidesPerGroupSkip?: number | undefined;
                    slidesPerGroupAuto?: boolean | undefined;
                    centeredSlides?: boolean | undefined;
                    centeredSlidesBounds?: boolean | undefined;
                    slidesOffsetBefore?: number | undefined;
                    slidesOffsetAfter?: number | undefined;
                    normalizeSlideIndex?: boolean | undefined;
                    centerInsufficientSlides?: boolean | undefined;
                    grabCursor?: boolean | undefined;
                    touchEventsTarget?: ("container" | "wrapper") | undefined;
                    touchRatio?: number | undefined;
                    touchAngle?: number | undefined;
                    simulateTouch?: boolean | undefined;
                    shortSwipes?: boolean | undefined;
                    longSwipes?: boolean | undefined;
                    longSwipesRatio?: number | undefined;
                    longSwipesMs?: number | undefined;
                    followFinger?: boolean | undefined;
                    allowTouchMove?: boolean | undefined;
                    threshold?: number | undefined;
                    touchStartPreventDefault?: boolean | undefined;
                    touchStartForcePreventDefault?: boolean | undefined;
                    touchMoveStopPropagation?: boolean | undefined;
                    edgeSwipeDetection?: (boolean | string) | undefined;
                    edgeSwipeThreshold?: number | undefined;
                    touchReleaseOnEdges?: boolean | undefined;
                    passiveListeners?: boolean | undefined;
                    resistance?: boolean | undefined;
                    resistanceRatio?: number | undefined;
                    preventInteractionOnTransition?: boolean | undefined;
                    allowSlidePrev?: boolean | undefined;
                    allowSlideNext?: boolean | undefined;
                    noSwiping?: boolean | undefined;
                    noSwipingClass?: string | undefined;
                    noSwipingSelector?: string | undefined;
                    swipeHandler?: HTMLElement | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | null | undefined;
                    preventClicks?: boolean | undefined;
                    preventClicksPropagation?: boolean | undefined;
                    slideToClickedSlide?: boolean | undefined;
                    watchSlidesProgress?: boolean | undefined;
                    loop?: boolean | undefined;
                    loopAddBlankSlides?: boolean | undefined;
                    loopAdditionalSlides?: number | undefined;
                    loopPreventsSliding?: boolean | undefined;
                    rewind?: boolean | undefined;
                    breakpoints?: {
                        [width: number]: import('swiper/types').SwiperOptions;
                        [ratio: string]: import('swiper/types').SwiperOptions;
                    } | undefined;
                    breakpointsBase?: ("window" | "container") | undefined;
                    observer?: boolean | undefined;
                    observeSlideChildren?: boolean | undefined;
                    observeParents?: boolean | undefined;
                    containerModifierClass?: string | undefined;
                    slideClass?: string | undefined;
                    slideActiveClass?: string | undefined;
                    slideVisibleClass?: string | undefined;
                    slideFullyVisibleClass?: string | undefined;
                    slideBlankClass?: string | undefined;
                    slideNextClass?: string | undefined;
                    slidePrevClass?: string | undefined;
                    wrapperClass?: string | undefined;
                    lazyPreloaderClass?: string | undefined;
                    lazyPreloadPrevNext?: number | undefined;
                    a11y?: {
                        enabled?: boolean | undefined;
                        prevSlideMessage?: string | undefined;
                        nextSlideMessage?: string | undefined;
                        firstSlideMessage?: string | undefined;
                        lastSlideMessage?: string | undefined;
                        paginationBulletMessage?: string | undefined;
                        notificationClass?: string | undefined;
                        containerMessage?: (string | null) | undefined;
                        containerRoleDescriptionMessage?: (string | null) | undefined;
                        containerRole?: (string | null) | undefined;
                        itemRoleDescriptionMessage?: (string | null) | undefined;
                        slideLabelMessage?: string | undefined;
                        slideRole?: string | undefined;
                        id?: (string | number | null) | undefined;
                        scrollOnFocus?: boolean | undefined;
                    } | undefined;
                    autoplay?: boolean | {
                        delay?: number | undefined;
                        stopOnLastSlide?: boolean | undefined;
                        disableOnInteraction?: boolean | undefined;
                        reverseDirection?: boolean | undefined;
                        waitForTransition?: boolean | undefined;
                        pauseOnMouseEnter?: boolean | undefined;
                    } | undefined;
                    controller?: {
                        control?: string | HTMLElement | any | any[] | null | undefined;
                        inverse?: boolean | undefined;
                        by?: ("slide" | "container") | undefined;
                    } | undefined;
                    coverflowEffect?: {
                        slideShadows?: boolean | undefined;
                        rotate?: number | undefined;
                        stretch?: number | undefined;
                        depth?: number | undefined;
                        scale?: number | undefined;
                        modifier?: number | undefined;
                    } | undefined;
                    cubeEffect?: {
                        slideShadows?: boolean | undefined;
                        shadow?: boolean | undefined;
                        shadowOffset?: number | undefined;
                        shadowScale?: number | undefined;
                    } | undefined;
                    fadeEffect?: {
                        crossFade?: boolean | undefined;
                    } | undefined;
                    flipEffect?: {
                        slideShadows?: boolean | undefined;
                        limitRotation?: boolean | undefined;
                    } | undefined;
                    creativeEffect?: {
                        prev?: {
                            translate?: (string | number)[] | undefined;
                            rotate?: number[] | undefined;
                            opacity?: number | undefined;
                            scale?: number | undefined;
                            shadow?: boolean | undefined;
                            origin?: string | undefined;
                        } | undefined;
                        next?: {
                            translate?: (string | number)[] | undefined;
                            rotate?: number[] | undefined;
                            opacity?: number | undefined;
                            scale?: number | undefined;
                            shadow?: boolean | undefined;
                            origin?: string | undefined;
                        } | undefined;
                        limitProgress?: number | undefined;
                        shadowPerProgress?: boolean | undefined;
                        progressMultiplier?: number | undefined;
                        perspective?: boolean | undefined;
                    } | undefined;
                    cardsEffect?: {
                        slideShadows?: boolean | undefined;
                        rotate?: boolean | undefined;
                        perSlideRotate?: number | undefined;
                        perSlideOffset?: number | undefined;
                    } | undefined;
                    hashNavigation?: boolean | {
                        watchState?: boolean | undefined;
                        replaceState?: boolean | undefined;
                        getSlideIndex?: ((swiper: SwiperType, hash: string) => number) | undefined;
                    } | undefined;
                    history?: boolean | {
                        enabled?: boolean | undefined;
                        root?: string | undefined;
                        replaceState?: boolean | undefined;
                        key?: string | undefined;
                        keepQuery?: boolean | undefined;
                    } | undefined;
                    keyboard?: boolean | {
                        enabled?: boolean | undefined;
                        onlyInViewport?: boolean | undefined;
                        pageUpDown?: boolean | undefined;
                    } | undefined;
                    mousewheel?: boolean | {
                        enabled?: boolean | undefined;
                        forceToAxis?: boolean | undefined;
                        releaseOnEdges?: boolean | undefined;
                        invert?: boolean | undefined;
                        sensitivity?: number | undefined;
                        eventsTarget?: HTMLElement | "container" | "wrapper" | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | undefined;
                        thresholdDelta?: (number | null) | undefined;
                        thresholdTime?: (number | null) | undefined;
                        noMousewheelClass?: string | undefined;
                    } | undefined;
                    navigation?: boolean | {
                        enabled?: boolean | undefined;
                        nextEl?: HTMLElement | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | null | undefined;
                        prevEl?: HTMLElement | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | null | undefined;
                        hideOnClick?: boolean | undefined;
                        disabledClass?: string | undefined;
                        hiddenClass?: string | undefined;
                        lockClass?: string | undefined;
                        navigationDisabledClass?: string | undefined;
                    } | undefined;
                    pagination?: boolean | {
                        enabled?: boolean | undefined;
                        el?: HTMLElement | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | null | undefined;
                        type?: ("bullets" | "fraction" | "progressbar" | "custom") | undefined;
                        bulletElement?: string | undefined;
                        dynamicBullets?: boolean | undefined;
                        dynamicMainBullets?: number | undefined;
                        hideOnClick?: boolean | undefined;
                        clickable?: boolean | undefined;
                        progressbarOpposite?: boolean | undefined;
                        formatFractionCurrent?: ((number: number) => number | string) | undefined;
                        formatFractionTotal?: ((number: number) => number | string) | undefined;
                        renderBullet?: ((index: number, className: string) => string) | undefined;
                        renderFraction?: ((currentClass: string, totalClass: string) => string) | undefined;
                        renderProgressbar?: ((progressbarFillClass: string) => string) | undefined;
                        renderCustom?: ((swiper: SwiperType, current: number, total: number) => string) | undefined;
                        bulletClass?: string | undefined;
                        bulletActiveClass?: string | undefined;
                        modifierClass?: string | undefined;
                        currentClass?: string | undefined;
                        totalClass?: string | undefined;
                        hiddenClass?: string | undefined;
                        progressbarFillClass?: string | undefined;
                        progressbarOppositeClass?: string | undefined;
                        clickableClass?: string | undefined;
                        lockClass?: string | undefined;
                        horizontalClass?: string | undefined;
                        verticalClass?: string | undefined;
                        paginationDisabledClass?: string | undefined;
                    } | undefined;
                    parallax?: boolean | {
                        enabled?: boolean | undefined;
                    } | undefined;
                    scrollbar?: boolean | {
                        enabled?: boolean | undefined;
                        el?: HTMLElement | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | null | undefined;
                        hide?: boolean | undefined;
                        draggable?: boolean | undefined;
                        snapOnRelease?: boolean | undefined;
                        dragSize?: ("auto" | number) | undefined;
                        lockClass?: string | undefined;
                        dragClass?: string | undefined;
                        scrollbarDisabledClass?: string | undefined;
                        horizontalClass?: string | undefined;
                        verticalClass?: string | undefined;
                    } | undefined;
                    thumbs?: {
                        swiper?: string | any | null | undefined;
                        slideThumbActiveClass?: string | undefined;
                        thumbsContainerClass?: string | undefined;
                        multipleActiveThumbs?: boolean | undefined;
                        autoScrollOffset?: number | undefined;
                    } | undefined;
                    virtual?: boolean | {
                        enabled?: boolean | undefined;
                        slides?: any[] | undefined;
                        cache?: boolean | undefined;
                        addSlidesBefore?: number | undefined;
                        addSlidesAfter?: number | undefined;
                        renderSlide?: ((slide: any, index: any) => any | null) | undefined;
                        renderExternal?: ((data: import('swiper/types').VirtualData<any>) => any | null) | undefined;
                        renderExternalUpdate?: boolean | undefined;
                    } | undefined;
                    zoom?: boolean | {
                        limitToOriginalSize?: boolean | undefined;
                        maxRatio?: number | undefined;
                        minRatio?: number | undefined;
                        toggle?: boolean | undefined;
                        containerClass?: string | undefined;
                        zoomedSlideClass?: string | undefined;
                    } | undefined;
                    freeMode?: boolean | {
                        enabled?: boolean | undefined;
                        momentum?: boolean | undefined;
                        momentumRatio?: number | undefined;
                        momentumVelocityRatio?: number | undefined;
                        momentumBounce?: boolean | undefined;
                        momentumBounceRatio?: number | undefined;
                        minimumVelocity?: number | undefined;
                        sticky?: boolean | undefined;
                    } | undefined;
                    grid?: {
                        rows?: number | undefined;
                        fill?: ("row" | "column") | undefined;
                    } | undefined;
                    _emitClasses?: boolean | undefined;
                };
                el: HTMLElement;
                wrapperEl: HTMLElement;
                slidesEl: HTMLElement;
                slides: HTMLElement[];
                loopedSlides: number | null;
                width: number;
                height: number;
                translate: number;
                progress: number;
                activeIndex: number;
                realIndex: number;
                previousIndex: number;
                snapIndex: number;
                snapGrid: number[];
                slidesGrid: number[];
                slidesSizesGrid: number[];
                isBeginning: boolean;
                isEnd: boolean;
                isLocked: boolean;
                animating: boolean;
                touches: {
                    startX: number;
                    startY: number;
                    currentX: number;
                    currentY: number;
                    diff: number;
                };
                clickedIndex: number;
                clickedSlide: HTMLElement;
                allowSlideNext: boolean;
                allowSlidePrev: boolean;
                allowTouchMove: boolean;
                swipeDirection: "prev" | "next";
                rtlTranslate: boolean;
                disable: () => void;
                enable: () => void;
                setProgress: (progress: number, speed?: number) => void;
                slideNext: (speed?: number, runCallbacks?: boolean) => boolean;
                slidePrev: (speed?: number, runCallbacks?: boolean) => boolean;
                slideTo: (index: number, speed?: number, runCallbacks?: boolean) => boolean;
                slideToLoop: (index: number, speed?: number, runCallbacks?: boolean) => SwiperType;
                slideReset: (speed?: number, runCallbacks?: boolean) => boolean;
                slideToClosest: (speed?: number, runCallbacks?: boolean) => boolean;
                slidesPerViewDynamic: () => number;
                updateAutoHeight: (speed?: number) => void;
                update: () => void;
                updateSize: () => void;
                updateSlides: () => void;
                updateProgress: () => void;
                updateSlidesClasses: () => void;
                changeDirection: (direction?: "horizontal" | "vertical", needUpdate?: boolean) => void;
                changeLanguageDirection: (direction: "rtl" | "ltr") => void;
                detachEvents: () => void;
                attachEvents: () => void;
                loopCreate: () => void;
                loopDestroy: () => void;
                init: (el?: HTMLElement) => SwiperType;
                destroy: (deleteInstance?: boolean, cleanStyles?: boolean) => void;
                setTranslate: (translate: any) => void;
                getTranslate: () => any;
                translateTo: (translate: number, speed: number, runCallbacks?: boolean, translateBounds?: boolean) => any;
                minTranslate: () => number;
                maxTranslate: () => number;
                unsetGrabCursor: () => void;
                setGrabCursor: () => void;
                onAny: (handler: (eventName: string, ...args: any[]) => void) => void;
                offAny: (handler: (eventName: string, ...args: any[]) => void) => void;
                isHorizontal: () => boolean;
                getBreakpoint: (breakpoints: import('swiper/types').SwiperOptions["breakpoints"]) => string;
                setBreakpoint: () => void;
                currentBreakpoint: any;
                destroyed: boolean;
                modules: Array<import('swiper/types').SwiperModule>;
                a11y: import('swiper/types').A11yMethods;
                autoplay: {
                    running: boolean;
                    paused: boolean;
                    timeLeft: number;
                    pause: () => void;
                    resume: () => void;
                    start: () => boolean;
                    stop: () => boolean;
                };
                controller: {
                    control?: any | any[] | undefined;
                };
                coverflowEffect: import('swiper/types').CoverflowEffectMethods;
                cubeEffect: import('swiper/types').CubeEffectMethods;
                fadeEffect: import('swiper/types').FadeEffectMethods;
                flipEffect: import('swiper/types').FlipEffectMethods;
                creativeEffect: import('swiper/types').CreativeEffectMethods;
                cardsEffect: import('swiper/types').CardsEffectMethods;
                hashNavigation: import('swiper/types').HashNavigationMethods;
                history: import('swiper/types').HistoryMethods;
                keyboard: {
                    enabled: boolean;
                    enable: () => void;
                    disable: () => void;
                };
                mousewheel: {
                    enabled: boolean;
                    enable: () => void;
                    disable: () => void;
                };
                navigation: {
                    nextEl: HTMLElement;
                    prevEl: HTMLElement;
                    update: () => void;
                    init: () => void;
                    destroy: () => void;
                };
                pagination: {
                    el: HTMLElement;
                    bullets: HTMLElement[];
                    render: () => void;
                    update: () => void;
                    init: () => void;
                    destroy: () => void;
                };
                parallax: import('swiper/types').ParallaxMethods;
                scrollbar: {
                    el: HTMLElement;
                    dragEl: HTMLElement;
                    updateSize: () => void;
                    setTranslate: () => void;
                    init: () => void;
                    destroy: () => void;
                };
                thumbs: {
                    swiper: any;
                    update: (initial: boolean) => void;
                    init: () => boolean;
                };
                virtual: {
                    cache: object;
                    from: number;
                    to: number;
                    slides: any[];
                    appendSlide: (slide: HTMLElement | string | HTMLElement[] | string[]) => void;
                    prependSlide: (slide: HTMLElement | string | HTMLElement[] | string[]) => void;
                    removeSlide: (slideIndexes: number[]) => void;
                    removeAllSlides: () => void;
                    update: (force: boolean) => void;
                };
                zoom: {
                    enabled: boolean;
                    scale: number;
                    enable: () => void;
                    disable: () => void;
                    in: (ratio?: number) => void;
                    out: () => void;
                    toggle: (event?: MouseEvent | TouchEvent | PointerEvent) => void;
                };
                freeMode: {
                    onTouchMove: () => void;
                    onTouchEnd: () => void;
                };
                on: <E extends keyof import('swiper/types').SwiperEvents>(event: E, handler: import('swiper/types').SwiperEvents[E]) => void;
                once: <E extends keyof import('swiper/types').SwiperEvents>(event: E, handler: import('swiper/types').SwiperEvents[E]) => void;
                off: {
                    <E extends keyof import('swiper/types').SwiperEvents>(event: E, handler: import('swiper/types').SwiperEvents[E]): void;
                    <E extends keyof import('swiper/types').SwiperEvents>(event: E): void;
                };
                emit: <E extends keyof import('swiper/types').SwiperEvents>(event: E, ...args: any[]) => void;
                appendSlide: (slides: HTMLElement | string | string[] | HTMLElement[]) => void;
                prependSlide: (slides: HTMLElement | string | string[] | HTMLElement[]) => void;
                addSlide: (index: number, slides: HTMLElement | string | string[] | HTMLElement[]) => void;
                removeSlide: (slideIndex: number | number[]) => void;
                removeAllSlides: () => void;
            } | null>;
        }> & {} & import('vue').ComponentCustomProperties & {} & {
            $slots: {
                default?(_: {
                    currentSlideIdx: number;
                    activeSlideIdx: number;
                }): any;
                prev?(_: {}): any;
                next?(_: {}): any;
            };
        }) | null;
        timelineSwiperRef: ({
            $: import('vue').ComponentInternalInstance;
            $data: {};
            $props: {
                readonly activeSlideIdx?: number | undefined;
                readonly width?: (string | number) | undefined;
                readonly height?: (string | number) | undefined;
                readonly initialSlide?: number | undefined;
                readonly direction?: ("horizontal" | "vertical") | undefined;
                readonly slidesPerView?: number | undefined;
                readonly slidesOffsetBefore?: number | undefined;
                readonly slidesOffsetAfter?: number | undefined;
                readonly mousewheel?: boolean | undefined;
                readonly navigation?: boolean | undefined;
                readonly navDirection?: ("horizontal" | "vertical") | undefined;
                readonly navAlign?: ("center" | "start" | "end") | undefined;
                readonly navSize?: (string | number) | undefined;
                readonly navColor?: string | undefined;
                readonly navDisabledColor?: string | undefined;
                readonly transitionFun?: string | undefined;
                readonly transitionSpeed?: number | undefined;
                readonly transitionDelay?: (number | string) | undefined;
                readonly controlSwiper?: (SwiperType | SwiperType[]) | undefined;
                readonly swiperOverflow?: string | undefined;
                readonly enableSlideClick?: boolean | undefined;
                readonly slideClickHandler?: ((swiper: SwiperType) => void) | undefined;
                readonly "onUpdate:activeSlideIdx"?: ((activeSlideIdx: number) => any) | undefined;
            } & import('vue').VNodeProps & import('vue').AllowedComponentProps & import('vue').ComponentCustomProps;
            $attrs: {
                [x: string]: unknown;
            };
            $refs: {
                [x: string]: unknown;
            };
            $slots: Readonly<{
                [name: string]: import('vue').Slot<any> | undefined;
            }>;
            $root: import('vue').ComponentPublicInstance | null;
            $parent: import('vue').ComponentPublicInstance | null;
            $host: Element | null;
            $emit: (event: "update:activeSlideIdx", activeSlideIdx: number) => void;
            $el: any;
            $options: import('vue').ComponentOptionsBase<Readonly<{
                activeSlideIdx?: number;
            } & {
                width?: string | number;
                height?: string | number;
                initialSlide?: number;
                direction?: "horizontal" | "vertical";
                slidesPerView?: number;
                slidesOffsetBefore?: number;
                slidesOffsetAfter?: number;
                mousewheel?: boolean;
                navigation?: boolean;
                navDirection?: "horizontal" | "vertical";
                navAlign?: "center" | "start" | "end";
                navSize?: string | number;
                navColor?: string;
                navDisabledColor?: string;
                transitionFun?: string;
                transitionSpeed?: number;
                transitionDelay?: number | string;
                controlSwiper?: SwiperType | SwiperType[];
                swiperOverflow?: string;
                enableSlideClick?: boolean;
                slideClickHandler?: (swiper: SwiperType) => void;
            }> & Readonly<{
                "onUpdate:activeSlideIdx"?: ((activeSlideIdx: number) => any) | undefined;
            }>, {
                swiper: import('vue').Ref<{
                    params: {
                        modules?: import('swiper/types').SwiperModule[] | undefined;
                        injectStyles?: string[] | undefined;
                        injectStylesUrls?: string[] | undefined;
                        init?: boolean | undefined;
                        enabled?: boolean | undefined;
                        updateOnWindowResize?: boolean | undefined;
                        resizeObserver?: boolean | undefined;
                        initialSlide?: number | undefined;
                        direction?: ("horizontal" | "vertical") | undefined;
                        oneWayMovement?: boolean | undefined;
                        swiperElementNodeName?: string | undefined;
                        speed?: number | undefined;
                        setWrapperSize?: boolean | undefined;
                        virtualTranslate?: boolean | undefined;
                        width?: (number | null) | undefined;
                        height?: (number | null) | undefined;
                        autoHeight?: boolean | undefined;
                        roundLengths?: boolean | undefined;
                        nested?: boolean | undefined;
                        createElements?: boolean | undefined;
                        eventsPrefix?: string | undefined;
                        focusableElements?: string | undefined;
                        uniqueNavElements?: boolean | undefined;
                        effect?: ("slide" | "fade" | "cube" | "coverflow" | "flip" | "creative" | "cards" | string) | undefined;
                        runCallbacksOnInit?: boolean | undefined;
                        watchOverflow?: boolean | undefined;
                        userAgent?: (string | null) | undefined;
                        url?: (string | null) | undefined;
                        on?: {
                            init?: ((swiper: SwiperType) => any) | undefined;
                            beforeDestroy?: ((swiper: SwiperType) => void) | undefined;
                            slidesUpdated?: ((swiper: SwiperType) => void) | undefined;
                            slideChange?: ((swiper: SwiperType) => void) | undefined;
                            slideChangeTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                            slideChangeTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                            slideNextTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                            slideNextTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                            slidePrevTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                            slidePrevTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                            transitionStart?: ((swiper: SwiperType) => void) | undefined;
                            transitionEnd?: ((swiper: SwiperType) => void) | undefined;
                            touchStart?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            touchMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            touchMoveOpposite?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            sliderMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            touchEnd?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            click?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            tap?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            doubleTap?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            progress?: ((swiper: SwiperType, progress: number) => void) | undefined;
                            reachBeginning?: ((swiper: SwiperType) => void) | undefined;
                            reachEnd?: ((swiper: SwiperType) => void) | undefined;
                            toEdge?: ((swiper: SwiperType) => void) | undefined;
                            fromEdge?: ((swiper: SwiperType) => void) | undefined;
                            setTranslate?: ((swiper: SwiperType, translate: number) => void) | undefined;
                            setTransition?: ((swiper: SwiperType, transition: number) => void) | undefined;
                            resize?: ((swiper: SwiperType) => void) | undefined;
                            observerUpdate?: ((swiper: SwiperType) => void) | undefined;
                            beforeLoopFix?: ((swiper: SwiperType) => void) | undefined;
                            loopFix?: ((swiper: SwiperType) => void) | undefined;
                            breakpoint?: ((swiper: SwiperType, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                            _beforeBreakpoint?: ((swiper: SwiperType, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                            _containerClasses?: ((swiper: SwiperType, classNames: string) => void) | undefined;
                            _slideClass?: ((swiper: SwiperType, slideEl: HTMLElement, classNames: string) => void) | undefined;
                            _slideClasses?: ((swiper: SwiperType, slides: {
                                slideEl: HTMLElement;
                                classNames: string;
                                index: number;
                            }[]) => void) | undefined;
                            _swiper?: ((swiper: SwiperType) => void) | undefined;
                            _freeModeNoMomentumRelease?: ((swiper: SwiperType) => void) | undefined;
                            activeIndexChange?: ((swiper: SwiperType) => void) | undefined;
                            snapIndexChange?: ((swiper: SwiperType) => void) | undefined;
                            realIndexChange?: ((swiper: SwiperType) => void) | undefined;
                            afterInit?: ((swiper: SwiperType) => void) | undefined;
                            beforeInit?: ((swiper: SwiperType) => void) | undefined;
                            beforeResize?: ((swiper: SwiperType) => void) | undefined;
                            beforeSlideChangeStart?: ((swiper: SwiperType) => void) | undefined;
                            beforeTransitionStart?: ((swiper: SwiperType, speed: number, internal: any) => void) | undefined;
                            changeDirection?: ((swiper: SwiperType) => void) | undefined;
                            doubleClick?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            destroy?: ((swiper: SwiperType) => void) | undefined;
                            momentumBounce?: ((swiper: SwiperType) => void) | undefined;
                            orientationchange?: ((swiper: SwiperType) => void) | undefined;
                            slideResetTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                            slideResetTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                            sliderFirstMove?: ((swiper: SwiperType, event: TouchEvent) => void) | undefined;
                            slidesLengthChange?: ((swiper: SwiperType) => void) | undefined;
                            slidesGridLengthChange?: ((swiper: SwiperType) => void) | undefined;
                            snapGridLengthChange?: ((swiper: SwiperType) => void) | undefined;
                            update?: ((swiper: SwiperType) => void) | undefined;
                            lock?: ((swiper: SwiperType) => void) | undefined;
                            unlock?: ((swiper: SwiperType) => void) | undefined;
                            autoplayStart?: ((swiper: SwiperType) => void) | undefined;
                            autoplayStop?: ((swiper: SwiperType) => void) | undefined;
                            autoplayPause?: ((swiper: SwiperType) => void) | undefined;
                            autoplayResume?: ((swiper: SwiperType) => void) | undefined;
                            autoplayTimeLeft?: ((swiper: SwiperType, timeLeft: number, percentage: number) => void) | undefined;
                            autoplay?: ((swiper: SwiperType) => void) | undefined;
                            hashChange?: ((swiper: SwiperType) => void) | undefined;
                            hashSet?: ((swiper: SwiperType) => void) | undefined;
                            keyPress?: ((swiper: SwiperType, keyCode: string) => void) | undefined;
                            scroll?: ((swiper: SwiperType, event: WheelEvent) => void) | undefined;
                            navigationHide?: ((swiper: SwiperType) => void) | undefined;
                            navigationShow?: ((swiper: SwiperType) => void) | undefined;
                            navigationPrev?: ((swiper: SwiperType) => void) | undefined;
                            navigationNext?: ((swiper: SwiperType) => void) | undefined;
                            paginationRender?: ((swiper: SwiperType, paginationEl: HTMLElement) => void) | undefined;
                            paginationUpdate?: ((swiper: SwiperType, paginationEl: HTMLElement) => void) | undefined;
                            paginationHide?: ((swiper: SwiperType) => void) | undefined;
                            paginationShow?: ((swiper: SwiperType) => void) | undefined;
                            scrollbarDragStart?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            scrollbarDragMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            scrollbarDragEnd?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            zoomChange?: ((swiper: SwiperType, scale: number, imageEl: HTMLElement, slideEl: HTMLElement) => void) | undefined;
                        } | undefined;
                        onAny?: ((handler: (eventName: string, ...args: any[]) => void) => void) | undefined;
                        cssMode?: boolean | undefined;
                        spaceBetween?: (number | string) | undefined;
                        slidesPerView?: (number | "auto") | undefined;
                        maxBackfaceHiddenSlides?: number | undefined;
                        slidesPerGroup?: number | undefined;
                        slidesPerGroupSkip?: number | undefined;
                        slidesPerGroupAuto?: boolean | undefined;
                        centeredSlides?: boolean | undefined;
                        centeredSlidesBounds?: boolean | undefined;
                        slidesOffsetBefore?: number | undefined;
                        slidesOffsetAfter?: number | undefined;
                        normalizeSlideIndex?: boolean | undefined;
                        centerInsufficientSlides?: boolean | undefined;
                        grabCursor?: boolean | undefined;
                        touchEventsTarget?: ("container" | "wrapper") | undefined;
                        touchRatio?: number | undefined;
                        touchAngle?: number | undefined;
                        simulateTouch?: boolean | undefined;
                        shortSwipes?: boolean | undefined;
                        longSwipes?: boolean | undefined;
                        longSwipesRatio?: number | undefined;
                        longSwipesMs?: number | undefined;
                        followFinger?: boolean | undefined;
                        allowTouchMove?: boolean | undefined;
                        threshold?: number | undefined;
                        touchStartPreventDefault?: boolean | undefined;
                        touchStartForcePreventDefault?: boolean | undefined;
                        touchMoveStopPropagation?: boolean | undefined;
                        edgeSwipeDetection?: (boolean | string) | undefined;
                        edgeSwipeThreshold?: number | undefined;
                        touchReleaseOnEdges?: boolean | undefined;
                        passiveListeners?: boolean | undefined;
                        resistance?: boolean | undefined;
                        resistanceRatio?: number | undefined;
                        preventInteractionOnTransition?: boolean | undefined;
                        allowSlidePrev?: boolean | undefined;
                        allowSlideNext?: boolean | undefined;
                        noSwiping?: boolean | undefined;
                        noSwipingClass?: string | undefined;
                        noSwipingSelector?: string | undefined;
                        swipeHandler?: HTMLElement | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | null | undefined;
                        preventClicks?: boolean | undefined;
                        preventClicksPropagation?: boolean | undefined;
                        slideToClickedSlide?: boolean | undefined;
                        watchSlidesProgress?: boolean | undefined;
                        loop?: boolean | undefined;
                        loopAddBlankSlides?: boolean | undefined;
                        loopAdditionalSlides?: number | undefined;
                        loopPreventsSliding?: boolean | undefined;
                        rewind?: boolean | undefined;
                        breakpoints?: {
                            [width: number]: import('swiper/types').SwiperOptions;
                            [ratio: string]: import('swiper/types').SwiperOptions;
                        } | undefined;
                        breakpointsBase?: ("window" | "container") | undefined;
                        observer?: boolean | undefined;
                        observeSlideChildren?: boolean | undefined;
                        observeParents?: boolean | undefined;
                        containerModifierClass?: string | undefined;
                        slideClass?: string | undefined;
                        slideActiveClass?: string | undefined;
                        slideVisibleClass?: string | undefined;
                        slideFullyVisibleClass?: string | undefined;
                        slideBlankClass?: string | undefined;
                        slideNextClass?: string | undefined;
                        slidePrevClass?: string | undefined;
                        wrapperClass?: string | undefined;
                        lazyPreloaderClass?: string | undefined;
                        lazyPreloadPrevNext?: number | undefined;
                        a11y?: {
                            enabled?: boolean | undefined;
                            prevSlideMessage?: string | undefined;
                            nextSlideMessage?: string | undefined;
                            firstSlideMessage?: string | undefined;
                            lastSlideMessage?: string | undefined;
                            paginationBulletMessage?: string | undefined;
                            notificationClass?: string | undefined;
                            containerMessage?: (string | null) | undefined;
                            containerRoleDescriptionMessage?: (string | null) | undefined;
                            containerRole?: (string | null) | undefined;
                            itemRoleDescriptionMessage?: (string | null) | undefined;
                            slideLabelMessage?: string | undefined;
                            slideRole?: string | undefined;
                            id?: (string | number | null) | undefined;
                            scrollOnFocus?: boolean | undefined;
                        } | undefined;
                        autoplay?: boolean | {
                            delay?: number | undefined;
                            stopOnLastSlide?: boolean | undefined;
                            disableOnInteraction?: boolean | undefined;
                            reverseDirection?: boolean | undefined;
                            waitForTransition?: boolean | undefined;
                            pauseOnMouseEnter?: boolean | undefined;
                        } | undefined;
                        controller?: {
                            control?: string | HTMLElement | any | any[] | null | undefined;
                            inverse?: boolean | undefined;
                            by?: ("slide" | "container") | undefined;
                        } | undefined;
                        coverflowEffect?: {
                            slideShadows?: boolean | undefined;
                            rotate?: number | undefined;
                            stretch?: number | undefined;
                            depth?: number | undefined;
                            scale?: number | undefined;
                            modifier?: number | undefined;
                        } | undefined;
                        cubeEffect?: {
                            slideShadows?: boolean | undefined;
                            shadow?: boolean | undefined;
                            shadowOffset?: number | undefined;
                            shadowScale?: number | undefined;
                        } | undefined;
                        fadeEffect?: {
                            crossFade?: boolean | undefined;
                        } | undefined;
                        flipEffect?: {
                            slideShadows?: boolean | undefined;
                            limitRotation?: boolean | undefined;
                        } | undefined;
                        creativeEffect?: {
                            prev?: {
                                translate?: (string | number)[] | undefined;
                                rotate?: number[] | undefined;
                                opacity?: number | undefined;
                                scale?: number | undefined;
                                shadow?: boolean | undefined;
                                origin?: string | undefined;
                            } | undefined;
                            next?: {
                                translate?: (string | number)[] | undefined;
                                rotate?: number[] | undefined;
                                opacity?: number | undefined;
                                scale?: number | undefined;
                                shadow?: boolean | undefined;
                                origin?: string | undefined;
                            } | undefined;
                            limitProgress?: number | undefined;
                            shadowPerProgress?: boolean | undefined;
                            progressMultiplier?: number | undefined;
                            perspective?: boolean | undefined;
                        } | undefined;
                        cardsEffect?: {
                            slideShadows?: boolean | undefined;
                            rotate?: boolean | undefined;
                            perSlideRotate?: number | undefined;
                            perSlideOffset?: number | undefined;
                        } | undefined;
                        hashNavigation?: boolean | {
                            watchState?: boolean | undefined;
                            replaceState?: boolean | undefined;
                            getSlideIndex?: ((swiper: SwiperType, hash: string) => number) | undefined;
                        } | undefined;
                        history?: boolean | {
                            enabled?: boolean | undefined;
                            root?: string | undefined;
                            replaceState?: boolean | undefined;
                            key?: string | undefined;
                            keepQuery?: boolean | undefined;
                        } | undefined;
                        keyboard?: boolean | {
                            enabled?: boolean | undefined;
                            onlyInViewport?: boolean | undefined;
                            pageUpDown?: boolean | undefined;
                        } | undefined;
                        mousewheel?: boolean | {
                            enabled?: boolean | undefined;
                            forceToAxis?: boolean | undefined;
                            releaseOnEdges?: boolean | undefined;
                            invert?: boolean | undefined;
                            sensitivity?: number | undefined;
                            eventsTarget?: HTMLElement | "container" | "wrapper" | {
                                readonly [x: number]: string;
                                toString: () => string;
                                charAt: (pos: number) => string;
                                charCodeAt: (index: number) => number;
                                concat: (...strings: string[]) => string;
                                indexOf: (searchString: string, position?: number) => number;
                                lastIndexOf: (searchString: string, position?: number) => number;
                                localeCompare: {
                                    (that: string): number;
                                    (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                    (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                                };
                                match: {
                                    (regexp: string | RegExp): RegExpMatchArray | null;
                                    (matcher: {
                                        [Symbol.match](string: string): RegExpMatchArray | null;
                                    }): RegExpMatchArray | null;
                                };
                                replace: {
                                    (searchValue: string | RegExp, replaceValue: string): string;
                                    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replaceValue: string): string;
                                    }, replaceValue: string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                    }, replacer: (substring: string, ...args: any[]) => string): string;
                                };
                                search: {
                                    (regexp: string | RegExp): number;
                                    (searcher: {
                                        [Symbol.search](string: string): number;
                                    }): number;
                                };
                                slice: (start?: number, end?: number) => string;
                                split: {
                                    (separator: string | RegExp, limit?: number): string[];
                                    (splitter: {
                                        [Symbol.split](string: string, limit?: number): string[];
                                    }, limit?: number): string[];
                                };
                                substring: (start: number, end?: number) => string;
                                toLowerCase: () => string;
                                toLocaleLowerCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                toUpperCase: () => string;
                                toLocaleUpperCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                trim: () => string;
                                readonly length: number;
                                substr: (from: number, length?: number) => string;
                                valueOf: () => string;
                                codePointAt: (pos: number) => number | undefined;
                                includes: (searchString: string, position?: number) => boolean;
                                endsWith: (searchString: string, endPosition?: number) => boolean;
                                normalize: {
                                    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                    (form?: string): string;
                                };
                                repeat: (count: number) => string;
                                startsWith: (searchString: string, position?: number) => boolean;
                                anchor: (name: string) => string;
                                big: () => string;
                                blink: () => string;
                                bold: () => string;
                                fixed: () => string;
                                fontcolor: (color: string) => string;
                                fontsize: {
                                    (size: number): string;
                                    (size: string): string;
                                };
                                italics: () => string;
                                link: (url: string) => string;
                                small: () => string;
                                strike: () => string;
                                sub: () => string;
                                sup: () => string;
                                padStart: (maxLength: number, fillString?: string) => string;
                                padEnd: (maxLength: number, fillString?: string) => string;
                                trimEnd: () => string;
                                trimStart: () => string;
                                trimLeft: () => string;
                                trimRight: () => string;
                                matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                                [Symbol.iterator]: () => StringIterator<string>;
                                at: (index: number) => string | undefined;
                            } | undefined;
                            thresholdDelta?: (number | null) | undefined;
                            thresholdTime?: (number | null) | undefined;
                            noMousewheelClass?: string | undefined;
                        } | undefined;
                        navigation?: boolean | {
                            enabled?: boolean | undefined;
                            nextEl?: HTMLElement | {
                                readonly [x: number]: string;
                                toString: () => string;
                                charAt: (pos: number) => string;
                                charCodeAt: (index: number) => number;
                                concat: (...strings: string[]) => string;
                                indexOf: (searchString: string, position?: number) => number;
                                lastIndexOf: (searchString: string, position?: number) => number;
                                localeCompare: {
                                    (that: string): number;
                                    (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                    (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                                };
                                match: {
                                    (regexp: string | RegExp): RegExpMatchArray | null;
                                    (matcher: {
                                        [Symbol.match](string: string): RegExpMatchArray | null;
                                    }): RegExpMatchArray | null;
                                };
                                replace: {
                                    (searchValue: string | RegExp, replaceValue: string): string;
                                    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replaceValue: string): string;
                                    }, replaceValue: string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                    }, replacer: (substring: string, ...args: any[]) => string): string;
                                };
                                search: {
                                    (regexp: string | RegExp): number;
                                    (searcher: {
                                        [Symbol.search](string: string): number;
                                    }): number;
                                };
                                slice: (start?: number, end?: number) => string;
                                split: {
                                    (separator: string | RegExp, limit?: number): string[];
                                    (splitter: {
                                        [Symbol.split](string: string, limit?: number): string[];
                                    }, limit?: number): string[];
                                };
                                substring: (start: number, end?: number) => string;
                                toLowerCase: () => string;
                                toLocaleLowerCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                toUpperCase: () => string;
                                toLocaleUpperCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                trim: () => string;
                                readonly length: number;
                                substr: (from: number, length?: number) => string;
                                valueOf: () => string;
                                codePointAt: (pos: number) => number | undefined;
                                includes: (searchString: string, position?: number) => boolean;
                                endsWith: (searchString: string, endPosition?: number) => boolean;
                                normalize: {
                                    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                    (form?: string): string;
                                };
                                repeat: (count: number) => string;
                                startsWith: (searchString: string, position?: number) => boolean;
                                anchor: (name: string) => string;
                                big: () => string;
                                blink: () => string;
                                bold: () => string;
                                fixed: () => string;
                                fontcolor: (color: string) => string;
                                fontsize: {
                                    (size: number): string;
                                    (size: string): string;
                                };
                                italics: () => string;
                                link: (url: string) => string;
                                small: () => string;
                                strike: () => string;
                                sub: () => string;
                                sup: () => string;
                                padStart: (maxLength: number, fillString?: string) => string;
                                padEnd: (maxLength: number, fillString?: string) => string;
                                trimEnd: () => string;
                                trimStart: () => string;
                                trimLeft: () => string;
                                trimRight: () => string;
                                matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                                [Symbol.iterator]: () => StringIterator<string>;
                                at: (index: number) => string | undefined;
                            } | null | undefined;
                            prevEl?: HTMLElement | {
                                readonly [x: number]: string;
                                toString: () => string;
                                charAt: (pos: number) => string;
                                charCodeAt: (index: number) => number;
                                concat: (...strings: string[]) => string;
                                indexOf: (searchString: string, position?: number) => number;
                                lastIndexOf: (searchString: string, position?: number) => number;
                                localeCompare: {
                                    (that: string): number;
                                    (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                    (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                                };
                                match: {
                                    (regexp: string | RegExp): RegExpMatchArray | null;
                                    (matcher: {
                                        [Symbol.match](string: string): RegExpMatchArray | null;
                                    }): RegExpMatchArray | null;
                                };
                                replace: {
                                    (searchValue: string | RegExp, replaceValue: string): string;
                                    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replaceValue: string): string;
                                    }, replaceValue: string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                    }, replacer: (substring: string, ...args: any[]) => string): string;
                                };
                                search: {
                                    (regexp: string | RegExp): number;
                                    (searcher: {
                                        [Symbol.search](string: string): number;
                                    }): number;
                                };
                                slice: (start?: number, end?: number) => string;
                                split: {
                                    (separator: string | RegExp, limit?: number): string[];
                                    (splitter: {
                                        [Symbol.split](string: string, limit?: number): string[];
                                    }, limit?: number): string[];
                                };
                                substring: (start: number, end?: number) => string;
                                toLowerCase: () => string;
                                toLocaleLowerCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                toUpperCase: () => string;
                                toLocaleUpperCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                trim: () => string;
                                readonly length: number;
                                substr: (from: number, length?: number) => string;
                                valueOf: () => string;
                                codePointAt: (pos: number) => number | undefined;
                                includes: (searchString: string, position?: number) => boolean;
                                endsWith: (searchString: string, endPosition?: number) => boolean;
                                normalize: {
                                    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                    (form?: string): string;
                                };
                                repeat: (count: number) => string;
                                startsWith: (searchString: string, position?: number) => boolean;
                                anchor: (name: string) => string;
                                big: () => string;
                                blink: () => string;
                                bold: () => string;
                                fixed: () => string;
                                fontcolor: (color: string) => string;
                                fontsize: {
                                    (size: number): string;
                                    (size: string): string;
                                };
                                italics: () => string;
                                link: (url: string) => string;
                                small: () => string;
                                strike: () => string;
                                sub: () => string;
                                sup: () => string;
                                padStart: (maxLength: number, fillString?: string) => string;
                                padEnd: (maxLength: number, fillString?: string) => string;
                                trimEnd: () => string;
                                trimStart: () => string;
                                trimLeft: () => string;
                                trimRight: () => string;
                                matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                                [Symbol.iterator]: () => StringIterator<string>;
                                at: (index: number) => string | undefined;
                            } | null | undefined;
                            hideOnClick?: boolean | undefined;
                            disabledClass?: string | undefined;
                            hiddenClass?: string | undefined;
                            lockClass?: string | undefined;
                            navigationDisabledClass?: string | undefined;
                        } | undefined;
                        pagination?: boolean | {
                            enabled?: boolean | undefined;
                            el?: HTMLElement | {
                                readonly [x: number]: string;
                                toString: () => string;
                                charAt: (pos: number) => string;
                                charCodeAt: (index: number) => number;
                                concat: (...strings: string[]) => string;
                                indexOf: (searchString: string, position?: number) => number;
                                lastIndexOf: (searchString: string, position?: number) => number;
                                localeCompare: {
                                    (that: string): number;
                                    (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                    (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                                };
                                match: {
                                    (regexp: string | RegExp): RegExpMatchArray | null;
                                    (matcher: {
                                        [Symbol.match](string: string): RegExpMatchArray | null;
                                    }): RegExpMatchArray | null;
                                };
                                replace: {
                                    (searchValue: string | RegExp, replaceValue: string): string;
                                    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replaceValue: string): string;
                                    }, replaceValue: string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                    }, replacer: (substring: string, ...args: any[]) => string): string;
                                };
                                search: {
                                    (regexp: string | RegExp): number;
                                    (searcher: {
                                        [Symbol.search](string: string): number;
                                    }): number;
                                };
                                slice: (start?: number, end?: number) => string;
                                split: {
                                    (separator: string | RegExp, limit?: number): string[];
                                    (splitter: {
                                        [Symbol.split](string: string, limit?: number): string[];
                                    }, limit?: number): string[];
                                };
                                substring: (start: number, end?: number) => string;
                                toLowerCase: () => string;
                                toLocaleLowerCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                toUpperCase: () => string;
                                toLocaleUpperCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                trim: () => string;
                                readonly length: number;
                                substr: (from: number, length?: number) => string;
                                valueOf: () => string;
                                codePointAt: (pos: number) => number | undefined;
                                includes: (searchString: string, position?: number) => boolean;
                                endsWith: (searchString: string, endPosition?: number) => boolean;
                                normalize: {
                                    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                    (form?: string): string;
                                };
                                repeat: (count: number) => string;
                                startsWith: (searchString: string, position?: number) => boolean;
                                anchor: (name: string) => string;
                                big: () => string;
                                blink: () => string;
                                bold: () => string;
                                fixed: () => string;
                                fontcolor: (color: string) => string;
                                fontsize: {
                                    (size: number): string;
                                    (size: string): string;
                                };
                                italics: () => string;
                                link: (url: string) => string;
                                small: () => string;
                                strike: () => string;
                                sub: () => string;
                                sup: () => string;
                                padStart: (maxLength: number, fillString?: string) => string;
                                padEnd: (maxLength: number, fillString?: string) => string;
                                trimEnd: () => string;
                                trimStart: () => string;
                                trimLeft: () => string;
                                trimRight: () => string;
                                matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                                [Symbol.iterator]: () => StringIterator<string>;
                                at: (index: number) => string | undefined;
                            } | null | undefined;
                            type?: ("bullets" | "fraction" | "progressbar" | "custom") | undefined;
                            bulletElement?: string | undefined;
                            dynamicBullets?: boolean | undefined;
                            dynamicMainBullets?: number | undefined;
                            hideOnClick?: boolean | undefined;
                            clickable?: boolean | undefined;
                            progressbarOpposite?: boolean | undefined;
                            formatFractionCurrent?: ((number: number) => number | string) | undefined;
                            formatFractionTotal?: ((number: number) => number | string) | undefined;
                            renderBullet?: ((index: number, className: string) => string) | undefined;
                            renderFraction?: ((currentClass: string, totalClass: string) => string) | undefined;
                            renderProgressbar?: ((progressbarFillClass: string) => string) | undefined;
                            renderCustom?: ((swiper: SwiperType, current: number, total: number) => string) | undefined;
                            bulletClass?: string | undefined;
                            bulletActiveClass?: string | undefined;
                            modifierClass?: string | undefined;
                            currentClass?: string | undefined;
                            totalClass?: string | undefined;
                            hiddenClass?: string | undefined;
                            progressbarFillClass?: string | undefined;
                            progressbarOppositeClass?: string | undefined;
                            clickableClass?: string | undefined;
                            lockClass?: string | undefined;
                            horizontalClass?: string | undefined;
                            verticalClass?: string | undefined;
                            paginationDisabledClass?: string | undefined;
                        } | undefined;
                        parallax?: boolean | {
                            enabled?: boolean | undefined;
                        } | undefined;
                        scrollbar?: boolean | {
                            enabled?: boolean | undefined;
                            el?: HTMLElement | {
                                readonly [x: number]: string;
                                toString: () => string;
                                charAt: (pos: number) => string;
                                charCodeAt: (index: number) => number;
                                concat: (...strings: string[]) => string;
                                indexOf: (searchString: string, position?: number) => number;
                                lastIndexOf: (searchString: string, position?: number) => number;
                                localeCompare: {
                                    (that: string): number;
                                    (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                    (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                                };
                                match: {
                                    (regexp: string | RegExp): RegExpMatchArray | null;
                                    (matcher: {
                                        [Symbol.match](string: string): RegExpMatchArray | null;
                                    }): RegExpMatchArray | null;
                                };
                                replace: {
                                    (searchValue: string | RegExp, replaceValue: string): string;
                                    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replaceValue: string): string;
                                    }, replaceValue: string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                    }, replacer: (substring: string, ...args: any[]) => string): string;
                                };
                                search: {
                                    (regexp: string | RegExp): number;
                                    (searcher: {
                                        [Symbol.search](string: string): number;
                                    }): number;
                                };
                                slice: (start?: number, end?: number) => string;
                                split: {
                                    (separator: string | RegExp, limit?: number): string[];
                                    (splitter: {
                                        [Symbol.split](string: string, limit?: number): string[];
                                    }, limit?: number): string[];
                                };
                                substring: (start: number, end?: number) => string;
                                toLowerCase: () => string;
                                toLocaleLowerCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                toUpperCase: () => string;
                                toLocaleUpperCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                trim: () => string;
                                readonly length: number;
                                substr: (from: number, length?: number) => string;
                                valueOf: () => string;
                                codePointAt: (pos: number) => number | undefined;
                                includes: (searchString: string, position?: number) => boolean;
                                endsWith: (searchString: string, endPosition?: number) => boolean;
                                normalize: {
                                    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                    (form?: string): string;
                                };
                                repeat: (count: number) => string;
                                startsWith: (searchString: string, position?: number) => boolean;
                                anchor: (name: string) => string;
                                big: () => string;
                                blink: () => string;
                                bold: () => string;
                                fixed: () => string;
                                fontcolor: (color: string) => string;
                                fontsize: {
                                    (size: number): string;
                                    (size: string): string;
                                };
                                italics: () => string;
                                link: (url: string) => string;
                                small: () => string;
                                strike: () => string;
                                sub: () => string;
                                sup: () => string;
                                padStart: (maxLength: number, fillString?: string) => string;
                                padEnd: (maxLength: number, fillString?: string) => string;
                                trimEnd: () => string;
                                trimStart: () => string;
                                trimLeft: () => string;
                                trimRight: () => string;
                                matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                                [Symbol.iterator]: () => StringIterator<string>;
                                at: (index: number) => string | undefined;
                            } | null | undefined;
                            hide?: boolean | undefined;
                            draggable?: boolean | undefined;
                            snapOnRelease?: boolean | undefined;
                            dragSize?: ("auto" | number) | undefined;
                            lockClass?: string | undefined;
                            dragClass?: string | undefined;
                            scrollbarDisabledClass?: string | undefined;
                            horizontalClass?: string | undefined;
                            verticalClass?: string | undefined;
                        } | undefined;
                        thumbs?: {
                            swiper?: string | any | null | undefined;
                            slideThumbActiveClass?: string | undefined;
                            thumbsContainerClass?: string | undefined;
                            multipleActiveThumbs?: boolean | undefined;
                            autoScrollOffset?: number | undefined;
                        } | undefined;
                        virtual?: boolean | {
                            enabled?: boolean | undefined;
                            slides?: any[] | undefined;
                            cache?: boolean | undefined;
                            addSlidesBefore?: number | undefined;
                            addSlidesAfter?: number | undefined;
                            renderSlide?: ((slide: any, index: any) => any | null) | undefined;
                            renderExternal?: ((data: import('swiper/types').VirtualData<any>) => any | null) | undefined;
                            renderExternalUpdate?: boolean | undefined;
                        } | undefined;
                        zoom?: boolean | {
                            limitToOriginalSize?: boolean | undefined;
                            maxRatio?: number | undefined;
                            minRatio?: number | undefined;
                            toggle?: boolean | undefined;
                            containerClass?: string | undefined;
                            zoomedSlideClass?: string | undefined;
                        } | undefined;
                        freeMode?: boolean | {
                            enabled?: boolean | undefined;
                            momentum?: boolean | undefined;
                            momentumRatio?: number | undefined;
                            momentumVelocityRatio?: number | undefined;
                            momentumBounce?: boolean | undefined;
                            momentumBounceRatio?: number | undefined;
                            minimumVelocity?: number | undefined;
                            sticky?: boolean | undefined;
                        } | undefined;
                        grid?: {
                            rows?: number | undefined;
                            fill?: ("row" | "column") | undefined;
                        } | undefined;
                        _emitClasses?: boolean | undefined;
                    };
                    originalParams: {
                        modules?: import('swiper/types').SwiperModule[] | undefined;
                        injectStyles?: string[] | undefined;
                        injectStylesUrls?: string[] | undefined;
                        init?: boolean | undefined;
                        enabled?: boolean | undefined;
                        updateOnWindowResize?: boolean | undefined;
                        resizeObserver?: boolean | undefined;
                        initialSlide?: number | undefined;
                        direction?: ("horizontal" | "vertical") | undefined;
                        oneWayMovement?: boolean | undefined;
                        swiperElementNodeName?: string | undefined;
                        speed?: number | undefined;
                        setWrapperSize?: boolean | undefined;
                        virtualTranslate?: boolean | undefined;
                        width?: (number | null) | undefined;
                        height?: (number | null) | undefined;
                        autoHeight?: boolean | undefined;
                        roundLengths?: boolean | undefined;
                        nested?: boolean | undefined;
                        createElements?: boolean | undefined;
                        eventsPrefix?: string | undefined;
                        focusableElements?: string | undefined;
                        uniqueNavElements?: boolean | undefined;
                        effect?: ("slide" | "fade" | "cube" | "coverflow" | "flip" | "creative" | "cards" | string) | undefined;
                        runCallbacksOnInit?: boolean | undefined;
                        watchOverflow?: boolean | undefined;
                        userAgent?: (string | null) | undefined;
                        url?: (string | null) | undefined;
                        on?: {
                            init?: ((swiper: SwiperType) => any) | undefined;
                            beforeDestroy?: ((swiper: SwiperType) => void) | undefined;
                            slidesUpdated?: ((swiper: SwiperType) => void) | undefined;
                            slideChange?: ((swiper: SwiperType) => void) | undefined;
                            slideChangeTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                            slideChangeTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                            slideNextTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                            slideNextTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                            slidePrevTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                            slidePrevTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                            transitionStart?: ((swiper: SwiperType) => void) | undefined;
                            transitionEnd?: ((swiper: SwiperType) => void) | undefined;
                            touchStart?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            touchMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            touchMoveOpposite?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            sliderMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            touchEnd?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            click?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            tap?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            doubleTap?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            progress?: ((swiper: SwiperType, progress: number) => void) | undefined;
                            reachBeginning?: ((swiper: SwiperType) => void) | undefined;
                            reachEnd?: ((swiper: SwiperType) => void) | undefined;
                            toEdge?: ((swiper: SwiperType) => void) | undefined;
                            fromEdge?: ((swiper: SwiperType) => void) | undefined;
                            setTranslate?: ((swiper: SwiperType, translate: number) => void) | undefined;
                            setTransition?: ((swiper: SwiperType, transition: number) => void) | undefined;
                            resize?: ((swiper: SwiperType) => void) | undefined;
                            observerUpdate?: ((swiper: SwiperType) => void) | undefined;
                            beforeLoopFix?: ((swiper: SwiperType) => void) | undefined;
                            loopFix?: ((swiper: SwiperType) => void) | undefined;
                            breakpoint?: ((swiper: SwiperType, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                            _beforeBreakpoint?: ((swiper: SwiperType, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                            _containerClasses?: ((swiper: SwiperType, classNames: string) => void) | undefined;
                            _slideClass?: ((swiper: SwiperType, slideEl: HTMLElement, classNames: string) => void) | undefined;
                            _slideClasses?: ((swiper: SwiperType, slides: {
                                slideEl: HTMLElement;
                                classNames: string;
                                index: number;
                            }[]) => void) | undefined;
                            _swiper?: ((swiper: SwiperType) => void) | undefined;
                            _freeModeNoMomentumRelease?: ((swiper: SwiperType) => void) | undefined;
                            activeIndexChange?: ((swiper: SwiperType) => void) | undefined;
                            snapIndexChange?: ((swiper: SwiperType) => void) | undefined;
                            realIndexChange?: ((swiper: SwiperType) => void) | undefined;
                            afterInit?: ((swiper: SwiperType) => void) | undefined;
                            beforeInit?: ((swiper: SwiperType) => void) | undefined;
                            beforeResize?: ((swiper: SwiperType) => void) | undefined;
                            beforeSlideChangeStart?: ((swiper: SwiperType) => void) | undefined;
                            beforeTransitionStart?: ((swiper: SwiperType, speed: number, internal: any) => void) | undefined;
                            changeDirection?: ((swiper: SwiperType) => void) | undefined;
                            doubleClick?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            destroy?: ((swiper: SwiperType) => void) | undefined;
                            momentumBounce?: ((swiper: SwiperType) => void) | undefined;
                            orientationchange?: ((swiper: SwiperType) => void) | undefined;
                            slideResetTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                            slideResetTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                            sliderFirstMove?: ((swiper: SwiperType, event: TouchEvent) => void) | undefined;
                            slidesLengthChange?: ((swiper: SwiperType) => void) | undefined;
                            slidesGridLengthChange?: ((swiper: SwiperType) => void) | undefined;
                            snapGridLengthChange?: ((swiper: SwiperType) => void) | undefined;
                            update?: ((swiper: SwiperType) => void) | undefined;
                            lock?: ((swiper: SwiperType) => void) | undefined;
                            unlock?: ((swiper: SwiperType) => void) | undefined;
                            autoplayStart?: ((swiper: SwiperType) => void) | undefined;
                            autoplayStop?: ((swiper: SwiperType) => void) | undefined;
                            autoplayPause?: ((swiper: SwiperType) => void) | undefined;
                            autoplayResume?: ((swiper: SwiperType) => void) | undefined;
                            autoplayTimeLeft?: ((swiper: SwiperType, timeLeft: number, percentage: number) => void) | undefined;
                            autoplay?: ((swiper: SwiperType) => void) | undefined;
                            hashChange?: ((swiper: SwiperType) => void) | undefined;
                            hashSet?: ((swiper: SwiperType) => void) | undefined;
                            keyPress?: ((swiper: SwiperType, keyCode: string) => void) | undefined;
                            scroll?: ((swiper: SwiperType, event: WheelEvent) => void) | undefined;
                            navigationHide?: ((swiper: SwiperType) => void) | undefined;
                            navigationShow?: ((swiper: SwiperType) => void) | undefined;
                            navigationPrev?: ((swiper: SwiperType) => void) | undefined;
                            navigationNext?: ((swiper: SwiperType) => void) | undefined;
                            paginationRender?: ((swiper: SwiperType, paginationEl: HTMLElement) => void) | undefined;
                            paginationUpdate?: ((swiper: SwiperType, paginationEl: HTMLElement) => void) | undefined;
                            paginationHide?: ((swiper: SwiperType) => void) | undefined;
                            paginationShow?: ((swiper: SwiperType) => void) | undefined;
                            scrollbarDragStart?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            scrollbarDragMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            scrollbarDragEnd?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            zoomChange?: ((swiper: SwiperType, scale: number, imageEl: HTMLElement, slideEl: HTMLElement) => void) | undefined;
                        } | undefined;
                        onAny?: ((handler: (eventName: string, ...args: any[]) => void) => void) | undefined;
                        cssMode?: boolean | undefined;
                        spaceBetween?: (number | string) | undefined;
                        slidesPerView?: (number | "auto") | undefined;
                        maxBackfaceHiddenSlides?: number | undefined;
                        slidesPerGroup?: number | undefined;
                        slidesPerGroupSkip?: number | undefined;
                        slidesPerGroupAuto?: boolean | undefined;
                        centeredSlides?: boolean | undefined;
                        centeredSlidesBounds?: boolean | undefined;
                        slidesOffsetBefore?: number | undefined;
                        slidesOffsetAfter?: number | undefined;
                        normalizeSlideIndex?: boolean | undefined;
                        centerInsufficientSlides?: boolean | undefined;
                        grabCursor?: boolean | undefined;
                        touchEventsTarget?: ("container" | "wrapper") | undefined;
                        touchRatio?: number | undefined;
                        touchAngle?: number | undefined;
                        simulateTouch?: boolean | undefined;
                        shortSwipes?: boolean | undefined;
                        longSwipes?: boolean | undefined;
                        longSwipesRatio?: number | undefined;
                        longSwipesMs?: number | undefined;
                        followFinger?: boolean | undefined;
                        allowTouchMove?: boolean | undefined;
                        threshold?: number | undefined;
                        touchStartPreventDefault?: boolean | undefined;
                        touchStartForcePreventDefault?: boolean | undefined;
                        touchMoveStopPropagation?: boolean | undefined;
                        edgeSwipeDetection?: (boolean | string) | undefined;
                        edgeSwipeThreshold?: number | undefined;
                        touchReleaseOnEdges?: boolean | undefined;
                        passiveListeners?: boolean | undefined;
                        resistance?: boolean | undefined;
                        resistanceRatio?: number | undefined;
                        preventInteractionOnTransition?: boolean | undefined;
                        allowSlidePrev?: boolean | undefined;
                        allowSlideNext?: boolean | undefined;
                        noSwiping?: boolean | undefined;
                        noSwipingClass?: string | undefined;
                        noSwipingSelector?: string | undefined;
                        swipeHandler?: HTMLElement | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | null | undefined;
                        preventClicks?: boolean | undefined;
                        preventClicksPropagation?: boolean | undefined;
                        slideToClickedSlide?: boolean | undefined;
                        watchSlidesProgress?: boolean | undefined;
                        loop?: boolean | undefined;
                        loopAddBlankSlides?: boolean | undefined;
                        loopAdditionalSlides?: number | undefined;
                        loopPreventsSliding?: boolean | undefined;
                        rewind?: boolean | undefined;
                        breakpoints?: {
                            [width: number]: import('swiper/types').SwiperOptions;
                            [ratio: string]: import('swiper/types').SwiperOptions;
                        } | undefined;
                        breakpointsBase?: ("window" | "container") | undefined;
                        observer?: boolean | undefined;
                        observeSlideChildren?: boolean | undefined;
                        observeParents?: boolean | undefined;
                        containerModifierClass?: string | undefined;
                        slideClass?: string | undefined;
                        slideActiveClass?: string | undefined;
                        slideVisibleClass?: string | undefined;
                        slideFullyVisibleClass?: string | undefined;
                        slideBlankClass?: string | undefined;
                        slideNextClass?: string | undefined;
                        slidePrevClass?: string | undefined;
                        wrapperClass?: string | undefined;
                        lazyPreloaderClass?: string | undefined;
                        lazyPreloadPrevNext?: number | undefined;
                        a11y?: {
                            enabled?: boolean | undefined;
                            prevSlideMessage?: string | undefined;
                            nextSlideMessage?: string | undefined;
                            firstSlideMessage?: string | undefined;
                            lastSlideMessage?: string | undefined;
                            paginationBulletMessage?: string | undefined;
                            notificationClass?: string | undefined;
                            containerMessage?: (string | null) | undefined;
                            containerRoleDescriptionMessage?: (string | null) | undefined;
                            containerRole?: (string | null) | undefined;
                            itemRoleDescriptionMessage?: (string | null) | undefined;
                            slideLabelMessage?: string | undefined;
                            slideRole?: string | undefined;
                            id?: (string | number | null) | undefined;
                            scrollOnFocus?: boolean | undefined;
                        } | undefined;
                        autoplay?: boolean | {
                            delay?: number | undefined;
                            stopOnLastSlide?: boolean | undefined;
                            disableOnInteraction?: boolean | undefined;
                            reverseDirection?: boolean | undefined;
                            waitForTransition?: boolean | undefined;
                            pauseOnMouseEnter?: boolean | undefined;
                        } | undefined;
                        controller?: {
                            control?: string | HTMLElement | any | any[] | null | undefined;
                            inverse?: boolean | undefined;
                            by?: ("slide" | "container") | undefined;
                        } | undefined;
                        coverflowEffect?: {
                            slideShadows?: boolean | undefined;
                            rotate?: number | undefined;
                            stretch?: number | undefined;
                            depth?: number | undefined;
                            scale?: number | undefined;
                            modifier?: number | undefined;
                        } | undefined;
                        cubeEffect?: {
                            slideShadows?: boolean | undefined;
                            shadow?: boolean | undefined;
                            shadowOffset?: number | undefined;
                            shadowScale?: number | undefined;
                        } | undefined;
                        fadeEffect?: {
                            crossFade?: boolean | undefined;
                        } | undefined;
                        flipEffect?: {
                            slideShadows?: boolean | undefined;
                            limitRotation?: boolean | undefined;
                        } | undefined;
                        creativeEffect?: {
                            prev?: {
                                translate?: (string | number)[] | undefined;
                                rotate?: number[] | undefined;
                                opacity?: number | undefined;
                                scale?: number | undefined;
                                shadow?: boolean | undefined;
                                origin?: string | undefined;
                            } | undefined;
                            next?: {
                                translate?: (string | number)[] | undefined;
                                rotate?: number[] | undefined;
                                opacity?: number | undefined;
                                scale?: number | undefined;
                                shadow?: boolean | undefined;
                                origin?: string | undefined;
                            } | undefined;
                            limitProgress?: number | undefined;
                            shadowPerProgress?: boolean | undefined;
                            progressMultiplier?: number | undefined;
                            perspective?: boolean | undefined;
                        } | undefined;
                        cardsEffect?: {
                            slideShadows?: boolean | undefined;
                            rotate?: boolean | undefined;
                            perSlideRotate?: number | undefined;
                            perSlideOffset?: number | undefined;
                        } | undefined;
                        hashNavigation?: boolean | {
                            watchState?: boolean | undefined;
                            replaceState?: boolean | undefined;
                            getSlideIndex?: ((swiper: SwiperType, hash: string) => number) | undefined;
                        } | undefined;
                        history?: boolean | {
                            enabled?: boolean | undefined;
                            root?: string | undefined;
                            replaceState?: boolean | undefined;
                            key?: string | undefined;
                            keepQuery?: boolean | undefined;
                        } | undefined;
                        keyboard?: boolean | {
                            enabled?: boolean | undefined;
                            onlyInViewport?: boolean | undefined;
                            pageUpDown?: boolean | undefined;
                        } | undefined;
                        mousewheel?: boolean | {
                            enabled?: boolean | undefined;
                            forceToAxis?: boolean | undefined;
                            releaseOnEdges?: boolean | undefined;
                            invert?: boolean | undefined;
                            sensitivity?: number | undefined;
                            eventsTarget?: HTMLElement | "container" | "wrapper" | {
                                readonly [x: number]: string;
                                toString: () => string;
                                charAt: (pos: number) => string;
                                charCodeAt: (index: number) => number;
                                concat: (...strings: string[]) => string;
                                indexOf: (searchString: string, position?: number) => number;
                                lastIndexOf: (searchString: string, position?: number) => number;
                                localeCompare: {
                                    (that: string): number;
                                    (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                    (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                                };
                                match: {
                                    (regexp: string | RegExp): RegExpMatchArray | null;
                                    (matcher: {
                                        [Symbol.match](string: string): RegExpMatchArray | null;
                                    }): RegExpMatchArray | null;
                                };
                                replace: {
                                    (searchValue: string | RegExp, replaceValue: string): string;
                                    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replaceValue: string): string;
                                    }, replaceValue: string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                    }, replacer: (substring: string, ...args: any[]) => string): string;
                                };
                                search: {
                                    (regexp: string | RegExp): number;
                                    (searcher: {
                                        [Symbol.search](string: string): number;
                                    }): number;
                                };
                                slice: (start?: number, end?: number) => string;
                                split: {
                                    (separator: string | RegExp, limit?: number): string[];
                                    (splitter: {
                                        [Symbol.split](string: string, limit?: number): string[];
                                    }, limit?: number): string[];
                                };
                                substring: (start: number, end?: number) => string;
                                toLowerCase: () => string;
                                toLocaleLowerCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                toUpperCase: () => string;
                                toLocaleUpperCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                trim: () => string;
                                readonly length: number;
                                substr: (from: number, length?: number) => string;
                                valueOf: () => string;
                                codePointAt: (pos: number) => number | undefined;
                                includes: (searchString: string, position?: number) => boolean;
                                endsWith: (searchString: string, endPosition?: number) => boolean;
                                normalize: {
                                    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                    (form?: string): string;
                                };
                                repeat: (count: number) => string;
                                startsWith: (searchString: string, position?: number) => boolean;
                                anchor: (name: string) => string;
                                big: () => string;
                                blink: () => string;
                                bold: () => string;
                                fixed: () => string;
                                fontcolor: (color: string) => string;
                                fontsize: {
                                    (size: number): string;
                                    (size: string): string;
                                };
                                italics: () => string;
                                link: (url: string) => string;
                                small: () => string;
                                strike: () => string;
                                sub: () => string;
                                sup: () => string;
                                padStart: (maxLength: number, fillString?: string) => string;
                                padEnd: (maxLength: number, fillString?: string) => string;
                                trimEnd: () => string;
                                trimStart: () => string;
                                trimLeft: () => string;
                                trimRight: () => string;
                                matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                                [Symbol.iterator]: () => StringIterator<string>;
                                at: (index: number) => string | undefined;
                            } | undefined;
                            thresholdDelta?: (number | null) | undefined;
                            thresholdTime?: (number | null) | undefined;
                            noMousewheelClass?: string | undefined;
                        } | undefined;
                        navigation?: boolean | {
                            enabled?: boolean | undefined;
                            nextEl?: HTMLElement | {
                                readonly [x: number]: string;
                                toString: () => string;
                                charAt: (pos: number) => string;
                                charCodeAt: (index: number) => number;
                                concat: (...strings: string[]) => string;
                                indexOf: (searchString: string, position?: number) => number;
                                lastIndexOf: (searchString: string, position?: number) => number;
                                localeCompare: {
                                    (that: string): number;
                                    (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                    (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                                };
                                match: {
                                    (regexp: string | RegExp): RegExpMatchArray | null;
                                    (matcher: {
                                        [Symbol.match](string: string): RegExpMatchArray | null;
                                    }): RegExpMatchArray | null;
                                };
                                replace: {
                                    (searchValue: string | RegExp, replaceValue: string): string;
                                    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replaceValue: string): string;
                                    }, replaceValue: string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                    }, replacer: (substring: string, ...args: any[]) => string): string;
                                };
                                search: {
                                    (regexp: string | RegExp): number;
                                    (searcher: {
                                        [Symbol.search](string: string): number;
                                    }): number;
                                };
                                slice: (start?: number, end?: number) => string;
                                split: {
                                    (separator: string | RegExp, limit?: number): string[];
                                    (splitter: {
                                        [Symbol.split](string: string, limit?: number): string[];
                                    }, limit?: number): string[];
                                };
                                substring: (start: number, end?: number) => string;
                                toLowerCase: () => string;
                                toLocaleLowerCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                toUpperCase: () => string;
                                toLocaleUpperCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                trim: () => string;
                                readonly length: number;
                                substr: (from: number, length?: number) => string;
                                valueOf: () => string;
                                codePointAt: (pos: number) => number | undefined;
                                includes: (searchString: string, position?: number) => boolean;
                                endsWith: (searchString: string, endPosition?: number) => boolean;
                                normalize: {
                                    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                    (form?: string): string;
                                };
                                repeat: (count: number) => string;
                                startsWith: (searchString: string, position?: number) => boolean;
                                anchor: (name: string) => string;
                                big: () => string;
                                blink: () => string;
                                bold: () => string;
                                fixed: () => string;
                                fontcolor: (color: string) => string;
                                fontsize: {
                                    (size: number): string;
                                    (size: string): string;
                                };
                                italics: () => string;
                                link: (url: string) => string;
                                small: () => string;
                                strike: () => string;
                                sub: () => string;
                                sup: () => string;
                                padStart: (maxLength: number, fillString?: string) => string;
                                padEnd: (maxLength: number, fillString?: string) => string;
                                trimEnd: () => string;
                                trimStart: () => string;
                                trimLeft: () => string;
                                trimRight: () => string;
                                matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                                [Symbol.iterator]: () => StringIterator<string>;
                                at: (index: number) => string | undefined;
                            } | null | undefined;
                            prevEl?: HTMLElement | {
                                readonly [x: number]: string;
                                toString: () => string;
                                charAt: (pos: number) => string;
                                charCodeAt: (index: number) => number;
                                concat: (...strings: string[]) => string;
                                indexOf: (searchString: string, position?: number) => number;
                                lastIndexOf: (searchString: string, position?: number) => number;
                                localeCompare: {
                                    (that: string): number;
                                    (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                    (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                                };
                                match: {
                                    (regexp: string | RegExp): RegExpMatchArray | null;
                                    (matcher: {
                                        [Symbol.match](string: string): RegExpMatchArray | null;
                                    }): RegExpMatchArray | null;
                                };
                                replace: {
                                    (searchValue: string | RegExp, replaceValue: string): string;
                                    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replaceValue: string): string;
                                    }, replaceValue: string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                    }, replacer: (substring: string, ...args: any[]) => string): string;
                                };
                                search: {
                                    (regexp: string | RegExp): number;
                                    (searcher: {
                                        [Symbol.search](string: string): number;
                                    }): number;
                                };
                                slice: (start?: number, end?: number) => string;
                                split: {
                                    (separator: string | RegExp, limit?: number): string[];
                                    (splitter: {
                                        [Symbol.split](string: string, limit?: number): string[];
                                    }, limit?: number): string[];
                                };
                                substring: (start: number, end?: number) => string;
                                toLowerCase: () => string;
                                toLocaleLowerCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                toUpperCase: () => string;
                                toLocaleUpperCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                trim: () => string;
                                readonly length: number;
                                substr: (from: number, length?: number) => string;
                                valueOf: () => string;
                                codePointAt: (pos: number) => number | undefined;
                                includes: (searchString: string, position?: number) => boolean;
                                endsWith: (searchString: string, endPosition?: number) => boolean;
                                normalize: {
                                    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                    (form?: string): string;
                                };
                                repeat: (count: number) => string;
                                startsWith: (searchString: string, position?: number) => boolean;
                                anchor: (name: string) => string;
                                big: () => string;
                                blink: () => string;
                                bold: () => string;
                                fixed: () => string;
                                fontcolor: (color: string) => string;
                                fontsize: {
                                    (size: number): string;
                                    (size: string): string;
                                };
                                italics: () => string;
                                link: (url: string) => string;
                                small: () => string;
                                strike: () => string;
                                sub: () => string;
                                sup: () => string;
                                padStart: (maxLength: number, fillString?: string) => string;
                                padEnd: (maxLength: number, fillString?: string) => string;
                                trimEnd: () => string;
                                trimStart: () => string;
                                trimLeft: () => string;
                                trimRight: () => string;
                                matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                                [Symbol.iterator]: () => StringIterator<string>;
                                at: (index: number) => string | undefined;
                            } | null | undefined;
                            hideOnClick?: boolean | undefined;
                            disabledClass?: string | undefined;
                            hiddenClass?: string | undefined;
                            lockClass?: string | undefined;
                            navigationDisabledClass?: string | undefined;
                        } | undefined;
                        pagination?: boolean | {
                            enabled?: boolean | undefined;
                            el?: HTMLElement | {
                                readonly [x: number]: string;
                                toString: () => string;
                                charAt: (pos: number) => string;
                                charCodeAt: (index: number) => number;
                                concat: (...strings: string[]) => string;
                                indexOf: (searchString: string, position?: number) => number;
                                lastIndexOf: (searchString: string, position?: number) => number;
                                localeCompare: {
                                    (that: string): number;
                                    (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                    (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                                };
                                match: {
                                    (regexp: string | RegExp): RegExpMatchArray | null;
                                    (matcher: {
                                        [Symbol.match](string: string): RegExpMatchArray | null;
                                    }): RegExpMatchArray | null;
                                };
                                replace: {
                                    (searchValue: string | RegExp, replaceValue: string): string;
                                    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replaceValue: string): string;
                                    }, replaceValue: string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                    }, replacer: (substring: string, ...args: any[]) => string): string;
                                };
                                search: {
                                    (regexp: string | RegExp): number;
                                    (searcher: {
                                        [Symbol.search](string: string): number;
                                    }): number;
                                };
                                slice: (start?: number, end?: number) => string;
                                split: {
                                    (separator: string | RegExp, limit?: number): string[];
                                    (splitter: {
                                        [Symbol.split](string: string, limit?: number): string[];
                                    }, limit?: number): string[];
                                };
                                substring: (start: number, end?: number) => string;
                                toLowerCase: () => string;
                                toLocaleLowerCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                toUpperCase: () => string;
                                toLocaleUpperCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                trim: () => string;
                                readonly length: number;
                                substr: (from: number, length?: number) => string;
                                valueOf: () => string;
                                codePointAt: (pos: number) => number | undefined;
                                includes: (searchString: string, position?: number) => boolean;
                                endsWith: (searchString: string, endPosition?: number) => boolean;
                                normalize: {
                                    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                    (form?: string): string;
                                };
                                repeat: (count: number) => string;
                                startsWith: (searchString: string, position?: number) => boolean;
                                anchor: (name: string) => string;
                                big: () => string;
                                blink: () => string;
                                bold: () => string;
                                fixed: () => string;
                                fontcolor: (color: string) => string;
                                fontsize: {
                                    (size: number): string;
                                    (size: string): string;
                                };
                                italics: () => string;
                                link: (url: string) => string;
                                small: () => string;
                                strike: () => string;
                                sub: () => string;
                                sup: () => string;
                                padStart: (maxLength: number, fillString?: string) => string;
                                padEnd: (maxLength: number, fillString?: string) => string;
                                trimEnd: () => string;
                                trimStart: () => string;
                                trimLeft: () => string;
                                trimRight: () => string;
                                matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                                [Symbol.iterator]: () => StringIterator<string>;
                                at: (index: number) => string | undefined;
                            } | null | undefined;
                            type?: ("bullets" | "fraction" | "progressbar" | "custom") | undefined;
                            bulletElement?: string | undefined;
                            dynamicBullets?: boolean | undefined;
                            dynamicMainBullets?: number | undefined;
                            hideOnClick?: boolean | undefined;
                            clickable?: boolean | undefined;
                            progressbarOpposite?: boolean | undefined;
                            formatFractionCurrent?: ((number: number) => number | string) | undefined;
                            formatFractionTotal?: ((number: number) => number | string) | undefined;
                            renderBullet?: ((index: number, className: string) => string) | undefined;
                            renderFraction?: ((currentClass: string, totalClass: string) => string) | undefined;
                            renderProgressbar?: ((progressbarFillClass: string) => string) | undefined;
                            renderCustom?: ((swiper: SwiperType, current: number, total: number) => string) | undefined;
                            bulletClass?: string | undefined;
                            bulletActiveClass?: string | undefined;
                            modifierClass?: string | undefined;
                            currentClass?: string | undefined;
                            totalClass?: string | undefined;
                            hiddenClass?: string | undefined;
                            progressbarFillClass?: string | undefined;
                            progressbarOppositeClass?: string | undefined;
                            clickableClass?: string | undefined;
                            lockClass?: string | undefined;
                            horizontalClass?: string | undefined;
                            verticalClass?: string | undefined;
                            paginationDisabledClass?: string | undefined;
                        } | undefined;
                        parallax?: boolean | {
                            enabled?: boolean | undefined;
                        } | undefined;
                        scrollbar?: boolean | {
                            enabled?: boolean | undefined;
                            el?: HTMLElement | {
                                readonly [x: number]: string;
                                toString: () => string;
                                charAt: (pos: number) => string;
                                charCodeAt: (index: number) => number;
                                concat: (...strings: string[]) => string;
                                indexOf: (searchString: string, position?: number) => number;
                                lastIndexOf: (searchString: string, position?: number) => number;
                                localeCompare: {
                                    (that: string): number;
                                    (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                    (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                                };
                                match: {
                                    (regexp: string | RegExp): RegExpMatchArray | null;
                                    (matcher: {
                                        [Symbol.match](string: string): RegExpMatchArray | null;
                                    }): RegExpMatchArray | null;
                                };
                                replace: {
                                    (searchValue: string | RegExp, replaceValue: string): string;
                                    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replaceValue: string): string;
                                    }, replaceValue: string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                    }, replacer: (substring: string, ...args: any[]) => string): string;
                                };
                                search: {
                                    (regexp: string | RegExp): number;
                                    (searcher: {
                                        [Symbol.search](string: string): number;
                                    }): number;
                                };
                                slice: (start?: number, end?: number) => string;
                                split: {
                                    (separator: string | RegExp, limit?: number): string[];
                                    (splitter: {
                                        [Symbol.split](string: string, limit?: number): string[];
                                    }, limit?: number): string[];
                                };
                                substring: (start: number, end?: number) => string;
                                toLowerCase: () => string;
                                toLocaleLowerCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                toUpperCase: () => string;
                                toLocaleUpperCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                trim: () => string;
                                readonly length: number;
                                substr: (from: number, length?: number) => string;
                                valueOf: () => string;
                                codePointAt: (pos: number) => number | undefined;
                                includes: (searchString: string, position?: number) => boolean;
                                endsWith: (searchString: string, endPosition?: number) => boolean;
                                normalize: {
                                    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                    (form?: string): string;
                                };
                                repeat: (count: number) => string;
                                startsWith: (searchString: string, position?: number) => boolean;
                                anchor: (name: string) => string;
                                big: () => string;
                                blink: () => string;
                                bold: () => string;
                                fixed: () => string;
                                fontcolor: (color: string) => string;
                                fontsize: {
                                    (size: number): string;
                                    (size: string): string;
                                };
                                italics: () => string;
                                link: (url: string) => string;
                                small: () => string;
                                strike: () => string;
                                sub: () => string;
                                sup: () => string;
                                padStart: (maxLength: number, fillString?: string) => string;
                                padEnd: (maxLength: number, fillString?: string) => string;
                                trimEnd: () => string;
                                trimStart: () => string;
                                trimLeft: () => string;
                                trimRight: () => string;
                                matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                                [Symbol.iterator]: () => StringIterator<string>;
                                at: (index: number) => string | undefined;
                            } | null | undefined;
                            hide?: boolean | undefined;
                            draggable?: boolean | undefined;
                            snapOnRelease?: boolean | undefined;
                            dragSize?: ("auto" | number) | undefined;
                            lockClass?: string | undefined;
                            dragClass?: string | undefined;
                            scrollbarDisabledClass?: string | undefined;
                            horizontalClass?: string | undefined;
                            verticalClass?: string | undefined;
                        } | undefined;
                        thumbs?: {
                            swiper?: string | any | null | undefined;
                            slideThumbActiveClass?: string | undefined;
                            thumbsContainerClass?: string | undefined;
                            multipleActiveThumbs?: boolean | undefined;
                            autoScrollOffset?: number | undefined;
                        } | undefined;
                        virtual?: boolean | {
                            enabled?: boolean | undefined;
                            slides?: any[] | undefined;
                            cache?: boolean | undefined;
                            addSlidesBefore?: number | undefined;
                            addSlidesAfter?: number | undefined;
                            renderSlide?: ((slide: any, index: any) => any | null) | undefined;
                            renderExternal?: ((data: import('swiper/types').VirtualData<any>) => any | null) | undefined;
                            renderExternalUpdate?: boolean | undefined;
                        } | undefined;
                        zoom?: boolean | {
                            limitToOriginalSize?: boolean | undefined;
                            maxRatio?: number | undefined;
                            minRatio?: number | undefined;
                            toggle?: boolean | undefined;
                            containerClass?: string | undefined;
                            zoomedSlideClass?: string | undefined;
                        } | undefined;
                        freeMode?: boolean | {
                            enabled?: boolean | undefined;
                            momentum?: boolean | undefined;
                            momentumRatio?: number | undefined;
                            momentumVelocityRatio?: number | undefined;
                            momentumBounce?: boolean | undefined;
                            momentumBounceRatio?: number | undefined;
                            minimumVelocity?: number | undefined;
                            sticky?: boolean | undefined;
                        } | undefined;
                        grid?: {
                            rows?: number | undefined;
                            fill?: ("row" | "column") | undefined;
                        } | undefined;
                        _emitClasses?: boolean | undefined;
                    };
                    el: HTMLElement;
                    wrapperEl: HTMLElement;
                    slidesEl: HTMLElement;
                    slides: HTMLElement[];
                    loopedSlides: number | null;
                    width: number;
                    height: number;
                    translate: number;
                    progress: number;
                    activeIndex: number;
                    realIndex: number;
                    previousIndex: number;
                    snapIndex: number;
                    snapGrid: number[];
                    slidesGrid: number[];
                    slidesSizesGrid: number[];
                    isBeginning: boolean;
                    isEnd: boolean;
                    isLocked: boolean;
                    animating: boolean;
                    touches: {
                        startX: number;
                        startY: number;
                        currentX: number;
                        currentY: number;
                        diff: number;
                    };
                    clickedIndex: number;
                    clickedSlide: HTMLElement;
                    allowSlideNext: boolean;
                    allowSlidePrev: boolean;
                    allowTouchMove: boolean;
                    swipeDirection: "prev" | "next";
                    rtlTranslate: boolean;
                    disable: () => void;
                    enable: () => void;
                    setProgress: (progress: number, speed?: number) => void;
                    slideNext: (speed?: number, runCallbacks?: boolean) => boolean;
                    slidePrev: (speed?: number, runCallbacks?: boolean) => boolean;
                    slideTo: (index: number, speed?: number, runCallbacks?: boolean) => boolean;
                    slideToLoop: (index: number, speed?: number, runCallbacks?: boolean) => SwiperType;
                    slideReset: (speed?: number, runCallbacks?: boolean) => boolean;
                    slideToClosest: (speed?: number, runCallbacks?: boolean) => boolean;
                    slidesPerViewDynamic: () => number;
                    updateAutoHeight: (speed?: number) => void;
                    update: () => void;
                    updateSize: () => void;
                    updateSlides: () => void;
                    updateProgress: () => void;
                    updateSlidesClasses: () => void;
                    changeDirection: (direction?: "horizontal" | "vertical", needUpdate?: boolean) => void;
                    changeLanguageDirection: (direction: "rtl" | "ltr") => void;
                    detachEvents: () => void;
                    attachEvents: () => void;
                    loopCreate: () => void;
                    loopDestroy: () => void;
                    init: (el?: HTMLElement) => SwiperType;
                    destroy: (deleteInstance?: boolean, cleanStyles?: boolean) => void;
                    setTranslate: (translate: any) => void;
                    getTranslate: () => any;
                    translateTo: (translate: number, speed: number, runCallbacks?: boolean, translateBounds?: boolean) => any;
                    minTranslate: () => number;
                    maxTranslate: () => number;
                    unsetGrabCursor: () => void;
                    setGrabCursor: () => void;
                    onAny: (handler: (eventName: string, ...args: any[]) => void) => void;
                    offAny: (handler: (eventName: string, ...args: any[]) => void) => void;
                    isHorizontal: () => boolean;
                    getBreakpoint: (breakpoints: import('swiper/types').SwiperOptions["breakpoints"]) => string;
                    setBreakpoint: () => void;
                    currentBreakpoint: any;
                    destroyed: boolean;
                    modules: Array<import('swiper/types').SwiperModule>;
                    a11y: import('swiper/types').A11yMethods;
                    autoplay: {
                        running: boolean;
                        paused: boolean;
                        timeLeft: number;
                        pause: () => void;
                        resume: () => void;
                        start: () => boolean;
                        stop: () => boolean;
                    };
                    controller: {
                        control?: any | any[] | undefined;
                    };
                    coverflowEffect: import('swiper/types').CoverflowEffectMethods;
                    cubeEffect: import('swiper/types').CubeEffectMethods;
                    fadeEffect: import('swiper/types').FadeEffectMethods;
                    flipEffect: import('swiper/types').FlipEffectMethods;
                    creativeEffect: import('swiper/types').CreativeEffectMethods;
                    cardsEffect: import('swiper/types').CardsEffectMethods;
                    hashNavigation: import('swiper/types').HashNavigationMethods;
                    history: import('swiper/types').HistoryMethods;
                    keyboard: {
                        enabled: boolean;
                        enable: () => void;
                        disable: () => void;
                    };
                    mousewheel: {
                        enabled: boolean;
                        enable: () => void;
                        disable: () => void;
                    };
                    navigation: {
                        nextEl: HTMLElement;
                        prevEl: HTMLElement;
                        update: () => void;
                        init: () => void;
                        destroy: () => void;
                    };
                    pagination: {
                        el: HTMLElement;
                        bullets: HTMLElement[];
                        render: () => void;
                        update: () => void;
                        init: () => void;
                        destroy: () => void;
                    };
                    parallax: import('swiper/types').ParallaxMethods;
                    scrollbar: {
                        el: HTMLElement;
                        dragEl: HTMLElement;
                        updateSize: () => void;
                        setTranslate: () => void;
                        init: () => void;
                        destroy: () => void;
                    };
                    thumbs: {
                        swiper: any;
                        update: (initial: boolean) => void;
                        init: () => boolean;
                    };
                    virtual: {
                        cache: object;
                        from: number;
                        to: number;
                        slides: any[];
                        appendSlide: (slide: HTMLElement | string | HTMLElement[] | string[]) => void;
                        prependSlide: (slide: HTMLElement | string | HTMLElement[] | string[]) => void;
                        removeSlide: (slideIndexes: number[]) => void;
                        removeAllSlides: () => void;
                        update: (force: boolean) => void;
                    };
                    zoom: {
                        enabled: boolean;
                        scale: number;
                        enable: () => void;
                        disable: () => void;
                        in: (ratio?: number) => void;
                        out: () => void;
                        toggle: (event?: MouseEvent | TouchEvent | PointerEvent) => void;
                    };
                    freeMode: {
                        onTouchMove: () => void;
                        onTouchEnd: () => void;
                    };
                    on: <E extends keyof import('swiper/types').SwiperEvents>(event: E, handler: import('swiper/types').SwiperEvents[E]) => void;
                    once: <E extends keyof import('swiper/types').SwiperEvents>(event: E, handler: import('swiper/types').SwiperEvents[E]) => void;
                    off: {
                        <E extends keyof import('swiper/types').SwiperEvents>(event: E, handler: import('swiper/types').SwiperEvents[E]): void;
                        <E extends keyof import('swiper/types').SwiperEvents>(event: E): void;
                    };
                    emit: <E extends keyof import('swiper/types').SwiperEvents>(event: E, ...args: any[]) => void;
                    appendSlide: (slides: HTMLElement | string | string[] | HTMLElement[]) => void;
                    prependSlide: (slides: HTMLElement | string | string[] | HTMLElement[]) => void;
                    addSlide: (index: number, slides: HTMLElement | string | string[] | HTMLElement[]) => void;
                    removeSlide: (slideIndex: number | number[]) => void;
                    removeAllSlides: () => void;
                } | null, SwiperType | {
                    params: {
                        modules?: import('swiper/types').SwiperModule[] | undefined;
                        injectStyles?: string[] | undefined;
                        injectStylesUrls?: string[] | undefined;
                        init?: boolean | undefined;
                        enabled?: boolean | undefined;
                        updateOnWindowResize?: boolean | undefined;
                        resizeObserver?: boolean | undefined;
                        initialSlide?: number | undefined;
                        direction?: ("horizontal" | "vertical") | undefined;
                        oneWayMovement?: boolean | undefined;
                        swiperElementNodeName?: string | undefined;
                        speed?: number | undefined;
                        setWrapperSize?: boolean | undefined;
                        virtualTranslate?: boolean | undefined;
                        width?: (number | null) | undefined;
                        height?: (number | null) | undefined;
                        autoHeight?: boolean | undefined;
                        roundLengths?: boolean | undefined;
                        nested?: boolean | undefined;
                        createElements?: boolean | undefined;
                        eventsPrefix?: string | undefined;
                        focusableElements?: string | undefined;
                        uniqueNavElements?: boolean | undefined;
                        effect?: ("slide" | "fade" | "cube" | "coverflow" | "flip" | "creative" | "cards" | string) | undefined;
                        runCallbacksOnInit?: boolean | undefined;
                        watchOverflow?: boolean | undefined;
                        userAgent?: (string | null) | undefined;
                        url?: (string | null) | undefined;
                        on?: {
                            init?: ((swiper: SwiperType) => any) | undefined;
                            beforeDestroy?: ((swiper: SwiperType) => void) | undefined;
                            slidesUpdated?: ((swiper: SwiperType) => void) | undefined;
                            slideChange?: ((swiper: SwiperType) => void) | undefined;
                            slideChangeTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                            slideChangeTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                            slideNextTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                            slideNextTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                            slidePrevTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                            slidePrevTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                            transitionStart?: ((swiper: SwiperType) => void) | undefined;
                            transitionEnd?: ((swiper: SwiperType) => void) | undefined;
                            touchStart?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            touchMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            touchMoveOpposite?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            sliderMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            touchEnd?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            click?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            tap?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            doubleTap?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            progress?: ((swiper: SwiperType, progress: number) => void) | undefined;
                            reachBeginning?: ((swiper: SwiperType) => void) | undefined;
                            reachEnd?: ((swiper: SwiperType) => void) | undefined;
                            toEdge?: ((swiper: SwiperType) => void) | undefined;
                            fromEdge?: ((swiper: SwiperType) => void) | undefined;
                            setTranslate?: ((swiper: SwiperType, translate: number) => void) | undefined;
                            setTransition?: ((swiper: SwiperType, transition: number) => void) | undefined;
                            resize?: ((swiper: SwiperType) => void) | undefined;
                            observerUpdate?: ((swiper: SwiperType) => void) | undefined;
                            beforeLoopFix?: ((swiper: SwiperType) => void) | undefined;
                            loopFix?: ((swiper: SwiperType) => void) | undefined;
                            breakpoint?: ((swiper: SwiperType, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                            _beforeBreakpoint?: ((swiper: SwiperType, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                            _containerClasses?: ((swiper: SwiperType, classNames: string) => void) | undefined;
                            _slideClass?: ((swiper: SwiperType, slideEl: HTMLElement, classNames: string) => void) | undefined;
                            _slideClasses?: ((swiper: SwiperType, slides: {
                                slideEl: HTMLElement;
                                classNames: string;
                                index: number;
                            }[]) => void) | undefined;
                            _swiper?: ((swiper: SwiperType) => void) | undefined;
                            _freeModeNoMomentumRelease?: ((swiper: SwiperType) => void) | undefined;
                            activeIndexChange?: ((swiper: SwiperType) => void) | undefined;
                            snapIndexChange?: ((swiper: SwiperType) => void) | undefined;
                            realIndexChange?: ((swiper: SwiperType) => void) | undefined;
                            afterInit?: ((swiper: SwiperType) => void) | undefined;
                            beforeInit?: ((swiper: SwiperType) => void) | undefined;
                            beforeResize?: ((swiper: SwiperType) => void) | undefined;
                            beforeSlideChangeStart?: ((swiper: SwiperType) => void) | undefined;
                            beforeTransitionStart?: ((swiper: SwiperType, speed: number, internal: any) => void) | undefined;
                            changeDirection?: ((swiper: SwiperType) => void) | undefined;
                            doubleClick?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            destroy?: ((swiper: SwiperType) => void) | undefined;
                            momentumBounce?: ((swiper: SwiperType) => void) | undefined;
                            orientationchange?: ((swiper: SwiperType) => void) | undefined;
                            slideResetTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                            slideResetTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                            sliderFirstMove?: ((swiper: SwiperType, event: TouchEvent) => void) | undefined;
                            slidesLengthChange?: ((swiper: SwiperType) => void) | undefined;
                            slidesGridLengthChange?: ((swiper: SwiperType) => void) | undefined;
                            snapGridLengthChange?: ((swiper: SwiperType) => void) | undefined;
                            update?: ((swiper: SwiperType) => void) | undefined;
                            lock?: ((swiper: SwiperType) => void) | undefined;
                            unlock?: ((swiper: SwiperType) => void) | undefined;
                            autoplayStart?: ((swiper: SwiperType) => void) | undefined;
                            autoplayStop?: ((swiper: SwiperType) => void) | undefined;
                            autoplayPause?: ((swiper: SwiperType) => void) | undefined;
                            autoplayResume?: ((swiper: SwiperType) => void) | undefined;
                            autoplayTimeLeft?: ((swiper: SwiperType, timeLeft: number, percentage: number) => void) | undefined;
                            autoplay?: ((swiper: SwiperType) => void) | undefined;
                            hashChange?: ((swiper: SwiperType) => void) | undefined;
                            hashSet?: ((swiper: SwiperType) => void) | undefined;
                            keyPress?: ((swiper: SwiperType, keyCode: string) => void) | undefined;
                            scroll?: ((swiper: SwiperType, event: WheelEvent) => void) | undefined;
                            navigationHide?: ((swiper: SwiperType) => void) | undefined;
                            navigationShow?: ((swiper: SwiperType) => void) | undefined;
                            navigationPrev?: ((swiper: SwiperType) => void) | undefined;
                            navigationNext?: ((swiper: SwiperType) => void) | undefined;
                            paginationRender?: ((swiper: SwiperType, paginationEl: HTMLElement) => void) | undefined;
                            paginationUpdate?: ((swiper: SwiperType, paginationEl: HTMLElement) => void) | undefined;
                            paginationHide?: ((swiper: SwiperType) => void) | undefined;
                            paginationShow?: ((swiper: SwiperType) => void) | undefined;
                            scrollbarDragStart?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            scrollbarDragMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            scrollbarDragEnd?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            zoomChange?: ((swiper: SwiperType, scale: number, imageEl: HTMLElement, slideEl: HTMLElement) => void) | undefined;
                        } | undefined;
                        onAny?: ((handler: (eventName: string, ...args: any[]) => void) => void) | undefined;
                        cssMode?: boolean | undefined;
                        spaceBetween?: (number | string) | undefined;
                        slidesPerView?: (number | "auto") | undefined;
                        maxBackfaceHiddenSlides?: number | undefined;
                        slidesPerGroup?: number | undefined;
                        slidesPerGroupSkip?: number | undefined;
                        slidesPerGroupAuto?: boolean | undefined;
                        centeredSlides?: boolean | undefined;
                        centeredSlidesBounds?: boolean | undefined;
                        slidesOffsetBefore?: number | undefined;
                        slidesOffsetAfter?: number | undefined;
                        normalizeSlideIndex?: boolean | undefined;
                        centerInsufficientSlides?: boolean | undefined;
                        grabCursor?: boolean | undefined;
                        touchEventsTarget?: ("container" | "wrapper") | undefined;
                        touchRatio?: number | undefined;
                        touchAngle?: number | undefined;
                        simulateTouch?: boolean | undefined;
                        shortSwipes?: boolean | undefined;
                        longSwipes?: boolean | undefined;
                        longSwipesRatio?: number | undefined;
                        longSwipesMs?: number | undefined;
                        followFinger?: boolean | undefined;
                        allowTouchMove?: boolean | undefined;
                        threshold?: number | undefined;
                        touchStartPreventDefault?: boolean | undefined;
                        touchStartForcePreventDefault?: boolean | undefined;
                        touchMoveStopPropagation?: boolean | undefined;
                        edgeSwipeDetection?: (boolean | string) | undefined;
                        edgeSwipeThreshold?: number | undefined;
                        touchReleaseOnEdges?: boolean | undefined;
                        passiveListeners?: boolean | undefined;
                        resistance?: boolean | undefined;
                        resistanceRatio?: number | undefined;
                        preventInteractionOnTransition?: boolean | undefined;
                        allowSlidePrev?: boolean | undefined;
                        allowSlideNext?: boolean | undefined;
                        noSwiping?: boolean | undefined;
                        noSwipingClass?: string | undefined;
                        noSwipingSelector?: string | undefined;
                        swipeHandler?: HTMLElement | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | null | undefined;
                        preventClicks?: boolean | undefined;
                        preventClicksPropagation?: boolean | undefined;
                        slideToClickedSlide?: boolean | undefined;
                        watchSlidesProgress?: boolean | undefined;
                        loop?: boolean | undefined;
                        loopAddBlankSlides?: boolean | undefined;
                        loopAdditionalSlides?: number | undefined;
                        loopPreventsSliding?: boolean | undefined;
                        rewind?: boolean | undefined;
                        breakpoints?: {
                            [width: number]: import('swiper/types').SwiperOptions;
                            [ratio: string]: import('swiper/types').SwiperOptions;
                        } | undefined;
                        breakpointsBase?: ("window" | "container") | undefined;
                        observer?: boolean | undefined;
                        observeSlideChildren?: boolean | undefined;
                        observeParents?: boolean | undefined;
                        containerModifierClass?: string | undefined;
                        slideClass?: string | undefined;
                        slideActiveClass?: string | undefined;
                        slideVisibleClass?: string | undefined;
                        slideFullyVisibleClass?: string | undefined;
                        slideBlankClass?: string | undefined;
                        slideNextClass?: string | undefined;
                        slidePrevClass?: string | undefined;
                        wrapperClass?: string | undefined;
                        lazyPreloaderClass?: string | undefined;
                        lazyPreloadPrevNext?: number | undefined;
                        a11y?: {
                            enabled?: boolean | undefined;
                            prevSlideMessage?: string | undefined;
                            nextSlideMessage?: string | undefined;
                            firstSlideMessage?: string | undefined;
                            lastSlideMessage?: string | undefined;
                            paginationBulletMessage?: string | undefined;
                            notificationClass?: string | undefined;
                            containerMessage?: (string | null) | undefined;
                            containerRoleDescriptionMessage?: (string | null) | undefined;
                            containerRole?: (string | null) | undefined;
                            itemRoleDescriptionMessage?: (string | null) | undefined;
                            slideLabelMessage?: string | undefined;
                            slideRole?: string | undefined;
                            id?: (string | number | null) | undefined;
                            scrollOnFocus?: boolean | undefined;
                        } | undefined;
                        autoplay?: boolean | {
                            delay?: number | undefined;
                            stopOnLastSlide?: boolean | undefined;
                            disableOnInteraction?: boolean | undefined;
                            reverseDirection?: boolean | undefined;
                            waitForTransition?: boolean | undefined;
                            pauseOnMouseEnter?: boolean | undefined;
                        } | undefined;
                        controller?: {
                            control?: string | HTMLElement | any | any[] | null | undefined;
                            inverse?: boolean | undefined;
                            by?: ("slide" | "container") | undefined;
                        } | undefined;
                        coverflowEffect?: {
                            slideShadows?: boolean | undefined;
                            rotate?: number | undefined;
                            stretch?: number | undefined;
                            depth?: number | undefined;
                            scale?: number | undefined;
                            modifier?: number | undefined;
                        } | undefined;
                        cubeEffect?: {
                            slideShadows?: boolean | undefined;
                            shadow?: boolean | undefined;
                            shadowOffset?: number | undefined;
                            shadowScale?: number | undefined;
                        } | undefined;
                        fadeEffect?: {
                            crossFade?: boolean | undefined;
                        } | undefined;
                        flipEffect?: {
                            slideShadows?: boolean | undefined;
                            limitRotation?: boolean | undefined;
                        } | undefined;
                        creativeEffect?: {
                            prev?: {
                                translate?: (string | number)[] | undefined;
                                rotate?: number[] | undefined;
                                opacity?: number | undefined;
                                scale?: number | undefined;
                                shadow?: boolean | undefined;
                                origin?: string | undefined;
                            } | undefined;
                            next?: {
                                translate?: (string | number)[] | undefined;
                                rotate?: number[] | undefined;
                                opacity?: number | undefined;
                                scale?: number | undefined;
                                shadow?: boolean | undefined;
                                origin?: string | undefined;
                            } | undefined;
                            limitProgress?: number | undefined;
                            shadowPerProgress?: boolean | undefined;
                            progressMultiplier?: number | undefined;
                            perspective?: boolean | undefined;
                        } | undefined;
                        cardsEffect?: {
                            slideShadows?: boolean | undefined;
                            rotate?: boolean | undefined;
                            perSlideRotate?: number | undefined;
                            perSlideOffset?: number | undefined;
                        } | undefined;
                        hashNavigation?: boolean | {
                            watchState?: boolean | undefined;
                            replaceState?: boolean | undefined;
                            getSlideIndex?: ((swiper: SwiperType, hash: string) => number) | undefined;
                        } | undefined;
                        history?: boolean | {
                            enabled?: boolean | undefined;
                            root?: string | undefined;
                            replaceState?: boolean | undefined;
                            key?: string | undefined;
                            keepQuery?: boolean | undefined;
                        } | undefined;
                        keyboard?: boolean | {
                            enabled?: boolean | undefined;
                            onlyInViewport?: boolean | undefined;
                            pageUpDown?: boolean | undefined;
                        } | undefined;
                        mousewheel?: boolean | {
                            enabled?: boolean | undefined;
                            forceToAxis?: boolean | undefined;
                            releaseOnEdges?: boolean | undefined;
                            invert?: boolean | undefined;
                            sensitivity?: number | undefined;
                            eventsTarget?: HTMLElement | "container" | "wrapper" | {
                                readonly [x: number]: string;
                                toString: () => string;
                                charAt: (pos: number) => string;
                                charCodeAt: (index: number) => number;
                                concat: (...strings: string[]) => string;
                                indexOf: (searchString: string, position?: number) => number;
                                lastIndexOf: (searchString: string, position?: number) => number;
                                localeCompare: {
                                    (that: string): number;
                                    (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                    (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                                };
                                match: {
                                    (regexp: string | RegExp): RegExpMatchArray | null;
                                    (matcher: {
                                        [Symbol.match](string: string): RegExpMatchArray | null;
                                    }): RegExpMatchArray | null;
                                };
                                replace: {
                                    (searchValue: string | RegExp, replaceValue: string): string;
                                    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replaceValue: string): string;
                                    }, replaceValue: string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                    }, replacer: (substring: string, ...args: any[]) => string): string;
                                };
                                search: {
                                    (regexp: string | RegExp): number;
                                    (searcher: {
                                        [Symbol.search](string: string): number;
                                    }): number;
                                };
                                slice: (start?: number, end?: number) => string;
                                split: {
                                    (separator: string | RegExp, limit?: number): string[];
                                    (splitter: {
                                        [Symbol.split](string: string, limit?: number): string[];
                                    }, limit?: number): string[];
                                };
                                substring: (start: number, end?: number) => string;
                                toLowerCase: () => string;
                                toLocaleLowerCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                toUpperCase: () => string;
                                toLocaleUpperCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                trim: () => string;
                                readonly length: number;
                                substr: (from: number, length?: number) => string;
                                valueOf: () => string;
                                codePointAt: (pos: number) => number | undefined;
                                includes: (searchString: string, position?: number) => boolean;
                                endsWith: (searchString: string, endPosition?: number) => boolean;
                                normalize: {
                                    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                    (form?: string): string;
                                };
                                repeat: (count: number) => string;
                                startsWith: (searchString: string, position?: number) => boolean;
                                anchor: (name: string) => string;
                                big: () => string;
                                blink: () => string;
                                bold: () => string;
                                fixed: () => string;
                                fontcolor: (color: string) => string;
                                fontsize: {
                                    (size: number): string;
                                    (size: string): string;
                                };
                                italics: () => string;
                                link: (url: string) => string;
                                small: () => string;
                                strike: () => string;
                                sub: () => string;
                                sup: () => string;
                                padStart: (maxLength: number, fillString?: string) => string;
                                padEnd: (maxLength: number, fillString?: string) => string;
                                trimEnd: () => string;
                                trimStart: () => string;
                                trimLeft: () => string;
                                trimRight: () => string;
                                matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                                [Symbol.iterator]: () => StringIterator<string>;
                                at: (index: number) => string | undefined;
                            } | undefined;
                            thresholdDelta?: (number | null) | undefined;
                            thresholdTime?: (number | null) | undefined;
                            noMousewheelClass?: string | undefined;
                        } | undefined;
                        navigation?: boolean | {
                            enabled?: boolean | undefined;
                            nextEl?: HTMLElement | {
                                readonly [x: number]: string;
                                toString: () => string;
                                charAt: (pos: number) => string;
                                charCodeAt: (index: number) => number;
                                concat: (...strings: string[]) => string;
                                indexOf: (searchString: string, position?: number) => number;
                                lastIndexOf: (searchString: string, position?: number) => number;
                                localeCompare: {
                                    (that: string): number;
                                    (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                    (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                                };
                                match: {
                                    (regexp: string | RegExp): RegExpMatchArray | null;
                                    (matcher: {
                                        [Symbol.match](string: string): RegExpMatchArray | null;
                                    }): RegExpMatchArray | null;
                                };
                                replace: {
                                    (searchValue: string | RegExp, replaceValue: string): string;
                                    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replaceValue: string): string;
                                    }, replaceValue: string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                    }, replacer: (substring: string, ...args: any[]) => string): string;
                                };
                                search: {
                                    (regexp: string | RegExp): number;
                                    (searcher: {
                                        [Symbol.search](string: string): number;
                                    }): number;
                                };
                                slice: (start?: number, end?: number) => string;
                                split: {
                                    (separator: string | RegExp, limit?: number): string[];
                                    (splitter: {
                                        [Symbol.split](string: string, limit?: number): string[];
                                    }, limit?: number): string[];
                                };
                                substring: (start: number, end?: number) => string;
                                toLowerCase: () => string;
                                toLocaleLowerCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                toUpperCase: () => string;
                                toLocaleUpperCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                trim: () => string;
                                readonly length: number;
                                substr: (from: number, length?: number) => string;
                                valueOf: () => string;
                                codePointAt: (pos: number) => number | undefined;
                                includes: (searchString: string, position?: number) => boolean;
                                endsWith: (searchString: string, endPosition?: number) => boolean;
                                normalize: {
                                    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                    (form?: string): string;
                                };
                                repeat: (count: number) => string;
                                startsWith: (searchString: string, position?: number) => boolean;
                                anchor: (name: string) => string;
                                big: () => string;
                                blink: () => string;
                                bold: () => string;
                                fixed: () => string;
                                fontcolor: (color: string) => string;
                                fontsize: {
                                    (size: number): string;
                                    (size: string): string;
                                };
                                italics: () => string;
                                link: (url: string) => string;
                                small: () => string;
                                strike: () => string;
                                sub: () => string;
                                sup: () => string;
                                padStart: (maxLength: number, fillString?: string) => string;
                                padEnd: (maxLength: number, fillString?: string) => string;
                                trimEnd: () => string;
                                trimStart: () => string;
                                trimLeft: () => string;
                                trimRight: () => string;
                                matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                                [Symbol.iterator]: () => StringIterator<string>;
                                at: (index: number) => string | undefined;
                            } | null | undefined;
                            prevEl?: HTMLElement | {
                                readonly [x: number]: string;
                                toString: () => string;
                                charAt: (pos: number) => string;
                                charCodeAt: (index: number) => number;
                                concat: (...strings: string[]) => string;
                                indexOf: (searchString: string, position?: number) => number;
                                lastIndexOf: (searchString: string, position?: number) => number;
                                localeCompare: {
                                    (that: string): number;
                                    (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                    (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                                };
                                match: {
                                    (regexp: string | RegExp): RegExpMatchArray | null;
                                    (matcher: {
                                        [Symbol.match](string: string): RegExpMatchArray | null;
                                    }): RegExpMatchArray | null;
                                };
                                replace: {
                                    (searchValue: string | RegExp, replaceValue: string): string;
                                    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replaceValue: string): string;
                                    }, replaceValue: string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                    }, replacer: (substring: string, ...args: any[]) => string): string;
                                };
                                search: {
                                    (regexp: string | RegExp): number;
                                    (searcher: {
                                        [Symbol.search](string: string): number;
                                    }): number;
                                };
                                slice: (start?: number, end?: number) => string;
                                split: {
                                    (separator: string | RegExp, limit?: number): string[];
                                    (splitter: {
                                        [Symbol.split](string: string, limit?: number): string[];
                                    }, limit?: number): string[];
                                };
                                substring: (start: number, end?: number) => string;
                                toLowerCase: () => string;
                                toLocaleLowerCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                toUpperCase: () => string;
                                toLocaleUpperCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                trim: () => string;
                                readonly length: number;
                                substr: (from: number, length?: number) => string;
                                valueOf: () => string;
                                codePointAt: (pos: number) => number | undefined;
                                includes: (searchString: string, position?: number) => boolean;
                                endsWith: (searchString: string, endPosition?: number) => boolean;
                                normalize: {
                                    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                    (form?: string): string;
                                };
                                repeat: (count: number) => string;
                                startsWith: (searchString: string, position?: number) => boolean;
                                anchor: (name: string) => string;
                                big: () => string;
                                blink: () => string;
                                bold: () => string;
                                fixed: () => string;
                                fontcolor: (color: string) => string;
                                fontsize: {
                                    (size: number): string;
                                    (size: string): string;
                                };
                                italics: () => string;
                                link: (url: string) => string;
                                small: () => string;
                                strike: () => string;
                                sub: () => string;
                                sup: () => string;
                                padStart: (maxLength: number, fillString?: string) => string;
                                padEnd: (maxLength: number, fillString?: string) => string;
                                trimEnd: () => string;
                                trimStart: () => string;
                                trimLeft: () => string;
                                trimRight: () => string;
                                matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                                [Symbol.iterator]: () => StringIterator<string>;
                                at: (index: number) => string | undefined;
                            } | null | undefined;
                            hideOnClick?: boolean | undefined;
                            disabledClass?: string | undefined;
                            hiddenClass?: string | undefined;
                            lockClass?: string | undefined;
                            navigationDisabledClass?: string | undefined;
                        } | undefined;
                        pagination?: boolean | {
                            enabled?: boolean | undefined;
                            el?: HTMLElement | {
                                readonly [x: number]: string;
                                toString: () => string;
                                charAt: (pos: number) => string;
                                charCodeAt: (index: number) => number;
                                concat: (...strings: string[]) => string;
                                indexOf: (searchString: string, position?: number) => number;
                                lastIndexOf: (searchString: string, position?: number) => number;
                                localeCompare: {
                                    (that: string): number;
                                    (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                    (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                                };
                                match: {
                                    (regexp: string | RegExp): RegExpMatchArray | null;
                                    (matcher: {
                                        [Symbol.match](string: string): RegExpMatchArray | null;
                                    }): RegExpMatchArray | null;
                                };
                                replace: {
                                    (searchValue: string | RegExp, replaceValue: string): string;
                                    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replaceValue: string): string;
                                    }, replaceValue: string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                    }, replacer: (substring: string, ...args: any[]) => string): string;
                                };
                                search: {
                                    (regexp: string | RegExp): number;
                                    (searcher: {
                                        [Symbol.search](string: string): number;
                                    }): number;
                                };
                                slice: (start?: number, end?: number) => string;
                                split: {
                                    (separator: string | RegExp, limit?: number): string[];
                                    (splitter: {
                                        [Symbol.split](string: string, limit?: number): string[];
                                    }, limit?: number): string[];
                                };
                                substring: (start: number, end?: number) => string;
                                toLowerCase: () => string;
                                toLocaleLowerCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                toUpperCase: () => string;
                                toLocaleUpperCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                trim: () => string;
                                readonly length: number;
                                substr: (from: number, length?: number) => string;
                                valueOf: () => string;
                                codePointAt: (pos: number) => number | undefined;
                                includes: (searchString: string, position?: number) => boolean;
                                endsWith: (searchString: string, endPosition?: number) => boolean;
                                normalize: {
                                    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                    (form?: string): string;
                                };
                                repeat: (count: number) => string;
                                startsWith: (searchString: string, position?: number) => boolean;
                                anchor: (name: string) => string;
                                big: () => string;
                                blink: () => string;
                                bold: () => string;
                                fixed: () => string;
                                fontcolor: (color: string) => string;
                                fontsize: {
                                    (size: number): string;
                                    (size: string): string;
                                };
                                italics: () => string;
                                link: (url: string) => string;
                                small: () => string;
                                strike: () => string;
                                sub: () => string;
                                sup: () => string;
                                padStart: (maxLength: number, fillString?: string) => string;
                                padEnd: (maxLength: number, fillString?: string) => string;
                                trimEnd: () => string;
                                trimStart: () => string;
                                trimLeft: () => string;
                                trimRight: () => string;
                                matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                                [Symbol.iterator]: () => StringIterator<string>;
                                at: (index: number) => string | undefined;
                            } | null | undefined;
                            type?: ("bullets" | "fraction" | "progressbar" | "custom") | undefined;
                            bulletElement?: string | undefined;
                            dynamicBullets?: boolean | undefined;
                            dynamicMainBullets?: number | undefined;
                            hideOnClick?: boolean | undefined;
                            clickable?: boolean | undefined;
                            progressbarOpposite?: boolean | undefined;
                            formatFractionCurrent?: ((number: number) => number | string) | undefined;
                            formatFractionTotal?: ((number: number) => number | string) | undefined;
                            renderBullet?: ((index: number, className: string) => string) | undefined;
                            renderFraction?: ((currentClass: string, totalClass: string) => string) | undefined;
                            renderProgressbar?: ((progressbarFillClass: string) => string) | undefined;
                            renderCustom?: ((swiper: SwiperType, current: number, total: number) => string) | undefined;
                            bulletClass?: string | undefined;
                            bulletActiveClass?: string | undefined;
                            modifierClass?: string | undefined;
                            currentClass?: string | undefined;
                            totalClass?: string | undefined;
                            hiddenClass?: string | undefined;
                            progressbarFillClass?: string | undefined;
                            progressbarOppositeClass?: string | undefined;
                            clickableClass?: string | undefined;
                            lockClass?: string | undefined;
                            horizontalClass?: string | undefined;
                            verticalClass?: string | undefined;
                            paginationDisabledClass?: string | undefined;
                        } | undefined;
                        parallax?: boolean | {
                            enabled?: boolean | undefined;
                        } | undefined;
                        scrollbar?: boolean | {
                            enabled?: boolean | undefined;
                            el?: HTMLElement | {
                                readonly [x: number]: string;
                                toString: () => string;
                                charAt: (pos: number) => string;
                                charCodeAt: (index: number) => number;
                                concat: (...strings: string[]) => string;
                                indexOf: (searchString: string, position?: number) => number;
                                lastIndexOf: (searchString: string, position?: number) => number;
                                localeCompare: {
                                    (that: string): number;
                                    (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                    (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                                };
                                match: {
                                    (regexp: string | RegExp): RegExpMatchArray | null;
                                    (matcher: {
                                        [Symbol.match](string: string): RegExpMatchArray | null;
                                    }): RegExpMatchArray | null;
                                };
                                replace: {
                                    (searchValue: string | RegExp, replaceValue: string): string;
                                    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replaceValue: string): string;
                                    }, replaceValue: string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                    }, replacer: (substring: string, ...args: any[]) => string): string;
                                };
                                search: {
                                    (regexp: string | RegExp): number;
                                    (searcher: {
                                        [Symbol.search](string: string): number;
                                    }): number;
                                };
                                slice: (start?: number, end?: number) => string;
                                split: {
                                    (separator: string | RegExp, limit?: number): string[];
                                    (splitter: {
                                        [Symbol.split](string: string, limit?: number): string[];
                                    }, limit?: number): string[];
                                };
                                substring: (start: number, end?: number) => string;
                                toLowerCase: () => string;
                                toLocaleLowerCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                toUpperCase: () => string;
                                toLocaleUpperCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                trim: () => string;
                                readonly length: number;
                                substr: (from: number, length?: number) => string;
                                valueOf: () => string;
                                codePointAt: (pos: number) => number | undefined;
                                includes: (searchString: string, position?: number) => boolean;
                                endsWith: (searchString: string, endPosition?: number) => boolean;
                                normalize: {
                                    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                    (form?: string): string;
                                };
                                repeat: (count: number) => string;
                                startsWith: (searchString: string, position?: number) => boolean;
                                anchor: (name: string) => string;
                                big: () => string;
                                blink: () => string;
                                bold: () => string;
                                fixed: () => string;
                                fontcolor: (color: string) => string;
                                fontsize: {
                                    (size: number): string;
                                    (size: string): string;
                                };
                                italics: () => string;
                                link: (url: string) => string;
                                small: () => string;
                                strike: () => string;
                                sub: () => string;
                                sup: () => string;
                                padStart: (maxLength: number, fillString?: string) => string;
                                padEnd: (maxLength: number, fillString?: string) => string;
                                trimEnd: () => string;
                                trimStart: () => string;
                                trimLeft: () => string;
                                trimRight: () => string;
                                matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                                [Symbol.iterator]: () => StringIterator<string>;
                                at: (index: number) => string | undefined;
                            } | null | undefined;
                            hide?: boolean | undefined;
                            draggable?: boolean | undefined;
                            snapOnRelease?: boolean | undefined;
                            dragSize?: ("auto" | number) | undefined;
                            lockClass?: string | undefined;
                            dragClass?: string | undefined;
                            scrollbarDisabledClass?: string | undefined;
                            horizontalClass?: string | undefined;
                            verticalClass?: string | undefined;
                        } | undefined;
                        thumbs?: {
                            swiper?: string | any | null | undefined;
                            slideThumbActiveClass?: string | undefined;
                            thumbsContainerClass?: string | undefined;
                            multipleActiveThumbs?: boolean | undefined;
                            autoScrollOffset?: number | undefined;
                        } | undefined;
                        virtual?: boolean | {
                            enabled?: boolean | undefined;
                            slides?: any[] | undefined;
                            cache?: boolean | undefined;
                            addSlidesBefore?: number | undefined;
                            addSlidesAfter?: number | undefined;
                            renderSlide?: ((slide: any, index: any) => any | null) | undefined;
                            renderExternal?: ((data: import('swiper/types').VirtualData<any>) => any | null) | undefined;
                            renderExternalUpdate?: boolean | undefined;
                        } | undefined;
                        zoom?: boolean | {
                            limitToOriginalSize?: boolean | undefined;
                            maxRatio?: number | undefined;
                            minRatio?: number | undefined;
                            toggle?: boolean | undefined;
                            containerClass?: string | undefined;
                            zoomedSlideClass?: string | undefined;
                        } | undefined;
                        freeMode?: boolean | {
                            enabled?: boolean | undefined;
                            momentum?: boolean | undefined;
                            momentumRatio?: number | undefined;
                            momentumVelocityRatio?: number | undefined;
                            momentumBounce?: boolean | undefined;
                            momentumBounceRatio?: number | undefined;
                            minimumVelocity?: number | undefined;
                            sticky?: boolean | undefined;
                        } | undefined;
                        grid?: {
                            rows?: number | undefined;
                            fill?: ("row" | "column") | undefined;
                        } | undefined;
                        _emitClasses?: boolean | undefined;
                    };
                    originalParams: {
                        modules?: import('swiper/types').SwiperModule[] | undefined;
                        injectStyles?: string[] | undefined;
                        injectStylesUrls?: string[] | undefined;
                        init?: boolean | undefined;
                        enabled?: boolean | undefined;
                        updateOnWindowResize?: boolean | undefined;
                        resizeObserver?: boolean | undefined;
                        initialSlide?: number | undefined;
                        direction?: ("horizontal" | "vertical") | undefined;
                        oneWayMovement?: boolean | undefined;
                        swiperElementNodeName?: string | undefined;
                        speed?: number | undefined;
                        setWrapperSize?: boolean | undefined;
                        virtualTranslate?: boolean | undefined;
                        width?: (number | null) | undefined;
                        height?: (number | null) | undefined;
                        autoHeight?: boolean | undefined;
                        roundLengths?: boolean | undefined;
                        nested?: boolean | undefined;
                        createElements?: boolean | undefined;
                        eventsPrefix?: string | undefined;
                        focusableElements?: string | undefined;
                        uniqueNavElements?: boolean | undefined;
                        effect?: ("slide" | "fade" | "cube" | "coverflow" | "flip" | "creative" | "cards" | string) | undefined;
                        runCallbacksOnInit?: boolean | undefined;
                        watchOverflow?: boolean | undefined;
                        userAgent?: (string | null) | undefined;
                        url?: (string | null) | undefined;
                        on?: {
                            init?: ((swiper: SwiperType) => any) | undefined;
                            beforeDestroy?: ((swiper: SwiperType) => void) | undefined;
                            slidesUpdated?: ((swiper: SwiperType) => void) | undefined;
                            slideChange?: ((swiper: SwiperType) => void) | undefined;
                            slideChangeTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                            slideChangeTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                            slideNextTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                            slideNextTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                            slidePrevTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                            slidePrevTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                            transitionStart?: ((swiper: SwiperType) => void) | undefined;
                            transitionEnd?: ((swiper: SwiperType) => void) | undefined;
                            touchStart?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            touchMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            touchMoveOpposite?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            sliderMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            touchEnd?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            click?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            tap?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            doubleTap?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            progress?: ((swiper: SwiperType, progress: number) => void) | undefined;
                            reachBeginning?: ((swiper: SwiperType) => void) | undefined;
                            reachEnd?: ((swiper: SwiperType) => void) | undefined;
                            toEdge?: ((swiper: SwiperType) => void) | undefined;
                            fromEdge?: ((swiper: SwiperType) => void) | undefined;
                            setTranslate?: ((swiper: SwiperType, translate: number) => void) | undefined;
                            setTransition?: ((swiper: SwiperType, transition: number) => void) | undefined;
                            resize?: ((swiper: SwiperType) => void) | undefined;
                            observerUpdate?: ((swiper: SwiperType) => void) | undefined;
                            beforeLoopFix?: ((swiper: SwiperType) => void) | undefined;
                            loopFix?: ((swiper: SwiperType) => void) | undefined;
                            breakpoint?: ((swiper: SwiperType, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                            _beforeBreakpoint?: ((swiper: SwiperType, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                            _containerClasses?: ((swiper: SwiperType, classNames: string) => void) | undefined;
                            _slideClass?: ((swiper: SwiperType, slideEl: HTMLElement, classNames: string) => void) | undefined;
                            _slideClasses?: ((swiper: SwiperType, slides: {
                                slideEl: HTMLElement;
                                classNames: string;
                                index: number;
                            }[]) => void) | undefined;
                            _swiper?: ((swiper: SwiperType) => void) | undefined;
                            _freeModeNoMomentumRelease?: ((swiper: SwiperType) => void) | undefined;
                            activeIndexChange?: ((swiper: SwiperType) => void) | undefined;
                            snapIndexChange?: ((swiper: SwiperType) => void) | undefined;
                            realIndexChange?: ((swiper: SwiperType) => void) | undefined;
                            afterInit?: ((swiper: SwiperType) => void) | undefined;
                            beforeInit?: ((swiper: SwiperType) => void) | undefined;
                            beforeResize?: ((swiper: SwiperType) => void) | undefined;
                            beforeSlideChangeStart?: ((swiper: SwiperType) => void) | undefined;
                            beforeTransitionStart?: ((swiper: SwiperType, speed: number, internal: any) => void) | undefined;
                            changeDirection?: ((swiper: SwiperType) => void) | undefined;
                            doubleClick?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            destroy?: ((swiper: SwiperType) => void) | undefined;
                            momentumBounce?: ((swiper: SwiperType) => void) | undefined;
                            orientationchange?: ((swiper: SwiperType) => void) | undefined;
                            slideResetTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                            slideResetTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                            sliderFirstMove?: ((swiper: SwiperType, event: TouchEvent) => void) | undefined;
                            slidesLengthChange?: ((swiper: SwiperType) => void) | undefined;
                            slidesGridLengthChange?: ((swiper: SwiperType) => void) | undefined;
                            snapGridLengthChange?: ((swiper: SwiperType) => void) | undefined;
                            update?: ((swiper: SwiperType) => void) | undefined;
                            lock?: ((swiper: SwiperType) => void) | undefined;
                            unlock?: ((swiper: SwiperType) => void) | undefined;
                            autoplayStart?: ((swiper: SwiperType) => void) | undefined;
                            autoplayStop?: ((swiper: SwiperType) => void) | undefined;
                            autoplayPause?: ((swiper: SwiperType) => void) | undefined;
                            autoplayResume?: ((swiper: SwiperType) => void) | undefined;
                            autoplayTimeLeft?: ((swiper: SwiperType, timeLeft: number, percentage: number) => void) | undefined;
                            autoplay?: ((swiper: SwiperType) => void) | undefined;
                            hashChange?: ((swiper: SwiperType) => void) | undefined;
                            hashSet?: ((swiper: SwiperType) => void) | undefined;
                            keyPress?: ((swiper: SwiperType, keyCode: string) => void) | undefined;
                            scroll?: ((swiper: SwiperType, event: WheelEvent) => void) | undefined;
                            navigationHide?: ((swiper: SwiperType) => void) | undefined;
                            navigationShow?: ((swiper: SwiperType) => void) | undefined;
                            navigationPrev?: ((swiper: SwiperType) => void) | undefined;
                            navigationNext?: ((swiper: SwiperType) => void) | undefined;
                            paginationRender?: ((swiper: SwiperType, paginationEl: HTMLElement) => void) | undefined;
                            paginationUpdate?: ((swiper: SwiperType, paginationEl: HTMLElement) => void) | undefined;
                            paginationHide?: ((swiper: SwiperType) => void) | undefined;
                            paginationShow?: ((swiper: SwiperType) => void) | undefined;
                            scrollbarDragStart?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            scrollbarDragMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            scrollbarDragEnd?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                            zoomChange?: ((swiper: SwiperType, scale: number, imageEl: HTMLElement, slideEl: HTMLElement) => void) | undefined;
                        } | undefined;
                        onAny?: ((handler: (eventName: string, ...args: any[]) => void) => void) | undefined;
                        cssMode?: boolean | undefined;
                        spaceBetween?: (number | string) | undefined;
                        slidesPerView?: (number | "auto") | undefined;
                        maxBackfaceHiddenSlides?: number | undefined;
                        slidesPerGroup?: number | undefined;
                        slidesPerGroupSkip?: number | undefined;
                        slidesPerGroupAuto?: boolean | undefined;
                        centeredSlides?: boolean | undefined;
                        centeredSlidesBounds?: boolean | undefined;
                        slidesOffsetBefore?: number | undefined;
                        slidesOffsetAfter?: number | undefined;
                        normalizeSlideIndex?: boolean | undefined;
                        centerInsufficientSlides?: boolean | undefined;
                        grabCursor?: boolean | undefined;
                        touchEventsTarget?: ("container" | "wrapper") | undefined;
                        touchRatio?: number | undefined;
                        touchAngle?: number | undefined;
                        simulateTouch?: boolean | undefined;
                        shortSwipes?: boolean | undefined;
                        longSwipes?: boolean | undefined;
                        longSwipesRatio?: number | undefined;
                        longSwipesMs?: number | undefined;
                        followFinger?: boolean | undefined;
                        allowTouchMove?: boolean | undefined;
                        threshold?: number | undefined;
                        touchStartPreventDefault?: boolean | undefined;
                        touchStartForcePreventDefault?: boolean | undefined;
                        touchMoveStopPropagation?: boolean | undefined;
                        edgeSwipeDetection?: (boolean | string) | undefined;
                        edgeSwipeThreshold?: number | undefined;
                        touchReleaseOnEdges?: boolean | undefined;
                        passiveListeners?: boolean | undefined;
                        resistance?: boolean | undefined;
                        resistanceRatio?: number | undefined;
                        preventInteractionOnTransition?: boolean | undefined;
                        allowSlidePrev?: boolean | undefined;
                        allowSlideNext?: boolean | undefined;
                        noSwiping?: boolean | undefined;
                        noSwipingClass?: string | undefined;
                        noSwipingSelector?: string | undefined;
                        swipeHandler?: HTMLElement | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | null | undefined;
                        preventClicks?: boolean | undefined;
                        preventClicksPropagation?: boolean | undefined;
                        slideToClickedSlide?: boolean | undefined;
                        watchSlidesProgress?: boolean | undefined;
                        loop?: boolean | undefined;
                        loopAddBlankSlides?: boolean | undefined;
                        loopAdditionalSlides?: number | undefined;
                        loopPreventsSliding?: boolean | undefined;
                        rewind?: boolean | undefined;
                        breakpoints?: {
                            [width: number]: import('swiper/types').SwiperOptions;
                            [ratio: string]: import('swiper/types').SwiperOptions;
                        } | undefined;
                        breakpointsBase?: ("window" | "container") | undefined;
                        observer?: boolean | undefined;
                        observeSlideChildren?: boolean | undefined;
                        observeParents?: boolean | undefined;
                        containerModifierClass?: string | undefined;
                        slideClass?: string | undefined;
                        slideActiveClass?: string | undefined;
                        slideVisibleClass?: string | undefined;
                        slideFullyVisibleClass?: string | undefined;
                        slideBlankClass?: string | undefined;
                        slideNextClass?: string | undefined;
                        slidePrevClass?: string | undefined;
                        wrapperClass?: string | undefined;
                        lazyPreloaderClass?: string | undefined;
                        lazyPreloadPrevNext?: number | undefined;
                        a11y?: {
                            enabled?: boolean | undefined;
                            prevSlideMessage?: string | undefined;
                            nextSlideMessage?: string | undefined;
                            firstSlideMessage?: string | undefined;
                            lastSlideMessage?: string | undefined;
                            paginationBulletMessage?: string | undefined;
                            notificationClass?: string | undefined;
                            containerMessage?: (string | null) | undefined;
                            containerRoleDescriptionMessage?: (string | null) | undefined;
                            containerRole?: (string | null) | undefined;
                            itemRoleDescriptionMessage?: (string | null) | undefined;
                            slideLabelMessage?: string | undefined;
                            slideRole?: string | undefined;
                            id?: (string | number | null) | undefined;
                            scrollOnFocus?: boolean | undefined;
                        } | undefined;
                        autoplay?: boolean | {
                            delay?: number | undefined;
                            stopOnLastSlide?: boolean | undefined;
                            disableOnInteraction?: boolean | undefined;
                            reverseDirection?: boolean | undefined;
                            waitForTransition?: boolean | undefined;
                            pauseOnMouseEnter?: boolean | undefined;
                        } | undefined;
                        controller?: {
                            control?: string | HTMLElement | any | any[] | null | undefined;
                            inverse?: boolean | undefined;
                            by?: ("slide" | "container") | undefined;
                        } | undefined;
                        coverflowEffect?: {
                            slideShadows?: boolean | undefined;
                            rotate?: number | undefined;
                            stretch?: number | undefined;
                            depth?: number | undefined;
                            scale?: number | undefined;
                            modifier?: number | undefined;
                        } | undefined;
                        cubeEffect?: {
                            slideShadows?: boolean | undefined;
                            shadow?: boolean | undefined;
                            shadowOffset?: number | undefined;
                            shadowScale?: number | undefined;
                        } | undefined;
                        fadeEffect?: {
                            crossFade?: boolean | undefined;
                        } | undefined;
                        flipEffect?: {
                            slideShadows?: boolean | undefined;
                            limitRotation?: boolean | undefined;
                        } | undefined;
                        creativeEffect?: {
                            prev?: {
                                translate?: (string | number)[] | undefined;
                                rotate?: number[] | undefined;
                                opacity?: number | undefined;
                                scale?: number | undefined;
                                shadow?: boolean | undefined;
                                origin?: string | undefined;
                            } | undefined;
                            next?: {
                                translate?: (string | number)[] | undefined;
                                rotate?: number[] | undefined;
                                opacity?: number | undefined;
                                scale?: number | undefined;
                                shadow?: boolean | undefined;
                                origin?: string | undefined;
                            } | undefined;
                            limitProgress?: number | undefined;
                            shadowPerProgress?: boolean | undefined;
                            progressMultiplier?: number | undefined;
                            perspective?: boolean | undefined;
                        } | undefined;
                        cardsEffect?: {
                            slideShadows?: boolean | undefined;
                            rotate?: boolean | undefined;
                            perSlideRotate?: number | undefined;
                            perSlideOffset?: number | undefined;
                        } | undefined;
                        hashNavigation?: boolean | {
                            watchState?: boolean | undefined;
                            replaceState?: boolean | undefined;
                            getSlideIndex?: ((swiper: SwiperType, hash: string) => number) | undefined;
                        } | undefined;
                        history?: boolean | {
                            enabled?: boolean | undefined;
                            root?: string | undefined;
                            replaceState?: boolean | undefined;
                            key?: string | undefined;
                            keepQuery?: boolean | undefined;
                        } | undefined;
                        keyboard?: boolean | {
                            enabled?: boolean | undefined;
                            onlyInViewport?: boolean | undefined;
                            pageUpDown?: boolean | undefined;
                        } | undefined;
                        mousewheel?: boolean | {
                            enabled?: boolean | undefined;
                            forceToAxis?: boolean | undefined;
                            releaseOnEdges?: boolean | undefined;
                            invert?: boolean | undefined;
                            sensitivity?: number | undefined;
                            eventsTarget?: HTMLElement | "container" | "wrapper" | {
                                readonly [x: number]: string;
                                toString: () => string;
                                charAt: (pos: number) => string;
                                charCodeAt: (index: number) => number;
                                concat: (...strings: string[]) => string;
                                indexOf: (searchString: string, position?: number) => number;
                                lastIndexOf: (searchString: string, position?: number) => number;
                                localeCompare: {
                                    (that: string): number;
                                    (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                    (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                                };
                                match: {
                                    (regexp: string | RegExp): RegExpMatchArray | null;
                                    (matcher: {
                                        [Symbol.match](string: string): RegExpMatchArray | null;
                                    }): RegExpMatchArray | null;
                                };
                                replace: {
                                    (searchValue: string | RegExp, replaceValue: string): string;
                                    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replaceValue: string): string;
                                    }, replaceValue: string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                    }, replacer: (substring: string, ...args: any[]) => string): string;
                                };
                                search: {
                                    (regexp: string | RegExp): number;
                                    (searcher: {
                                        [Symbol.search](string: string): number;
                                    }): number;
                                };
                                slice: (start?: number, end?: number) => string;
                                split: {
                                    (separator: string | RegExp, limit?: number): string[];
                                    (splitter: {
                                        [Symbol.split](string: string, limit?: number): string[];
                                    }, limit?: number): string[];
                                };
                                substring: (start: number, end?: number) => string;
                                toLowerCase: () => string;
                                toLocaleLowerCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                toUpperCase: () => string;
                                toLocaleUpperCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                trim: () => string;
                                readonly length: number;
                                substr: (from: number, length?: number) => string;
                                valueOf: () => string;
                                codePointAt: (pos: number) => number | undefined;
                                includes: (searchString: string, position?: number) => boolean;
                                endsWith: (searchString: string, endPosition?: number) => boolean;
                                normalize: {
                                    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                    (form?: string): string;
                                };
                                repeat: (count: number) => string;
                                startsWith: (searchString: string, position?: number) => boolean;
                                anchor: (name: string) => string;
                                big: () => string;
                                blink: () => string;
                                bold: () => string;
                                fixed: () => string;
                                fontcolor: (color: string) => string;
                                fontsize: {
                                    (size: number): string;
                                    (size: string): string;
                                };
                                italics: () => string;
                                link: (url: string) => string;
                                small: () => string;
                                strike: () => string;
                                sub: () => string;
                                sup: () => string;
                                padStart: (maxLength: number, fillString?: string) => string;
                                padEnd: (maxLength: number, fillString?: string) => string;
                                trimEnd: () => string;
                                trimStart: () => string;
                                trimLeft: () => string;
                                trimRight: () => string;
                                matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                                [Symbol.iterator]: () => StringIterator<string>;
                                at: (index: number) => string | undefined;
                            } | undefined;
                            thresholdDelta?: (number | null) | undefined;
                            thresholdTime?: (number | null) | undefined;
                            noMousewheelClass?: string | undefined;
                        } | undefined;
                        navigation?: boolean | {
                            enabled?: boolean | undefined;
                            nextEl?: HTMLElement | {
                                readonly [x: number]: string;
                                toString: () => string;
                                charAt: (pos: number) => string;
                                charCodeAt: (index: number) => number;
                                concat: (...strings: string[]) => string;
                                indexOf: (searchString: string, position?: number) => number;
                                lastIndexOf: (searchString: string, position?: number) => number;
                                localeCompare: {
                                    (that: string): number;
                                    (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                    (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                                };
                                match: {
                                    (regexp: string | RegExp): RegExpMatchArray | null;
                                    (matcher: {
                                        [Symbol.match](string: string): RegExpMatchArray | null;
                                    }): RegExpMatchArray | null;
                                };
                                replace: {
                                    (searchValue: string | RegExp, replaceValue: string): string;
                                    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replaceValue: string): string;
                                    }, replaceValue: string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                    }, replacer: (substring: string, ...args: any[]) => string): string;
                                };
                                search: {
                                    (regexp: string | RegExp): number;
                                    (searcher: {
                                        [Symbol.search](string: string): number;
                                    }): number;
                                };
                                slice: (start?: number, end?: number) => string;
                                split: {
                                    (separator: string | RegExp, limit?: number): string[];
                                    (splitter: {
                                        [Symbol.split](string: string, limit?: number): string[];
                                    }, limit?: number): string[];
                                };
                                substring: (start: number, end?: number) => string;
                                toLowerCase: () => string;
                                toLocaleLowerCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                toUpperCase: () => string;
                                toLocaleUpperCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                trim: () => string;
                                readonly length: number;
                                substr: (from: number, length?: number) => string;
                                valueOf: () => string;
                                codePointAt: (pos: number) => number | undefined;
                                includes: (searchString: string, position?: number) => boolean;
                                endsWith: (searchString: string, endPosition?: number) => boolean;
                                normalize: {
                                    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                    (form?: string): string;
                                };
                                repeat: (count: number) => string;
                                startsWith: (searchString: string, position?: number) => boolean;
                                anchor: (name: string) => string;
                                big: () => string;
                                blink: () => string;
                                bold: () => string;
                                fixed: () => string;
                                fontcolor: (color: string) => string;
                                fontsize: {
                                    (size: number): string;
                                    (size: string): string;
                                };
                                italics: () => string;
                                link: (url: string) => string;
                                small: () => string;
                                strike: () => string;
                                sub: () => string;
                                sup: () => string;
                                padStart: (maxLength: number, fillString?: string) => string;
                                padEnd: (maxLength: number, fillString?: string) => string;
                                trimEnd: () => string;
                                trimStart: () => string;
                                trimLeft: () => string;
                                trimRight: () => string;
                                matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                                [Symbol.iterator]: () => StringIterator<string>;
                                at: (index: number) => string | undefined;
                            } | null | undefined;
                            prevEl?: HTMLElement | {
                                readonly [x: number]: string;
                                toString: () => string;
                                charAt: (pos: number) => string;
                                charCodeAt: (index: number) => number;
                                concat: (...strings: string[]) => string;
                                indexOf: (searchString: string, position?: number) => number;
                                lastIndexOf: (searchString: string, position?: number) => number;
                                localeCompare: {
                                    (that: string): number;
                                    (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                    (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                                };
                                match: {
                                    (regexp: string | RegExp): RegExpMatchArray | null;
                                    (matcher: {
                                        [Symbol.match](string: string): RegExpMatchArray | null;
                                    }): RegExpMatchArray | null;
                                };
                                replace: {
                                    (searchValue: string | RegExp, replaceValue: string): string;
                                    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replaceValue: string): string;
                                    }, replaceValue: string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                    }, replacer: (substring: string, ...args: any[]) => string): string;
                                };
                                search: {
                                    (regexp: string | RegExp): number;
                                    (searcher: {
                                        [Symbol.search](string: string): number;
                                    }): number;
                                };
                                slice: (start?: number, end?: number) => string;
                                split: {
                                    (separator: string | RegExp, limit?: number): string[];
                                    (splitter: {
                                        [Symbol.split](string: string, limit?: number): string[];
                                    }, limit?: number): string[];
                                };
                                substring: (start: number, end?: number) => string;
                                toLowerCase: () => string;
                                toLocaleLowerCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                toUpperCase: () => string;
                                toLocaleUpperCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                trim: () => string;
                                readonly length: number;
                                substr: (from: number, length?: number) => string;
                                valueOf: () => string;
                                codePointAt: (pos: number) => number | undefined;
                                includes: (searchString: string, position?: number) => boolean;
                                endsWith: (searchString: string, endPosition?: number) => boolean;
                                normalize: {
                                    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                    (form?: string): string;
                                };
                                repeat: (count: number) => string;
                                startsWith: (searchString: string, position?: number) => boolean;
                                anchor: (name: string) => string;
                                big: () => string;
                                blink: () => string;
                                bold: () => string;
                                fixed: () => string;
                                fontcolor: (color: string) => string;
                                fontsize: {
                                    (size: number): string;
                                    (size: string): string;
                                };
                                italics: () => string;
                                link: (url: string) => string;
                                small: () => string;
                                strike: () => string;
                                sub: () => string;
                                sup: () => string;
                                padStart: (maxLength: number, fillString?: string) => string;
                                padEnd: (maxLength: number, fillString?: string) => string;
                                trimEnd: () => string;
                                trimStart: () => string;
                                trimLeft: () => string;
                                trimRight: () => string;
                                matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                                [Symbol.iterator]: () => StringIterator<string>;
                                at: (index: number) => string | undefined;
                            } | null | undefined;
                            hideOnClick?: boolean | undefined;
                            disabledClass?: string | undefined;
                            hiddenClass?: string | undefined;
                            lockClass?: string | undefined;
                            navigationDisabledClass?: string | undefined;
                        } | undefined;
                        pagination?: boolean | {
                            enabled?: boolean | undefined;
                            el?: HTMLElement | {
                                readonly [x: number]: string;
                                toString: () => string;
                                charAt: (pos: number) => string;
                                charCodeAt: (index: number) => number;
                                concat: (...strings: string[]) => string;
                                indexOf: (searchString: string, position?: number) => number;
                                lastIndexOf: (searchString: string, position?: number) => number;
                                localeCompare: {
                                    (that: string): number;
                                    (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                    (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                                };
                                match: {
                                    (regexp: string | RegExp): RegExpMatchArray | null;
                                    (matcher: {
                                        [Symbol.match](string: string): RegExpMatchArray | null;
                                    }): RegExpMatchArray | null;
                                };
                                replace: {
                                    (searchValue: string | RegExp, replaceValue: string): string;
                                    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replaceValue: string): string;
                                    }, replaceValue: string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                    }, replacer: (substring: string, ...args: any[]) => string): string;
                                };
                                search: {
                                    (regexp: string | RegExp): number;
                                    (searcher: {
                                        [Symbol.search](string: string): number;
                                    }): number;
                                };
                                slice: (start?: number, end?: number) => string;
                                split: {
                                    (separator: string | RegExp, limit?: number): string[];
                                    (splitter: {
                                        [Symbol.split](string: string, limit?: number): string[];
                                    }, limit?: number): string[];
                                };
                                substring: (start: number, end?: number) => string;
                                toLowerCase: () => string;
                                toLocaleLowerCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                toUpperCase: () => string;
                                toLocaleUpperCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                trim: () => string;
                                readonly length: number;
                                substr: (from: number, length?: number) => string;
                                valueOf: () => string;
                                codePointAt: (pos: number) => number | undefined;
                                includes: (searchString: string, position?: number) => boolean;
                                endsWith: (searchString: string, endPosition?: number) => boolean;
                                normalize: {
                                    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                    (form?: string): string;
                                };
                                repeat: (count: number) => string;
                                startsWith: (searchString: string, position?: number) => boolean;
                                anchor: (name: string) => string;
                                big: () => string;
                                blink: () => string;
                                bold: () => string;
                                fixed: () => string;
                                fontcolor: (color: string) => string;
                                fontsize: {
                                    (size: number): string;
                                    (size: string): string;
                                };
                                italics: () => string;
                                link: (url: string) => string;
                                small: () => string;
                                strike: () => string;
                                sub: () => string;
                                sup: () => string;
                                padStart: (maxLength: number, fillString?: string) => string;
                                padEnd: (maxLength: number, fillString?: string) => string;
                                trimEnd: () => string;
                                trimStart: () => string;
                                trimLeft: () => string;
                                trimRight: () => string;
                                matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                                [Symbol.iterator]: () => StringIterator<string>;
                                at: (index: number) => string | undefined;
                            } | null | undefined;
                            type?: ("bullets" | "fraction" | "progressbar" | "custom") | undefined;
                            bulletElement?: string | undefined;
                            dynamicBullets?: boolean | undefined;
                            dynamicMainBullets?: number | undefined;
                            hideOnClick?: boolean | undefined;
                            clickable?: boolean | undefined;
                            progressbarOpposite?: boolean | undefined;
                            formatFractionCurrent?: ((number: number) => number | string) | undefined;
                            formatFractionTotal?: ((number: number) => number | string) | undefined;
                            renderBullet?: ((index: number, className: string) => string) | undefined;
                            renderFraction?: ((currentClass: string, totalClass: string) => string) | undefined;
                            renderProgressbar?: ((progressbarFillClass: string) => string) | undefined;
                            renderCustom?: ((swiper: SwiperType, current: number, total: number) => string) | undefined;
                            bulletClass?: string | undefined;
                            bulletActiveClass?: string | undefined;
                            modifierClass?: string | undefined;
                            currentClass?: string | undefined;
                            totalClass?: string | undefined;
                            hiddenClass?: string | undefined;
                            progressbarFillClass?: string | undefined;
                            progressbarOppositeClass?: string | undefined;
                            clickableClass?: string | undefined;
                            lockClass?: string | undefined;
                            horizontalClass?: string | undefined;
                            verticalClass?: string | undefined;
                            paginationDisabledClass?: string | undefined;
                        } | undefined;
                        parallax?: boolean | {
                            enabled?: boolean | undefined;
                        } | undefined;
                        scrollbar?: boolean | {
                            enabled?: boolean | undefined;
                            el?: HTMLElement | {
                                readonly [x: number]: string;
                                toString: () => string;
                                charAt: (pos: number) => string;
                                charCodeAt: (index: number) => number;
                                concat: (...strings: string[]) => string;
                                indexOf: (searchString: string, position?: number) => number;
                                lastIndexOf: (searchString: string, position?: number) => number;
                                localeCompare: {
                                    (that: string): number;
                                    (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                    (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                                };
                                match: {
                                    (regexp: string | RegExp): RegExpMatchArray | null;
                                    (matcher: {
                                        [Symbol.match](string: string): RegExpMatchArray | null;
                                    }): RegExpMatchArray | null;
                                };
                                replace: {
                                    (searchValue: string | RegExp, replaceValue: string): string;
                                    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replaceValue: string): string;
                                    }, replaceValue: string): string;
                                    (searchValue: {
                                        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                    }, replacer: (substring: string, ...args: any[]) => string): string;
                                };
                                search: {
                                    (regexp: string | RegExp): number;
                                    (searcher: {
                                        [Symbol.search](string: string): number;
                                    }): number;
                                };
                                slice: (start?: number, end?: number) => string;
                                split: {
                                    (separator: string | RegExp, limit?: number): string[];
                                    (splitter: {
                                        [Symbol.split](string: string, limit?: number): string[];
                                    }, limit?: number): string[];
                                };
                                substring: (start: number, end?: number) => string;
                                toLowerCase: () => string;
                                toLocaleLowerCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                toUpperCase: () => string;
                                toLocaleUpperCase: {
                                    (locales?: string | string[]): string;
                                    (locales?: Intl.LocalesArgument): string;
                                };
                                trim: () => string;
                                readonly length: number;
                                substr: (from: number, length?: number) => string;
                                valueOf: () => string;
                                codePointAt: (pos: number) => number | undefined;
                                includes: (searchString: string, position?: number) => boolean;
                                endsWith: (searchString: string, endPosition?: number) => boolean;
                                normalize: {
                                    (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                    (form?: string): string;
                                };
                                repeat: (count: number) => string;
                                startsWith: (searchString: string, position?: number) => boolean;
                                anchor: (name: string) => string;
                                big: () => string;
                                blink: () => string;
                                bold: () => string;
                                fixed: () => string;
                                fontcolor: (color: string) => string;
                                fontsize: {
                                    (size: number): string;
                                    (size: string): string;
                                };
                                italics: () => string;
                                link: (url: string) => string;
                                small: () => string;
                                strike: () => string;
                                sub: () => string;
                                sup: () => string;
                                padStart: (maxLength: number, fillString?: string) => string;
                                padEnd: (maxLength: number, fillString?: string) => string;
                                trimEnd: () => string;
                                trimStart: () => string;
                                trimLeft: () => string;
                                trimRight: () => string;
                                matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                                [Symbol.iterator]: () => StringIterator<string>;
                                at: (index: number) => string | undefined;
                            } | null | undefined;
                            hide?: boolean | undefined;
                            draggable?: boolean | undefined;
                            snapOnRelease?: boolean | undefined;
                            dragSize?: ("auto" | number) | undefined;
                            lockClass?: string | undefined;
                            dragClass?: string | undefined;
                            scrollbarDisabledClass?: string | undefined;
                            horizontalClass?: string | undefined;
                            verticalClass?: string | undefined;
                        } | undefined;
                        thumbs?: {
                            swiper?: string | any | null | undefined;
                            slideThumbActiveClass?: string | undefined;
                            thumbsContainerClass?: string | undefined;
                            multipleActiveThumbs?: boolean | undefined;
                            autoScrollOffset?: number | undefined;
                        } | undefined;
                        virtual?: boolean | {
                            enabled?: boolean | undefined;
                            slides?: any[] | undefined;
                            cache?: boolean | undefined;
                            addSlidesBefore?: number | undefined;
                            addSlidesAfter?: number | undefined;
                            renderSlide?: ((slide: any, index: any) => any | null) | undefined;
                            renderExternal?: ((data: import('swiper/types').VirtualData<any>) => any | null) | undefined;
                            renderExternalUpdate?: boolean | undefined;
                        } | undefined;
                        zoom?: boolean | {
                            limitToOriginalSize?: boolean | undefined;
                            maxRatio?: number | undefined;
                            minRatio?: number | undefined;
                            toggle?: boolean | undefined;
                            containerClass?: string | undefined;
                            zoomedSlideClass?: string | undefined;
                        } | undefined;
                        freeMode?: boolean | {
                            enabled?: boolean | undefined;
                            momentum?: boolean | undefined;
                            momentumRatio?: number | undefined;
                            momentumVelocityRatio?: number | undefined;
                            momentumBounce?: boolean | undefined;
                            momentumBounceRatio?: number | undefined;
                            minimumVelocity?: number | undefined;
                            sticky?: boolean | undefined;
                        } | undefined;
                        grid?: {
                            rows?: number | undefined;
                            fill?: ("row" | "column") | undefined;
                        } | undefined;
                        _emitClasses?: boolean | undefined;
                    };
                    el: HTMLElement;
                    wrapperEl: HTMLElement;
                    slidesEl: HTMLElement;
                    slides: HTMLElement[];
                    loopedSlides: number | null;
                    width: number;
                    height: number;
                    translate: number;
                    progress: number;
                    activeIndex: number;
                    realIndex: number;
                    previousIndex: number;
                    snapIndex: number;
                    snapGrid: number[];
                    slidesGrid: number[];
                    slidesSizesGrid: number[];
                    isBeginning: boolean;
                    isEnd: boolean;
                    isLocked: boolean;
                    animating: boolean;
                    touches: {
                        startX: number;
                        startY: number;
                        currentX: number;
                        currentY: number;
                        diff: number;
                    };
                    clickedIndex: number;
                    clickedSlide: HTMLElement;
                    allowSlideNext: boolean;
                    allowSlidePrev: boolean;
                    allowTouchMove: boolean;
                    swipeDirection: "prev" | "next";
                    rtlTranslate: boolean;
                    disable: () => void;
                    enable: () => void;
                    setProgress: (progress: number, speed?: number) => void;
                    slideNext: (speed?: number, runCallbacks?: boolean) => boolean;
                    slidePrev: (speed?: number, runCallbacks?: boolean) => boolean;
                    slideTo: (index: number, speed?: number, runCallbacks?: boolean) => boolean;
                    slideToLoop: (index: number, speed?: number, runCallbacks?: boolean) => SwiperType;
                    slideReset: (speed?: number, runCallbacks?: boolean) => boolean;
                    slideToClosest: (speed?: number, runCallbacks?: boolean) => boolean;
                    slidesPerViewDynamic: () => number;
                    updateAutoHeight: (speed?: number) => void;
                    update: () => void;
                    updateSize: () => void;
                    updateSlides: () => void;
                    updateProgress: () => void;
                    updateSlidesClasses: () => void;
                    changeDirection: (direction?: "horizontal" | "vertical", needUpdate?: boolean) => void;
                    changeLanguageDirection: (direction: "rtl" | "ltr") => void;
                    detachEvents: () => void;
                    attachEvents: () => void;
                    loopCreate: () => void;
                    loopDestroy: () => void;
                    init: (el?: HTMLElement) => SwiperType;
                    destroy: (deleteInstance?: boolean, cleanStyles?: boolean) => void;
                    setTranslate: (translate: any) => void;
                    getTranslate: () => any;
                    translateTo: (translate: number, speed: number, runCallbacks?: boolean, translateBounds?: boolean) => any;
                    minTranslate: () => number;
                    maxTranslate: () => number;
                    unsetGrabCursor: () => void;
                    setGrabCursor: () => void;
                    onAny: (handler: (eventName: string, ...args: any[]) => void) => void;
                    offAny: (handler: (eventName: string, ...args: any[]) => void) => void;
                    isHorizontal: () => boolean;
                    getBreakpoint: (breakpoints: import('swiper/types').SwiperOptions["breakpoints"]) => string;
                    setBreakpoint: () => void;
                    currentBreakpoint: any;
                    destroyed: boolean;
                    modules: Array<import('swiper/types').SwiperModule>;
                    a11y: import('swiper/types').A11yMethods;
                    autoplay: {
                        running: boolean;
                        paused: boolean;
                        timeLeft: number;
                        pause: () => void;
                        resume: () => void;
                        start: () => boolean;
                        stop: () => boolean;
                    };
                    controller: {
                        control?: any | any[] | undefined;
                    };
                    coverflowEffect: import('swiper/types').CoverflowEffectMethods;
                    cubeEffect: import('swiper/types').CubeEffectMethods;
                    fadeEffect: import('swiper/types').FadeEffectMethods;
                    flipEffect: import('swiper/types').FlipEffectMethods;
                    creativeEffect: import('swiper/types').CreativeEffectMethods;
                    cardsEffect: import('swiper/types').CardsEffectMethods;
                    hashNavigation: import('swiper/types').HashNavigationMethods;
                    history: import('swiper/types').HistoryMethods;
                    keyboard: {
                        enabled: boolean;
                        enable: () => void;
                        disable: () => void;
                    };
                    mousewheel: {
                        enabled: boolean;
                        enable: () => void;
                        disable: () => void;
                    };
                    navigation: {
                        nextEl: HTMLElement;
                        prevEl: HTMLElement;
                        update: () => void;
                        init: () => void;
                        destroy: () => void;
                    };
                    pagination: {
                        el: HTMLElement;
                        bullets: HTMLElement[];
                        render: () => void;
                        update: () => void;
                        init: () => void;
                        destroy: () => void;
                    };
                    parallax: import('swiper/types').ParallaxMethods;
                    scrollbar: {
                        el: HTMLElement;
                        dragEl: HTMLElement;
                        updateSize: () => void;
                        setTranslate: () => void;
                        init: () => void;
                        destroy: () => void;
                    };
                    thumbs: {
                        swiper: any;
                        update: (initial: boolean) => void;
                        init: () => boolean;
                    };
                    virtual: {
                        cache: object;
                        from: number;
                        to: number;
                        slides: any[];
                        appendSlide: (slide: HTMLElement | string | HTMLElement[] | string[]) => void;
                        prependSlide: (slide: HTMLElement | string | HTMLElement[] | string[]) => void;
                        removeSlide: (slideIndexes: number[]) => void;
                        removeAllSlides: () => void;
                        update: (force: boolean) => void;
                    };
                    zoom: {
                        enabled: boolean;
                        scale: number;
                        enable: () => void;
                        disable: () => void;
                        in: (ratio?: number) => void;
                        out: () => void;
                        toggle: (event?: MouseEvent | TouchEvent | PointerEvent) => void;
                    };
                    freeMode: {
                        onTouchMove: () => void;
                        onTouchEnd: () => void;
                    };
                    on: <E extends keyof import('swiper/types').SwiperEvents>(event: E, handler: import('swiper/types').SwiperEvents[E]) => void;
                    once: <E extends keyof import('swiper/types').SwiperEvents>(event: E, handler: import('swiper/types').SwiperEvents[E]) => void;
                    off: {
                        <E extends keyof import('swiper/types').SwiperEvents>(event: E, handler: import('swiper/types').SwiperEvents[E]): void;
                        <E extends keyof import('swiper/types').SwiperEvents>(event: E): void;
                    };
                    emit: <E extends keyof import('swiper/types').SwiperEvents>(event: E, ...args: any[]) => void;
                    appendSlide: (slides: HTMLElement | string | string[] | HTMLElement[]) => void;
                    prependSlide: (slides: HTMLElement | string | string[] | HTMLElement[]) => void;
                    addSlide: (index: number, slides: HTMLElement | string | string[] | HTMLElement[]) => void;
                    removeSlide: (slideIndex: number | number[]) => void;
                    removeAllSlides: () => void;
                } | null>;
            }, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {
                "update:activeSlideIdx": (activeSlideIdx: number) => any;
            }, string, {
                width: string | number;
                height: string | number;
                direction: "horizontal" | "vertical";
                transitionDelay: number | string;
                initialSlide: number;
                slidesPerView: number;
                mousewheel: boolean;
                navigation: boolean;
                navDirection: "horizontal" | "vertical";
                navAlign: "center" | "start" | "end";
                navSize: string | number;
                navColor: string;
                navDisabledColor: string;
                transitionFun: string;
                transitionSpeed: number;
                swiperOverflow: string;
                enableSlideClick: boolean;
                slideClickHandler: (swiper: SwiperType) => void;
            }, {}, string, {}, import('vue').GlobalComponents, import('vue').GlobalDirectives, string, import('vue').ComponentProvideOptions> & {
                beforeCreate?: (() => void) | (() => void)[];
                created?: (() => void) | (() => void)[];
                beforeMount?: (() => void) | (() => void)[];
                mounted?: (() => void) | (() => void)[];
                beforeUpdate?: (() => void) | (() => void)[];
                updated?: (() => void) | (() => void)[];
                activated?: (() => void) | (() => void)[];
                deactivated?: (() => void) | (() => void)[];
                beforeDestroy?: (() => void) | (() => void)[];
                beforeUnmount?: (() => void) | (() => void)[];
                destroyed?: (() => void) | (() => void)[];
                unmounted?: (() => void) | (() => void)[];
                renderTracked?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
                renderTriggered?: ((e: import('vue').DebuggerEvent) => void) | ((e: import('vue').DebuggerEvent) => void)[];
                errorCaptured?: ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void) | ((err: unknown, instance: import('vue').ComponentPublicInstance | null, info: string) => boolean | void)[];
            };
            $forceUpdate: () => void;
            $nextTick: typeof import('vue').nextTick;
            $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (...args: [R, R, import('@vue/reactivity').OnCleanup]) => any : (...args: [any, any, import('@vue/reactivity').OnCleanup]) => any, options?: import('vue').WatchOptions): import('vue').WatchStopHandle;
        } & Readonly<{
            width: string | number;
            height: string | number;
            direction: "horizontal" | "vertical";
            transitionDelay: number | string;
            initialSlide: number;
            slidesPerView: number;
            mousewheel: boolean;
            navigation: boolean;
            navDirection: "horizontal" | "vertical";
            navAlign: "center" | "start" | "end";
            navSize: string | number;
            navColor: string;
            navDisabledColor: string;
            transitionFun: string;
            transitionSpeed: number;
            swiperOverflow: string;
            enableSlideClick: boolean;
            slideClickHandler: (swiper: SwiperType) => void;
        }> & Omit<Readonly<{
            activeSlideIdx?: number;
        } & {
            width?: string | number;
            height?: string | number;
            initialSlide?: number;
            direction?: "horizontal" | "vertical";
            slidesPerView?: number;
            slidesOffsetBefore?: number;
            slidesOffsetAfter?: number;
            mousewheel?: boolean;
            navigation?: boolean;
            navDirection?: "horizontal" | "vertical";
            navAlign?: "center" | "start" | "end";
            navSize?: string | number;
            navColor?: string;
            navDisabledColor?: string;
            transitionFun?: string;
            transitionSpeed?: number;
            transitionDelay?: number | string;
            controlSwiper?: SwiperType | SwiperType[];
            swiperOverflow?: string;
            enableSlideClick?: boolean;
            slideClickHandler?: (swiper: SwiperType) => void;
        }> & Readonly<{
            "onUpdate:activeSlideIdx"?: ((activeSlideIdx: number) => any) | undefined;
        }>, "swiper" | ("width" | "height" | "direction" | "transitionDelay" | "initialSlide" | "slidesPerView" | "mousewheel" | "navigation" | "navDirection" | "navAlign" | "navSize" | "navColor" | "navDisabledColor" | "transitionFun" | "transitionSpeed" | "swiperOverflow" | "enableSlideClick" | "slideClickHandler")> & import('vue').ShallowUnwrapRef<{
            swiper: import('vue').Ref<{
                params: {
                    modules?: import('swiper/types').SwiperModule[] | undefined;
                    injectStyles?: string[] | undefined;
                    injectStylesUrls?: string[] | undefined;
                    init?: boolean | undefined;
                    enabled?: boolean | undefined;
                    updateOnWindowResize?: boolean | undefined;
                    resizeObserver?: boolean | undefined;
                    initialSlide?: number | undefined;
                    direction?: ("horizontal" | "vertical") | undefined;
                    oneWayMovement?: boolean | undefined;
                    swiperElementNodeName?: string | undefined;
                    speed?: number | undefined;
                    setWrapperSize?: boolean | undefined;
                    virtualTranslate?: boolean | undefined;
                    width?: (number | null) | undefined;
                    height?: (number | null) | undefined;
                    autoHeight?: boolean | undefined;
                    roundLengths?: boolean | undefined;
                    nested?: boolean | undefined;
                    createElements?: boolean | undefined;
                    eventsPrefix?: string | undefined;
                    focusableElements?: string | undefined;
                    uniqueNavElements?: boolean | undefined;
                    effect?: ("slide" | "fade" | "cube" | "coverflow" | "flip" | "creative" | "cards" | string) | undefined;
                    runCallbacksOnInit?: boolean | undefined;
                    watchOverflow?: boolean | undefined;
                    userAgent?: (string | null) | undefined;
                    url?: (string | null) | undefined;
                    on?: {
                        init?: ((swiper: SwiperType) => any) | undefined;
                        beforeDestroy?: ((swiper: SwiperType) => void) | undefined;
                        slidesUpdated?: ((swiper: SwiperType) => void) | undefined;
                        slideChange?: ((swiper: SwiperType) => void) | undefined;
                        slideChangeTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                        slideChangeTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                        slideNextTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                        slideNextTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                        slidePrevTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                        slidePrevTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                        transitionStart?: ((swiper: SwiperType) => void) | undefined;
                        transitionEnd?: ((swiper: SwiperType) => void) | undefined;
                        touchStart?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        touchMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        touchMoveOpposite?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        sliderMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        touchEnd?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        click?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        tap?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        doubleTap?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        progress?: ((swiper: SwiperType, progress: number) => void) | undefined;
                        reachBeginning?: ((swiper: SwiperType) => void) | undefined;
                        reachEnd?: ((swiper: SwiperType) => void) | undefined;
                        toEdge?: ((swiper: SwiperType) => void) | undefined;
                        fromEdge?: ((swiper: SwiperType) => void) | undefined;
                        setTranslate?: ((swiper: SwiperType, translate: number) => void) | undefined;
                        setTransition?: ((swiper: SwiperType, transition: number) => void) | undefined;
                        resize?: ((swiper: SwiperType) => void) | undefined;
                        observerUpdate?: ((swiper: SwiperType) => void) | undefined;
                        beforeLoopFix?: ((swiper: SwiperType) => void) | undefined;
                        loopFix?: ((swiper: SwiperType) => void) | undefined;
                        breakpoint?: ((swiper: SwiperType, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                        _beforeBreakpoint?: ((swiper: SwiperType, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                        _containerClasses?: ((swiper: SwiperType, classNames: string) => void) | undefined;
                        _slideClass?: ((swiper: SwiperType, slideEl: HTMLElement, classNames: string) => void) | undefined;
                        _slideClasses?: ((swiper: SwiperType, slides: {
                            slideEl: HTMLElement;
                            classNames: string;
                            index: number;
                        }[]) => void) | undefined;
                        _swiper?: ((swiper: SwiperType) => void) | undefined;
                        _freeModeNoMomentumRelease?: ((swiper: SwiperType) => void) | undefined;
                        activeIndexChange?: ((swiper: SwiperType) => void) | undefined;
                        snapIndexChange?: ((swiper: SwiperType) => void) | undefined;
                        realIndexChange?: ((swiper: SwiperType) => void) | undefined;
                        afterInit?: ((swiper: SwiperType) => void) | undefined;
                        beforeInit?: ((swiper: SwiperType) => void) | undefined;
                        beforeResize?: ((swiper: SwiperType) => void) | undefined;
                        beforeSlideChangeStart?: ((swiper: SwiperType) => void) | undefined;
                        beforeTransitionStart?: ((swiper: SwiperType, speed: number, internal: any) => void) | undefined;
                        changeDirection?: ((swiper: SwiperType) => void) | undefined;
                        doubleClick?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        destroy?: ((swiper: SwiperType) => void) | undefined;
                        momentumBounce?: ((swiper: SwiperType) => void) | undefined;
                        orientationchange?: ((swiper: SwiperType) => void) | undefined;
                        slideResetTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                        slideResetTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                        sliderFirstMove?: ((swiper: SwiperType, event: TouchEvent) => void) | undefined;
                        slidesLengthChange?: ((swiper: SwiperType) => void) | undefined;
                        slidesGridLengthChange?: ((swiper: SwiperType) => void) | undefined;
                        snapGridLengthChange?: ((swiper: SwiperType) => void) | undefined;
                        update?: ((swiper: SwiperType) => void) | undefined;
                        lock?: ((swiper: SwiperType) => void) | undefined;
                        unlock?: ((swiper: SwiperType) => void) | undefined;
                        autoplayStart?: ((swiper: SwiperType) => void) | undefined;
                        autoplayStop?: ((swiper: SwiperType) => void) | undefined;
                        autoplayPause?: ((swiper: SwiperType) => void) | undefined;
                        autoplayResume?: ((swiper: SwiperType) => void) | undefined;
                        autoplayTimeLeft?: ((swiper: SwiperType, timeLeft: number, percentage: number) => void) | undefined;
                        autoplay?: ((swiper: SwiperType) => void) | undefined;
                        hashChange?: ((swiper: SwiperType) => void) | undefined;
                        hashSet?: ((swiper: SwiperType) => void) | undefined;
                        keyPress?: ((swiper: SwiperType, keyCode: string) => void) | undefined;
                        scroll?: ((swiper: SwiperType, event: WheelEvent) => void) | undefined;
                        navigationHide?: ((swiper: SwiperType) => void) | undefined;
                        navigationShow?: ((swiper: SwiperType) => void) | undefined;
                        navigationPrev?: ((swiper: SwiperType) => void) | undefined;
                        navigationNext?: ((swiper: SwiperType) => void) | undefined;
                        paginationRender?: ((swiper: SwiperType, paginationEl: HTMLElement) => void) | undefined;
                        paginationUpdate?: ((swiper: SwiperType, paginationEl: HTMLElement) => void) | undefined;
                        paginationHide?: ((swiper: SwiperType) => void) | undefined;
                        paginationShow?: ((swiper: SwiperType) => void) | undefined;
                        scrollbarDragStart?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        scrollbarDragMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        scrollbarDragEnd?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        zoomChange?: ((swiper: SwiperType, scale: number, imageEl: HTMLElement, slideEl: HTMLElement) => void) | undefined;
                    } | undefined;
                    onAny?: ((handler: (eventName: string, ...args: any[]) => void) => void) | undefined;
                    cssMode?: boolean | undefined;
                    spaceBetween?: (number | string) | undefined;
                    slidesPerView?: (number | "auto") | undefined;
                    maxBackfaceHiddenSlides?: number | undefined;
                    slidesPerGroup?: number | undefined;
                    slidesPerGroupSkip?: number | undefined;
                    slidesPerGroupAuto?: boolean | undefined;
                    centeredSlides?: boolean | undefined;
                    centeredSlidesBounds?: boolean | undefined;
                    slidesOffsetBefore?: number | undefined;
                    slidesOffsetAfter?: number | undefined;
                    normalizeSlideIndex?: boolean | undefined;
                    centerInsufficientSlides?: boolean | undefined;
                    grabCursor?: boolean | undefined;
                    touchEventsTarget?: ("container" | "wrapper") | undefined;
                    touchRatio?: number | undefined;
                    touchAngle?: number | undefined;
                    simulateTouch?: boolean | undefined;
                    shortSwipes?: boolean | undefined;
                    longSwipes?: boolean | undefined;
                    longSwipesRatio?: number | undefined;
                    longSwipesMs?: number | undefined;
                    followFinger?: boolean | undefined;
                    allowTouchMove?: boolean | undefined;
                    threshold?: number | undefined;
                    touchStartPreventDefault?: boolean | undefined;
                    touchStartForcePreventDefault?: boolean | undefined;
                    touchMoveStopPropagation?: boolean | undefined;
                    edgeSwipeDetection?: (boolean | string) | undefined;
                    edgeSwipeThreshold?: number | undefined;
                    touchReleaseOnEdges?: boolean | undefined;
                    passiveListeners?: boolean | undefined;
                    resistance?: boolean | undefined;
                    resistanceRatio?: number | undefined;
                    preventInteractionOnTransition?: boolean | undefined;
                    allowSlidePrev?: boolean | undefined;
                    allowSlideNext?: boolean | undefined;
                    noSwiping?: boolean | undefined;
                    noSwipingClass?: string | undefined;
                    noSwipingSelector?: string | undefined;
                    swipeHandler?: HTMLElement | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | null | undefined;
                    preventClicks?: boolean | undefined;
                    preventClicksPropagation?: boolean | undefined;
                    slideToClickedSlide?: boolean | undefined;
                    watchSlidesProgress?: boolean | undefined;
                    loop?: boolean | undefined;
                    loopAddBlankSlides?: boolean | undefined;
                    loopAdditionalSlides?: number | undefined;
                    loopPreventsSliding?: boolean | undefined;
                    rewind?: boolean | undefined;
                    breakpoints?: {
                        [width: number]: import('swiper/types').SwiperOptions;
                        [ratio: string]: import('swiper/types').SwiperOptions;
                    } | undefined;
                    breakpointsBase?: ("window" | "container") | undefined;
                    observer?: boolean | undefined;
                    observeSlideChildren?: boolean | undefined;
                    observeParents?: boolean | undefined;
                    containerModifierClass?: string | undefined;
                    slideClass?: string | undefined;
                    slideActiveClass?: string | undefined;
                    slideVisibleClass?: string | undefined;
                    slideFullyVisibleClass?: string | undefined;
                    slideBlankClass?: string | undefined;
                    slideNextClass?: string | undefined;
                    slidePrevClass?: string | undefined;
                    wrapperClass?: string | undefined;
                    lazyPreloaderClass?: string | undefined;
                    lazyPreloadPrevNext?: number | undefined;
                    a11y?: {
                        enabled?: boolean | undefined;
                        prevSlideMessage?: string | undefined;
                        nextSlideMessage?: string | undefined;
                        firstSlideMessage?: string | undefined;
                        lastSlideMessage?: string | undefined;
                        paginationBulletMessage?: string | undefined;
                        notificationClass?: string | undefined;
                        containerMessage?: (string | null) | undefined;
                        containerRoleDescriptionMessage?: (string | null) | undefined;
                        containerRole?: (string | null) | undefined;
                        itemRoleDescriptionMessage?: (string | null) | undefined;
                        slideLabelMessage?: string | undefined;
                        slideRole?: string | undefined;
                        id?: (string | number | null) | undefined;
                        scrollOnFocus?: boolean | undefined;
                    } | undefined;
                    autoplay?: boolean | {
                        delay?: number | undefined;
                        stopOnLastSlide?: boolean | undefined;
                        disableOnInteraction?: boolean | undefined;
                        reverseDirection?: boolean | undefined;
                        waitForTransition?: boolean | undefined;
                        pauseOnMouseEnter?: boolean | undefined;
                    } | undefined;
                    controller?: {
                        control?: string | HTMLElement | any | any[] | null | undefined;
                        inverse?: boolean | undefined;
                        by?: ("slide" | "container") | undefined;
                    } | undefined;
                    coverflowEffect?: {
                        slideShadows?: boolean | undefined;
                        rotate?: number | undefined;
                        stretch?: number | undefined;
                        depth?: number | undefined;
                        scale?: number | undefined;
                        modifier?: number | undefined;
                    } | undefined;
                    cubeEffect?: {
                        slideShadows?: boolean | undefined;
                        shadow?: boolean | undefined;
                        shadowOffset?: number | undefined;
                        shadowScale?: number | undefined;
                    } | undefined;
                    fadeEffect?: {
                        crossFade?: boolean | undefined;
                    } | undefined;
                    flipEffect?: {
                        slideShadows?: boolean | undefined;
                        limitRotation?: boolean | undefined;
                    } | undefined;
                    creativeEffect?: {
                        prev?: {
                            translate?: (string | number)[] | undefined;
                            rotate?: number[] | undefined;
                            opacity?: number | undefined;
                            scale?: number | undefined;
                            shadow?: boolean | undefined;
                            origin?: string | undefined;
                        } | undefined;
                        next?: {
                            translate?: (string | number)[] | undefined;
                            rotate?: number[] | undefined;
                            opacity?: number | undefined;
                            scale?: number | undefined;
                            shadow?: boolean | undefined;
                            origin?: string | undefined;
                        } | undefined;
                        limitProgress?: number | undefined;
                        shadowPerProgress?: boolean | undefined;
                        progressMultiplier?: number | undefined;
                        perspective?: boolean | undefined;
                    } | undefined;
                    cardsEffect?: {
                        slideShadows?: boolean | undefined;
                        rotate?: boolean | undefined;
                        perSlideRotate?: number | undefined;
                        perSlideOffset?: number | undefined;
                    } | undefined;
                    hashNavigation?: boolean | {
                        watchState?: boolean | undefined;
                        replaceState?: boolean | undefined;
                        getSlideIndex?: ((swiper: SwiperType, hash: string) => number) | undefined;
                    } | undefined;
                    history?: boolean | {
                        enabled?: boolean | undefined;
                        root?: string | undefined;
                        replaceState?: boolean | undefined;
                        key?: string | undefined;
                        keepQuery?: boolean | undefined;
                    } | undefined;
                    keyboard?: boolean | {
                        enabled?: boolean | undefined;
                        onlyInViewport?: boolean | undefined;
                        pageUpDown?: boolean | undefined;
                    } | undefined;
                    mousewheel?: boolean | {
                        enabled?: boolean | undefined;
                        forceToAxis?: boolean | undefined;
                        releaseOnEdges?: boolean | undefined;
                        invert?: boolean | undefined;
                        sensitivity?: number | undefined;
                        eventsTarget?: HTMLElement | "container" | "wrapper" | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | undefined;
                        thresholdDelta?: (number | null) | undefined;
                        thresholdTime?: (number | null) | undefined;
                        noMousewheelClass?: string | undefined;
                    } | undefined;
                    navigation?: boolean | {
                        enabled?: boolean | undefined;
                        nextEl?: HTMLElement | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | null | undefined;
                        prevEl?: HTMLElement | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | null | undefined;
                        hideOnClick?: boolean | undefined;
                        disabledClass?: string | undefined;
                        hiddenClass?: string | undefined;
                        lockClass?: string | undefined;
                        navigationDisabledClass?: string | undefined;
                    } | undefined;
                    pagination?: boolean | {
                        enabled?: boolean | undefined;
                        el?: HTMLElement | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | null | undefined;
                        type?: ("bullets" | "fraction" | "progressbar" | "custom") | undefined;
                        bulletElement?: string | undefined;
                        dynamicBullets?: boolean | undefined;
                        dynamicMainBullets?: number | undefined;
                        hideOnClick?: boolean | undefined;
                        clickable?: boolean | undefined;
                        progressbarOpposite?: boolean | undefined;
                        formatFractionCurrent?: ((number: number) => number | string) | undefined;
                        formatFractionTotal?: ((number: number) => number | string) | undefined;
                        renderBullet?: ((index: number, className: string) => string) | undefined;
                        renderFraction?: ((currentClass: string, totalClass: string) => string) | undefined;
                        renderProgressbar?: ((progressbarFillClass: string) => string) | undefined;
                        renderCustom?: ((swiper: SwiperType, current: number, total: number) => string) | undefined;
                        bulletClass?: string | undefined;
                        bulletActiveClass?: string | undefined;
                        modifierClass?: string | undefined;
                        currentClass?: string | undefined;
                        totalClass?: string | undefined;
                        hiddenClass?: string | undefined;
                        progressbarFillClass?: string | undefined;
                        progressbarOppositeClass?: string | undefined;
                        clickableClass?: string | undefined;
                        lockClass?: string | undefined;
                        horizontalClass?: string | undefined;
                        verticalClass?: string | undefined;
                        paginationDisabledClass?: string | undefined;
                    } | undefined;
                    parallax?: boolean | {
                        enabled?: boolean | undefined;
                    } | undefined;
                    scrollbar?: boolean | {
                        enabled?: boolean | undefined;
                        el?: HTMLElement | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | null | undefined;
                        hide?: boolean | undefined;
                        draggable?: boolean | undefined;
                        snapOnRelease?: boolean | undefined;
                        dragSize?: ("auto" | number) | undefined;
                        lockClass?: string | undefined;
                        dragClass?: string | undefined;
                        scrollbarDisabledClass?: string | undefined;
                        horizontalClass?: string | undefined;
                        verticalClass?: string | undefined;
                    } | undefined;
                    thumbs?: {
                        swiper?: string | any | null | undefined;
                        slideThumbActiveClass?: string | undefined;
                        thumbsContainerClass?: string | undefined;
                        multipleActiveThumbs?: boolean | undefined;
                        autoScrollOffset?: number | undefined;
                    } | undefined;
                    virtual?: boolean | {
                        enabled?: boolean | undefined;
                        slides?: any[] | undefined;
                        cache?: boolean | undefined;
                        addSlidesBefore?: number | undefined;
                        addSlidesAfter?: number | undefined;
                        renderSlide?: ((slide: any, index: any) => any | null) | undefined;
                        renderExternal?: ((data: import('swiper/types').VirtualData<any>) => any | null) | undefined;
                        renderExternalUpdate?: boolean | undefined;
                    } | undefined;
                    zoom?: boolean | {
                        limitToOriginalSize?: boolean | undefined;
                        maxRatio?: number | undefined;
                        minRatio?: number | undefined;
                        toggle?: boolean | undefined;
                        containerClass?: string | undefined;
                        zoomedSlideClass?: string | undefined;
                    } | undefined;
                    freeMode?: boolean | {
                        enabled?: boolean | undefined;
                        momentum?: boolean | undefined;
                        momentumRatio?: number | undefined;
                        momentumVelocityRatio?: number | undefined;
                        momentumBounce?: boolean | undefined;
                        momentumBounceRatio?: number | undefined;
                        minimumVelocity?: number | undefined;
                        sticky?: boolean | undefined;
                    } | undefined;
                    grid?: {
                        rows?: number | undefined;
                        fill?: ("row" | "column") | undefined;
                    } | undefined;
                    _emitClasses?: boolean | undefined;
                };
                originalParams: {
                    modules?: import('swiper/types').SwiperModule[] | undefined;
                    injectStyles?: string[] | undefined;
                    injectStylesUrls?: string[] | undefined;
                    init?: boolean | undefined;
                    enabled?: boolean | undefined;
                    updateOnWindowResize?: boolean | undefined;
                    resizeObserver?: boolean | undefined;
                    initialSlide?: number | undefined;
                    direction?: ("horizontal" | "vertical") | undefined;
                    oneWayMovement?: boolean | undefined;
                    swiperElementNodeName?: string | undefined;
                    speed?: number | undefined;
                    setWrapperSize?: boolean | undefined;
                    virtualTranslate?: boolean | undefined;
                    width?: (number | null) | undefined;
                    height?: (number | null) | undefined;
                    autoHeight?: boolean | undefined;
                    roundLengths?: boolean | undefined;
                    nested?: boolean | undefined;
                    createElements?: boolean | undefined;
                    eventsPrefix?: string | undefined;
                    focusableElements?: string | undefined;
                    uniqueNavElements?: boolean | undefined;
                    effect?: ("slide" | "fade" | "cube" | "coverflow" | "flip" | "creative" | "cards" | string) | undefined;
                    runCallbacksOnInit?: boolean | undefined;
                    watchOverflow?: boolean | undefined;
                    userAgent?: (string | null) | undefined;
                    url?: (string | null) | undefined;
                    on?: {
                        init?: ((swiper: SwiperType) => any) | undefined;
                        beforeDestroy?: ((swiper: SwiperType) => void) | undefined;
                        slidesUpdated?: ((swiper: SwiperType) => void) | undefined;
                        slideChange?: ((swiper: SwiperType) => void) | undefined;
                        slideChangeTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                        slideChangeTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                        slideNextTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                        slideNextTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                        slidePrevTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                        slidePrevTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                        transitionStart?: ((swiper: SwiperType) => void) | undefined;
                        transitionEnd?: ((swiper: SwiperType) => void) | undefined;
                        touchStart?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        touchMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        touchMoveOpposite?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        sliderMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        touchEnd?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        click?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        tap?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        doubleTap?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        progress?: ((swiper: SwiperType, progress: number) => void) | undefined;
                        reachBeginning?: ((swiper: SwiperType) => void) | undefined;
                        reachEnd?: ((swiper: SwiperType) => void) | undefined;
                        toEdge?: ((swiper: SwiperType) => void) | undefined;
                        fromEdge?: ((swiper: SwiperType) => void) | undefined;
                        setTranslate?: ((swiper: SwiperType, translate: number) => void) | undefined;
                        setTransition?: ((swiper: SwiperType, transition: number) => void) | undefined;
                        resize?: ((swiper: SwiperType) => void) | undefined;
                        observerUpdate?: ((swiper: SwiperType) => void) | undefined;
                        beforeLoopFix?: ((swiper: SwiperType) => void) | undefined;
                        loopFix?: ((swiper: SwiperType) => void) | undefined;
                        breakpoint?: ((swiper: SwiperType, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                        _beforeBreakpoint?: ((swiper: SwiperType, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                        _containerClasses?: ((swiper: SwiperType, classNames: string) => void) | undefined;
                        _slideClass?: ((swiper: SwiperType, slideEl: HTMLElement, classNames: string) => void) | undefined;
                        _slideClasses?: ((swiper: SwiperType, slides: {
                            slideEl: HTMLElement;
                            classNames: string;
                            index: number;
                        }[]) => void) | undefined;
                        _swiper?: ((swiper: SwiperType) => void) | undefined;
                        _freeModeNoMomentumRelease?: ((swiper: SwiperType) => void) | undefined;
                        activeIndexChange?: ((swiper: SwiperType) => void) | undefined;
                        snapIndexChange?: ((swiper: SwiperType) => void) | undefined;
                        realIndexChange?: ((swiper: SwiperType) => void) | undefined;
                        afterInit?: ((swiper: SwiperType) => void) | undefined;
                        beforeInit?: ((swiper: SwiperType) => void) | undefined;
                        beforeResize?: ((swiper: SwiperType) => void) | undefined;
                        beforeSlideChangeStart?: ((swiper: SwiperType) => void) | undefined;
                        beforeTransitionStart?: ((swiper: SwiperType, speed: number, internal: any) => void) | undefined;
                        changeDirection?: ((swiper: SwiperType) => void) | undefined;
                        doubleClick?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        destroy?: ((swiper: SwiperType) => void) | undefined;
                        momentumBounce?: ((swiper: SwiperType) => void) | undefined;
                        orientationchange?: ((swiper: SwiperType) => void) | undefined;
                        slideResetTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                        slideResetTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                        sliderFirstMove?: ((swiper: SwiperType, event: TouchEvent) => void) | undefined;
                        slidesLengthChange?: ((swiper: SwiperType) => void) | undefined;
                        slidesGridLengthChange?: ((swiper: SwiperType) => void) | undefined;
                        snapGridLengthChange?: ((swiper: SwiperType) => void) | undefined;
                        update?: ((swiper: SwiperType) => void) | undefined;
                        lock?: ((swiper: SwiperType) => void) | undefined;
                        unlock?: ((swiper: SwiperType) => void) | undefined;
                        autoplayStart?: ((swiper: SwiperType) => void) | undefined;
                        autoplayStop?: ((swiper: SwiperType) => void) | undefined;
                        autoplayPause?: ((swiper: SwiperType) => void) | undefined;
                        autoplayResume?: ((swiper: SwiperType) => void) | undefined;
                        autoplayTimeLeft?: ((swiper: SwiperType, timeLeft: number, percentage: number) => void) | undefined;
                        autoplay?: ((swiper: SwiperType) => void) | undefined;
                        hashChange?: ((swiper: SwiperType) => void) | undefined;
                        hashSet?: ((swiper: SwiperType) => void) | undefined;
                        keyPress?: ((swiper: SwiperType, keyCode: string) => void) | undefined;
                        scroll?: ((swiper: SwiperType, event: WheelEvent) => void) | undefined;
                        navigationHide?: ((swiper: SwiperType) => void) | undefined;
                        navigationShow?: ((swiper: SwiperType) => void) | undefined;
                        navigationPrev?: ((swiper: SwiperType) => void) | undefined;
                        navigationNext?: ((swiper: SwiperType) => void) | undefined;
                        paginationRender?: ((swiper: SwiperType, paginationEl: HTMLElement) => void) | undefined;
                        paginationUpdate?: ((swiper: SwiperType, paginationEl: HTMLElement) => void) | undefined;
                        paginationHide?: ((swiper: SwiperType) => void) | undefined;
                        paginationShow?: ((swiper: SwiperType) => void) | undefined;
                        scrollbarDragStart?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        scrollbarDragMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        scrollbarDragEnd?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        zoomChange?: ((swiper: SwiperType, scale: number, imageEl: HTMLElement, slideEl: HTMLElement) => void) | undefined;
                    } | undefined;
                    onAny?: ((handler: (eventName: string, ...args: any[]) => void) => void) | undefined;
                    cssMode?: boolean | undefined;
                    spaceBetween?: (number | string) | undefined;
                    slidesPerView?: (number | "auto") | undefined;
                    maxBackfaceHiddenSlides?: number | undefined;
                    slidesPerGroup?: number | undefined;
                    slidesPerGroupSkip?: number | undefined;
                    slidesPerGroupAuto?: boolean | undefined;
                    centeredSlides?: boolean | undefined;
                    centeredSlidesBounds?: boolean | undefined;
                    slidesOffsetBefore?: number | undefined;
                    slidesOffsetAfter?: number | undefined;
                    normalizeSlideIndex?: boolean | undefined;
                    centerInsufficientSlides?: boolean | undefined;
                    grabCursor?: boolean | undefined;
                    touchEventsTarget?: ("container" | "wrapper") | undefined;
                    touchRatio?: number | undefined;
                    touchAngle?: number | undefined;
                    simulateTouch?: boolean | undefined;
                    shortSwipes?: boolean | undefined;
                    longSwipes?: boolean | undefined;
                    longSwipesRatio?: number | undefined;
                    longSwipesMs?: number | undefined;
                    followFinger?: boolean | undefined;
                    allowTouchMove?: boolean | undefined;
                    threshold?: number | undefined;
                    touchStartPreventDefault?: boolean | undefined;
                    touchStartForcePreventDefault?: boolean | undefined;
                    touchMoveStopPropagation?: boolean | undefined;
                    edgeSwipeDetection?: (boolean | string) | undefined;
                    edgeSwipeThreshold?: number | undefined;
                    touchReleaseOnEdges?: boolean | undefined;
                    passiveListeners?: boolean | undefined;
                    resistance?: boolean | undefined;
                    resistanceRatio?: number | undefined;
                    preventInteractionOnTransition?: boolean | undefined;
                    allowSlidePrev?: boolean | undefined;
                    allowSlideNext?: boolean | undefined;
                    noSwiping?: boolean | undefined;
                    noSwipingClass?: string | undefined;
                    noSwipingSelector?: string | undefined;
                    swipeHandler?: HTMLElement | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | null | undefined;
                    preventClicks?: boolean | undefined;
                    preventClicksPropagation?: boolean | undefined;
                    slideToClickedSlide?: boolean | undefined;
                    watchSlidesProgress?: boolean | undefined;
                    loop?: boolean | undefined;
                    loopAddBlankSlides?: boolean | undefined;
                    loopAdditionalSlides?: number | undefined;
                    loopPreventsSliding?: boolean | undefined;
                    rewind?: boolean | undefined;
                    breakpoints?: {
                        [width: number]: import('swiper/types').SwiperOptions;
                        [ratio: string]: import('swiper/types').SwiperOptions;
                    } | undefined;
                    breakpointsBase?: ("window" | "container") | undefined;
                    observer?: boolean | undefined;
                    observeSlideChildren?: boolean | undefined;
                    observeParents?: boolean | undefined;
                    containerModifierClass?: string | undefined;
                    slideClass?: string | undefined;
                    slideActiveClass?: string | undefined;
                    slideVisibleClass?: string | undefined;
                    slideFullyVisibleClass?: string | undefined;
                    slideBlankClass?: string | undefined;
                    slideNextClass?: string | undefined;
                    slidePrevClass?: string | undefined;
                    wrapperClass?: string | undefined;
                    lazyPreloaderClass?: string | undefined;
                    lazyPreloadPrevNext?: number | undefined;
                    a11y?: {
                        enabled?: boolean | undefined;
                        prevSlideMessage?: string | undefined;
                        nextSlideMessage?: string | undefined;
                        firstSlideMessage?: string | undefined;
                        lastSlideMessage?: string | undefined;
                        paginationBulletMessage?: string | undefined;
                        notificationClass?: string | undefined;
                        containerMessage?: (string | null) | undefined;
                        containerRoleDescriptionMessage?: (string | null) | undefined;
                        containerRole?: (string | null) | undefined;
                        itemRoleDescriptionMessage?: (string | null) | undefined;
                        slideLabelMessage?: string | undefined;
                        slideRole?: string | undefined;
                        id?: (string | number | null) | undefined;
                        scrollOnFocus?: boolean | undefined;
                    } | undefined;
                    autoplay?: boolean | {
                        delay?: number | undefined;
                        stopOnLastSlide?: boolean | undefined;
                        disableOnInteraction?: boolean | undefined;
                        reverseDirection?: boolean | undefined;
                        waitForTransition?: boolean | undefined;
                        pauseOnMouseEnter?: boolean | undefined;
                    } | undefined;
                    controller?: {
                        control?: string | HTMLElement | any | any[] | null | undefined;
                        inverse?: boolean | undefined;
                        by?: ("slide" | "container") | undefined;
                    } | undefined;
                    coverflowEffect?: {
                        slideShadows?: boolean | undefined;
                        rotate?: number | undefined;
                        stretch?: number | undefined;
                        depth?: number | undefined;
                        scale?: number | undefined;
                        modifier?: number | undefined;
                    } | undefined;
                    cubeEffect?: {
                        slideShadows?: boolean | undefined;
                        shadow?: boolean | undefined;
                        shadowOffset?: number | undefined;
                        shadowScale?: number | undefined;
                    } | undefined;
                    fadeEffect?: {
                        crossFade?: boolean | undefined;
                    } | undefined;
                    flipEffect?: {
                        slideShadows?: boolean | undefined;
                        limitRotation?: boolean | undefined;
                    } | undefined;
                    creativeEffect?: {
                        prev?: {
                            translate?: (string | number)[] | undefined;
                            rotate?: number[] | undefined;
                            opacity?: number | undefined;
                            scale?: number | undefined;
                            shadow?: boolean | undefined;
                            origin?: string | undefined;
                        } | undefined;
                        next?: {
                            translate?: (string | number)[] | undefined;
                            rotate?: number[] | undefined;
                            opacity?: number | undefined;
                            scale?: number | undefined;
                            shadow?: boolean | undefined;
                            origin?: string | undefined;
                        } | undefined;
                        limitProgress?: number | undefined;
                        shadowPerProgress?: boolean | undefined;
                        progressMultiplier?: number | undefined;
                        perspective?: boolean | undefined;
                    } | undefined;
                    cardsEffect?: {
                        slideShadows?: boolean | undefined;
                        rotate?: boolean | undefined;
                        perSlideRotate?: number | undefined;
                        perSlideOffset?: number | undefined;
                    } | undefined;
                    hashNavigation?: boolean | {
                        watchState?: boolean | undefined;
                        replaceState?: boolean | undefined;
                        getSlideIndex?: ((swiper: SwiperType, hash: string) => number) | undefined;
                    } | undefined;
                    history?: boolean | {
                        enabled?: boolean | undefined;
                        root?: string | undefined;
                        replaceState?: boolean | undefined;
                        key?: string | undefined;
                        keepQuery?: boolean | undefined;
                    } | undefined;
                    keyboard?: boolean | {
                        enabled?: boolean | undefined;
                        onlyInViewport?: boolean | undefined;
                        pageUpDown?: boolean | undefined;
                    } | undefined;
                    mousewheel?: boolean | {
                        enabled?: boolean | undefined;
                        forceToAxis?: boolean | undefined;
                        releaseOnEdges?: boolean | undefined;
                        invert?: boolean | undefined;
                        sensitivity?: number | undefined;
                        eventsTarget?: HTMLElement | "container" | "wrapper" | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | undefined;
                        thresholdDelta?: (number | null) | undefined;
                        thresholdTime?: (number | null) | undefined;
                        noMousewheelClass?: string | undefined;
                    } | undefined;
                    navigation?: boolean | {
                        enabled?: boolean | undefined;
                        nextEl?: HTMLElement | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | null | undefined;
                        prevEl?: HTMLElement | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | null | undefined;
                        hideOnClick?: boolean | undefined;
                        disabledClass?: string | undefined;
                        hiddenClass?: string | undefined;
                        lockClass?: string | undefined;
                        navigationDisabledClass?: string | undefined;
                    } | undefined;
                    pagination?: boolean | {
                        enabled?: boolean | undefined;
                        el?: HTMLElement | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | null | undefined;
                        type?: ("bullets" | "fraction" | "progressbar" | "custom") | undefined;
                        bulletElement?: string | undefined;
                        dynamicBullets?: boolean | undefined;
                        dynamicMainBullets?: number | undefined;
                        hideOnClick?: boolean | undefined;
                        clickable?: boolean | undefined;
                        progressbarOpposite?: boolean | undefined;
                        formatFractionCurrent?: ((number: number) => number | string) | undefined;
                        formatFractionTotal?: ((number: number) => number | string) | undefined;
                        renderBullet?: ((index: number, className: string) => string) | undefined;
                        renderFraction?: ((currentClass: string, totalClass: string) => string) | undefined;
                        renderProgressbar?: ((progressbarFillClass: string) => string) | undefined;
                        renderCustom?: ((swiper: SwiperType, current: number, total: number) => string) | undefined;
                        bulletClass?: string | undefined;
                        bulletActiveClass?: string | undefined;
                        modifierClass?: string | undefined;
                        currentClass?: string | undefined;
                        totalClass?: string | undefined;
                        hiddenClass?: string | undefined;
                        progressbarFillClass?: string | undefined;
                        progressbarOppositeClass?: string | undefined;
                        clickableClass?: string | undefined;
                        lockClass?: string | undefined;
                        horizontalClass?: string | undefined;
                        verticalClass?: string | undefined;
                        paginationDisabledClass?: string | undefined;
                    } | undefined;
                    parallax?: boolean | {
                        enabled?: boolean | undefined;
                    } | undefined;
                    scrollbar?: boolean | {
                        enabled?: boolean | undefined;
                        el?: HTMLElement | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | null | undefined;
                        hide?: boolean | undefined;
                        draggable?: boolean | undefined;
                        snapOnRelease?: boolean | undefined;
                        dragSize?: ("auto" | number) | undefined;
                        lockClass?: string | undefined;
                        dragClass?: string | undefined;
                        scrollbarDisabledClass?: string | undefined;
                        horizontalClass?: string | undefined;
                        verticalClass?: string | undefined;
                    } | undefined;
                    thumbs?: {
                        swiper?: string | any | null | undefined;
                        slideThumbActiveClass?: string | undefined;
                        thumbsContainerClass?: string | undefined;
                        multipleActiveThumbs?: boolean | undefined;
                        autoScrollOffset?: number | undefined;
                    } | undefined;
                    virtual?: boolean | {
                        enabled?: boolean | undefined;
                        slides?: any[] | undefined;
                        cache?: boolean | undefined;
                        addSlidesBefore?: number | undefined;
                        addSlidesAfter?: number | undefined;
                        renderSlide?: ((slide: any, index: any) => any | null) | undefined;
                        renderExternal?: ((data: import('swiper/types').VirtualData<any>) => any | null) | undefined;
                        renderExternalUpdate?: boolean | undefined;
                    } | undefined;
                    zoom?: boolean | {
                        limitToOriginalSize?: boolean | undefined;
                        maxRatio?: number | undefined;
                        minRatio?: number | undefined;
                        toggle?: boolean | undefined;
                        containerClass?: string | undefined;
                        zoomedSlideClass?: string | undefined;
                    } | undefined;
                    freeMode?: boolean | {
                        enabled?: boolean | undefined;
                        momentum?: boolean | undefined;
                        momentumRatio?: number | undefined;
                        momentumVelocityRatio?: number | undefined;
                        momentumBounce?: boolean | undefined;
                        momentumBounceRatio?: number | undefined;
                        minimumVelocity?: number | undefined;
                        sticky?: boolean | undefined;
                    } | undefined;
                    grid?: {
                        rows?: number | undefined;
                        fill?: ("row" | "column") | undefined;
                    } | undefined;
                    _emitClasses?: boolean | undefined;
                };
                el: HTMLElement;
                wrapperEl: HTMLElement;
                slidesEl: HTMLElement;
                slides: HTMLElement[];
                loopedSlides: number | null;
                width: number;
                height: number;
                translate: number;
                progress: number;
                activeIndex: number;
                realIndex: number;
                previousIndex: number;
                snapIndex: number;
                snapGrid: number[];
                slidesGrid: number[];
                slidesSizesGrid: number[];
                isBeginning: boolean;
                isEnd: boolean;
                isLocked: boolean;
                animating: boolean;
                touches: {
                    startX: number;
                    startY: number;
                    currentX: number;
                    currentY: number;
                    diff: number;
                };
                clickedIndex: number;
                clickedSlide: HTMLElement;
                allowSlideNext: boolean;
                allowSlidePrev: boolean;
                allowTouchMove: boolean;
                swipeDirection: "prev" | "next";
                rtlTranslate: boolean;
                disable: () => void;
                enable: () => void;
                setProgress: (progress: number, speed?: number) => void;
                slideNext: (speed?: number, runCallbacks?: boolean) => boolean;
                slidePrev: (speed?: number, runCallbacks?: boolean) => boolean;
                slideTo: (index: number, speed?: number, runCallbacks?: boolean) => boolean;
                slideToLoop: (index: number, speed?: number, runCallbacks?: boolean) => SwiperType;
                slideReset: (speed?: number, runCallbacks?: boolean) => boolean;
                slideToClosest: (speed?: number, runCallbacks?: boolean) => boolean;
                slidesPerViewDynamic: () => number;
                updateAutoHeight: (speed?: number) => void;
                update: () => void;
                updateSize: () => void;
                updateSlides: () => void;
                updateProgress: () => void;
                updateSlidesClasses: () => void;
                changeDirection: (direction?: "horizontal" | "vertical", needUpdate?: boolean) => void;
                changeLanguageDirection: (direction: "rtl" | "ltr") => void;
                detachEvents: () => void;
                attachEvents: () => void;
                loopCreate: () => void;
                loopDestroy: () => void;
                init: (el?: HTMLElement) => SwiperType;
                destroy: (deleteInstance?: boolean, cleanStyles?: boolean) => void;
                setTranslate: (translate: any) => void;
                getTranslate: () => any;
                translateTo: (translate: number, speed: number, runCallbacks?: boolean, translateBounds?: boolean) => any;
                minTranslate: () => number;
                maxTranslate: () => number;
                unsetGrabCursor: () => void;
                setGrabCursor: () => void;
                onAny: (handler: (eventName: string, ...args: any[]) => void) => void;
                offAny: (handler: (eventName: string, ...args: any[]) => void) => void;
                isHorizontal: () => boolean;
                getBreakpoint: (breakpoints: import('swiper/types').SwiperOptions["breakpoints"]) => string;
                setBreakpoint: () => void;
                currentBreakpoint: any;
                destroyed: boolean;
                modules: Array<import('swiper/types').SwiperModule>;
                a11y: import('swiper/types').A11yMethods;
                autoplay: {
                    running: boolean;
                    paused: boolean;
                    timeLeft: number;
                    pause: () => void;
                    resume: () => void;
                    start: () => boolean;
                    stop: () => boolean;
                };
                controller: {
                    control?: any | any[] | undefined;
                };
                coverflowEffect: import('swiper/types').CoverflowEffectMethods;
                cubeEffect: import('swiper/types').CubeEffectMethods;
                fadeEffect: import('swiper/types').FadeEffectMethods;
                flipEffect: import('swiper/types').FlipEffectMethods;
                creativeEffect: import('swiper/types').CreativeEffectMethods;
                cardsEffect: import('swiper/types').CardsEffectMethods;
                hashNavigation: import('swiper/types').HashNavigationMethods;
                history: import('swiper/types').HistoryMethods;
                keyboard: {
                    enabled: boolean;
                    enable: () => void;
                    disable: () => void;
                };
                mousewheel: {
                    enabled: boolean;
                    enable: () => void;
                    disable: () => void;
                };
                navigation: {
                    nextEl: HTMLElement;
                    prevEl: HTMLElement;
                    update: () => void;
                    init: () => void;
                    destroy: () => void;
                };
                pagination: {
                    el: HTMLElement;
                    bullets: HTMLElement[];
                    render: () => void;
                    update: () => void;
                    init: () => void;
                    destroy: () => void;
                };
                parallax: import('swiper/types').ParallaxMethods;
                scrollbar: {
                    el: HTMLElement;
                    dragEl: HTMLElement;
                    updateSize: () => void;
                    setTranslate: () => void;
                    init: () => void;
                    destroy: () => void;
                };
                thumbs: {
                    swiper: any;
                    update: (initial: boolean) => void;
                    init: () => boolean;
                };
                virtual: {
                    cache: object;
                    from: number;
                    to: number;
                    slides: any[];
                    appendSlide: (slide: HTMLElement | string | HTMLElement[] | string[]) => void;
                    prependSlide: (slide: HTMLElement | string | HTMLElement[] | string[]) => void;
                    removeSlide: (slideIndexes: number[]) => void;
                    removeAllSlides: () => void;
                    update: (force: boolean) => void;
                };
                zoom: {
                    enabled: boolean;
                    scale: number;
                    enable: () => void;
                    disable: () => void;
                    in: (ratio?: number) => void;
                    out: () => void;
                    toggle: (event?: MouseEvent | TouchEvent | PointerEvent) => void;
                };
                freeMode: {
                    onTouchMove: () => void;
                    onTouchEnd: () => void;
                };
                on: <E extends keyof import('swiper/types').SwiperEvents>(event: E, handler: import('swiper/types').SwiperEvents[E]) => void;
                once: <E extends keyof import('swiper/types').SwiperEvents>(event: E, handler: import('swiper/types').SwiperEvents[E]) => void;
                off: {
                    <E extends keyof import('swiper/types').SwiperEvents>(event: E, handler: import('swiper/types').SwiperEvents[E]): void;
                    <E extends keyof import('swiper/types').SwiperEvents>(event: E): void;
                };
                emit: <E extends keyof import('swiper/types').SwiperEvents>(event: E, ...args: any[]) => void;
                appendSlide: (slides: HTMLElement | string | string[] | HTMLElement[]) => void;
                prependSlide: (slides: HTMLElement | string | string[] | HTMLElement[]) => void;
                addSlide: (index: number, slides: HTMLElement | string | string[] | HTMLElement[]) => void;
                removeSlide: (slideIndex: number | number[]) => void;
                removeAllSlides: () => void;
            } | null, SwiperType | {
                params: {
                    modules?: import('swiper/types').SwiperModule[] | undefined;
                    injectStyles?: string[] | undefined;
                    injectStylesUrls?: string[] | undefined;
                    init?: boolean | undefined;
                    enabled?: boolean | undefined;
                    updateOnWindowResize?: boolean | undefined;
                    resizeObserver?: boolean | undefined;
                    initialSlide?: number | undefined;
                    direction?: ("horizontal" | "vertical") | undefined;
                    oneWayMovement?: boolean | undefined;
                    swiperElementNodeName?: string | undefined;
                    speed?: number | undefined;
                    setWrapperSize?: boolean | undefined;
                    virtualTranslate?: boolean | undefined;
                    width?: (number | null) | undefined;
                    height?: (number | null) | undefined;
                    autoHeight?: boolean | undefined;
                    roundLengths?: boolean | undefined;
                    nested?: boolean | undefined;
                    createElements?: boolean | undefined;
                    eventsPrefix?: string | undefined;
                    focusableElements?: string | undefined;
                    uniqueNavElements?: boolean | undefined;
                    effect?: ("slide" | "fade" | "cube" | "coverflow" | "flip" | "creative" | "cards" | string) | undefined;
                    runCallbacksOnInit?: boolean | undefined;
                    watchOverflow?: boolean | undefined;
                    userAgent?: (string | null) | undefined;
                    url?: (string | null) | undefined;
                    on?: {
                        init?: ((swiper: SwiperType) => any) | undefined;
                        beforeDestroy?: ((swiper: SwiperType) => void) | undefined;
                        slidesUpdated?: ((swiper: SwiperType) => void) | undefined;
                        slideChange?: ((swiper: SwiperType) => void) | undefined;
                        slideChangeTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                        slideChangeTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                        slideNextTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                        slideNextTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                        slidePrevTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                        slidePrevTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                        transitionStart?: ((swiper: SwiperType) => void) | undefined;
                        transitionEnd?: ((swiper: SwiperType) => void) | undefined;
                        touchStart?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        touchMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        touchMoveOpposite?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        sliderMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        touchEnd?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        click?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        tap?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        doubleTap?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        progress?: ((swiper: SwiperType, progress: number) => void) | undefined;
                        reachBeginning?: ((swiper: SwiperType) => void) | undefined;
                        reachEnd?: ((swiper: SwiperType) => void) | undefined;
                        toEdge?: ((swiper: SwiperType) => void) | undefined;
                        fromEdge?: ((swiper: SwiperType) => void) | undefined;
                        setTranslate?: ((swiper: SwiperType, translate: number) => void) | undefined;
                        setTransition?: ((swiper: SwiperType, transition: number) => void) | undefined;
                        resize?: ((swiper: SwiperType) => void) | undefined;
                        observerUpdate?: ((swiper: SwiperType) => void) | undefined;
                        beforeLoopFix?: ((swiper: SwiperType) => void) | undefined;
                        loopFix?: ((swiper: SwiperType) => void) | undefined;
                        breakpoint?: ((swiper: SwiperType, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                        _beforeBreakpoint?: ((swiper: SwiperType, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                        _containerClasses?: ((swiper: SwiperType, classNames: string) => void) | undefined;
                        _slideClass?: ((swiper: SwiperType, slideEl: HTMLElement, classNames: string) => void) | undefined;
                        _slideClasses?: ((swiper: SwiperType, slides: {
                            slideEl: HTMLElement;
                            classNames: string;
                            index: number;
                        }[]) => void) | undefined;
                        _swiper?: ((swiper: SwiperType) => void) | undefined;
                        _freeModeNoMomentumRelease?: ((swiper: SwiperType) => void) | undefined;
                        activeIndexChange?: ((swiper: SwiperType) => void) | undefined;
                        snapIndexChange?: ((swiper: SwiperType) => void) | undefined;
                        realIndexChange?: ((swiper: SwiperType) => void) | undefined;
                        afterInit?: ((swiper: SwiperType) => void) | undefined;
                        beforeInit?: ((swiper: SwiperType) => void) | undefined;
                        beforeResize?: ((swiper: SwiperType) => void) | undefined;
                        beforeSlideChangeStart?: ((swiper: SwiperType) => void) | undefined;
                        beforeTransitionStart?: ((swiper: SwiperType, speed: number, internal: any) => void) | undefined;
                        changeDirection?: ((swiper: SwiperType) => void) | undefined;
                        doubleClick?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        destroy?: ((swiper: SwiperType) => void) | undefined;
                        momentumBounce?: ((swiper: SwiperType) => void) | undefined;
                        orientationchange?: ((swiper: SwiperType) => void) | undefined;
                        slideResetTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                        slideResetTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                        sliderFirstMove?: ((swiper: SwiperType, event: TouchEvent) => void) | undefined;
                        slidesLengthChange?: ((swiper: SwiperType) => void) | undefined;
                        slidesGridLengthChange?: ((swiper: SwiperType) => void) | undefined;
                        snapGridLengthChange?: ((swiper: SwiperType) => void) | undefined;
                        update?: ((swiper: SwiperType) => void) | undefined;
                        lock?: ((swiper: SwiperType) => void) | undefined;
                        unlock?: ((swiper: SwiperType) => void) | undefined;
                        autoplayStart?: ((swiper: SwiperType) => void) | undefined;
                        autoplayStop?: ((swiper: SwiperType) => void) | undefined;
                        autoplayPause?: ((swiper: SwiperType) => void) | undefined;
                        autoplayResume?: ((swiper: SwiperType) => void) | undefined;
                        autoplayTimeLeft?: ((swiper: SwiperType, timeLeft: number, percentage: number) => void) | undefined;
                        autoplay?: ((swiper: SwiperType) => void) | undefined;
                        hashChange?: ((swiper: SwiperType) => void) | undefined;
                        hashSet?: ((swiper: SwiperType) => void) | undefined;
                        keyPress?: ((swiper: SwiperType, keyCode: string) => void) | undefined;
                        scroll?: ((swiper: SwiperType, event: WheelEvent) => void) | undefined;
                        navigationHide?: ((swiper: SwiperType) => void) | undefined;
                        navigationShow?: ((swiper: SwiperType) => void) | undefined;
                        navigationPrev?: ((swiper: SwiperType) => void) | undefined;
                        navigationNext?: ((swiper: SwiperType) => void) | undefined;
                        paginationRender?: ((swiper: SwiperType, paginationEl: HTMLElement) => void) | undefined;
                        paginationUpdate?: ((swiper: SwiperType, paginationEl: HTMLElement) => void) | undefined;
                        paginationHide?: ((swiper: SwiperType) => void) | undefined;
                        paginationShow?: ((swiper: SwiperType) => void) | undefined;
                        scrollbarDragStart?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        scrollbarDragMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        scrollbarDragEnd?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        zoomChange?: ((swiper: SwiperType, scale: number, imageEl: HTMLElement, slideEl: HTMLElement) => void) | undefined;
                    } | undefined;
                    onAny?: ((handler: (eventName: string, ...args: any[]) => void) => void) | undefined;
                    cssMode?: boolean | undefined;
                    spaceBetween?: (number | string) | undefined;
                    slidesPerView?: (number | "auto") | undefined;
                    maxBackfaceHiddenSlides?: number | undefined;
                    slidesPerGroup?: number | undefined;
                    slidesPerGroupSkip?: number | undefined;
                    slidesPerGroupAuto?: boolean | undefined;
                    centeredSlides?: boolean | undefined;
                    centeredSlidesBounds?: boolean | undefined;
                    slidesOffsetBefore?: number | undefined;
                    slidesOffsetAfter?: number | undefined;
                    normalizeSlideIndex?: boolean | undefined;
                    centerInsufficientSlides?: boolean | undefined;
                    grabCursor?: boolean | undefined;
                    touchEventsTarget?: ("container" | "wrapper") | undefined;
                    touchRatio?: number | undefined;
                    touchAngle?: number | undefined;
                    simulateTouch?: boolean | undefined;
                    shortSwipes?: boolean | undefined;
                    longSwipes?: boolean | undefined;
                    longSwipesRatio?: number | undefined;
                    longSwipesMs?: number | undefined;
                    followFinger?: boolean | undefined;
                    allowTouchMove?: boolean | undefined;
                    threshold?: number | undefined;
                    touchStartPreventDefault?: boolean | undefined;
                    touchStartForcePreventDefault?: boolean | undefined;
                    touchMoveStopPropagation?: boolean | undefined;
                    edgeSwipeDetection?: (boolean | string) | undefined;
                    edgeSwipeThreshold?: number | undefined;
                    touchReleaseOnEdges?: boolean | undefined;
                    passiveListeners?: boolean | undefined;
                    resistance?: boolean | undefined;
                    resistanceRatio?: number | undefined;
                    preventInteractionOnTransition?: boolean | undefined;
                    allowSlidePrev?: boolean | undefined;
                    allowSlideNext?: boolean | undefined;
                    noSwiping?: boolean | undefined;
                    noSwipingClass?: string | undefined;
                    noSwipingSelector?: string | undefined;
                    swipeHandler?: HTMLElement | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | null | undefined;
                    preventClicks?: boolean | undefined;
                    preventClicksPropagation?: boolean | undefined;
                    slideToClickedSlide?: boolean | undefined;
                    watchSlidesProgress?: boolean | undefined;
                    loop?: boolean | undefined;
                    loopAddBlankSlides?: boolean | undefined;
                    loopAdditionalSlides?: number | undefined;
                    loopPreventsSliding?: boolean | undefined;
                    rewind?: boolean | undefined;
                    breakpoints?: {
                        [width: number]: import('swiper/types').SwiperOptions;
                        [ratio: string]: import('swiper/types').SwiperOptions;
                    } | undefined;
                    breakpointsBase?: ("window" | "container") | undefined;
                    observer?: boolean | undefined;
                    observeSlideChildren?: boolean | undefined;
                    observeParents?: boolean | undefined;
                    containerModifierClass?: string | undefined;
                    slideClass?: string | undefined;
                    slideActiveClass?: string | undefined;
                    slideVisibleClass?: string | undefined;
                    slideFullyVisibleClass?: string | undefined;
                    slideBlankClass?: string | undefined;
                    slideNextClass?: string | undefined;
                    slidePrevClass?: string | undefined;
                    wrapperClass?: string | undefined;
                    lazyPreloaderClass?: string | undefined;
                    lazyPreloadPrevNext?: number | undefined;
                    a11y?: {
                        enabled?: boolean | undefined;
                        prevSlideMessage?: string | undefined;
                        nextSlideMessage?: string | undefined;
                        firstSlideMessage?: string | undefined;
                        lastSlideMessage?: string | undefined;
                        paginationBulletMessage?: string | undefined;
                        notificationClass?: string | undefined;
                        containerMessage?: (string | null) | undefined;
                        containerRoleDescriptionMessage?: (string | null) | undefined;
                        containerRole?: (string | null) | undefined;
                        itemRoleDescriptionMessage?: (string | null) | undefined;
                        slideLabelMessage?: string | undefined;
                        slideRole?: string | undefined;
                        id?: (string | number | null) | undefined;
                        scrollOnFocus?: boolean | undefined;
                    } | undefined;
                    autoplay?: boolean | {
                        delay?: number | undefined;
                        stopOnLastSlide?: boolean | undefined;
                        disableOnInteraction?: boolean | undefined;
                        reverseDirection?: boolean | undefined;
                        waitForTransition?: boolean | undefined;
                        pauseOnMouseEnter?: boolean | undefined;
                    } | undefined;
                    controller?: {
                        control?: string | HTMLElement | any | any[] | null | undefined;
                        inverse?: boolean | undefined;
                        by?: ("slide" | "container") | undefined;
                    } | undefined;
                    coverflowEffect?: {
                        slideShadows?: boolean | undefined;
                        rotate?: number | undefined;
                        stretch?: number | undefined;
                        depth?: number | undefined;
                        scale?: number | undefined;
                        modifier?: number | undefined;
                    } | undefined;
                    cubeEffect?: {
                        slideShadows?: boolean | undefined;
                        shadow?: boolean | undefined;
                        shadowOffset?: number | undefined;
                        shadowScale?: number | undefined;
                    } | undefined;
                    fadeEffect?: {
                        crossFade?: boolean | undefined;
                    } | undefined;
                    flipEffect?: {
                        slideShadows?: boolean | undefined;
                        limitRotation?: boolean | undefined;
                    } | undefined;
                    creativeEffect?: {
                        prev?: {
                            translate?: (string | number)[] | undefined;
                            rotate?: number[] | undefined;
                            opacity?: number | undefined;
                            scale?: number | undefined;
                            shadow?: boolean | undefined;
                            origin?: string | undefined;
                        } | undefined;
                        next?: {
                            translate?: (string | number)[] | undefined;
                            rotate?: number[] | undefined;
                            opacity?: number | undefined;
                            scale?: number | undefined;
                            shadow?: boolean | undefined;
                            origin?: string | undefined;
                        } | undefined;
                        limitProgress?: number | undefined;
                        shadowPerProgress?: boolean | undefined;
                        progressMultiplier?: number | undefined;
                        perspective?: boolean | undefined;
                    } | undefined;
                    cardsEffect?: {
                        slideShadows?: boolean | undefined;
                        rotate?: boolean | undefined;
                        perSlideRotate?: number | undefined;
                        perSlideOffset?: number | undefined;
                    } | undefined;
                    hashNavigation?: boolean | {
                        watchState?: boolean | undefined;
                        replaceState?: boolean | undefined;
                        getSlideIndex?: ((swiper: SwiperType, hash: string) => number) | undefined;
                    } | undefined;
                    history?: boolean | {
                        enabled?: boolean | undefined;
                        root?: string | undefined;
                        replaceState?: boolean | undefined;
                        key?: string | undefined;
                        keepQuery?: boolean | undefined;
                    } | undefined;
                    keyboard?: boolean | {
                        enabled?: boolean | undefined;
                        onlyInViewport?: boolean | undefined;
                        pageUpDown?: boolean | undefined;
                    } | undefined;
                    mousewheel?: boolean | {
                        enabled?: boolean | undefined;
                        forceToAxis?: boolean | undefined;
                        releaseOnEdges?: boolean | undefined;
                        invert?: boolean | undefined;
                        sensitivity?: number | undefined;
                        eventsTarget?: HTMLElement | "container" | "wrapper" | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | undefined;
                        thresholdDelta?: (number | null) | undefined;
                        thresholdTime?: (number | null) | undefined;
                        noMousewheelClass?: string | undefined;
                    } | undefined;
                    navigation?: boolean | {
                        enabled?: boolean | undefined;
                        nextEl?: HTMLElement | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | null | undefined;
                        prevEl?: HTMLElement | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | null | undefined;
                        hideOnClick?: boolean | undefined;
                        disabledClass?: string | undefined;
                        hiddenClass?: string | undefined;
                        lockClass?: string | undefined;
                        navigationDisabledClass?: string | undefined;
                    } | undefined;
                    pagination?: boolean | {
                        enabled?: boolean | undefined;
                        el?: HTMLElement | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | null | undefined;
                        type?: ("bullets" | "fraction" | "progressbar" | "custom") | undefined;
                        bulletElement?: string | undefined;
                        dynamicBullets?: boolean | undefined;
                        dynamicMainBullets?: number | undefined;
                        hideOnClick?: boolean | undefined;
                        clickable?: boolean | undefined;
                        progressbarOpposite?: boolean | undefined;
                        formatFractionCurrent?: ((number: number) => number | string) | undefined;
                        formatFractionTotal?: ((number: number) => number | string) | undefined;
                        renderBullet?: ((index: number, className: string) => string) | undefined;
                        renderFraction?: ((currentClass: string, totalClass: string) => string) | undefined;
                        renderProgressbar?: ((progressbarFillClass: string) => string) | undefined;
                        renderCustom?: ((swiper: SwiperType, current: number, total: number) => string) | undefined;
                        bulletClass?: string | undefined;
                        bulletActiveClass?: string | undefined;
                        modifierClass?: string | undefined;
                        currentClass?: string | undefined;
                        totalClass?: string | undefined;
                        hiddenClass?: string | undefined;
                        progressbarFillClass?: string | undefined;
                        progressbarOppositeClass?: string | undefined;
                        clickableClass?: string | undefined;
                        lockClass?: string | undefined;
                        horizontalClass?: string | undefined;
                        verticalClass?: string | undefined;
                        paginationDisabledClass?: string | undefined;
                    } | undefined;
                    parallax?: boolean | {
                        enabled?: boolean | undefined;
                    } | undefined;
                    scrollbar?: boolean | {
                        enabled?: boolean | undefined;
                        el?: HTMLElement | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | null | undefined;
                        hide?: boolean | undefined;
                        draggable?: boolean | undefined;
                        snapOnRelease?: boolean | undefined;
                        dragSize?: ("auto" | number) | undefined;
                        lockClass?: string | undefined;
                        dragClass?: string | undefined;
                        scrollbarDisabledClass?: string | undefined;
                        horizontalClass?: string | undefined;
                        verticalClass?: string | undefined;
                    } | undefined;
                    thumbs?: {
                        swiper?: string | any | null | undefined;
                        slideThumbActiveClass?: string | undefined;
                        thumbsContainerClass?: string | undefined;
                        multipleActiveThumbs?: boolean | undefined;
                        autoScrollOffset?: number | undefined;
                    } | undefined;
                    virtual?: boolean | {
                        enabled?: boolean | undefined;
                        slides?: any[] | undefined;
                        cache?: boolean | undefined;
                        addSlidesBefore?: number | undefined;
                        addSlidesAfter?: number | undefined;
                        renderSlide?: ((slide: any, index: any) => any | null) | undefined;
                        renderExternal?: ((data: import('swiper/types').VirtualData<any>) => any | null) | undefined;
                        renderExternalUpdate?: boolean | undefined;
                    } | undefined;
                    zoom?: boolean | {
                        limitToOriginalSize?: boolean | undefined;
                        maxRatio?: number | undefined;
                        minRatio?: number | undefined;
                        toggle?: boolean | undefined;
                        containerClass?: string | undefined;
                        zoomedSlideClass?: string | undefined;
                    } | undefined;
                    freeMode?: boolean | {
                        enabled?: boolean | undefined;
                        momentum?: boolean | undefined;
                        momentumRatio?: number | undefined;
                        momentumVelocityRatio?: number | undefined;
                        momentumBounce?: boolean | undefined;
                        momentumBounceRatio?: number | undefined;
                        minimumVelocity?: number | undefined;
                        sticky?: boolean | undefined;
                    } | undefined;
                    grid?: {
                        rows?: number | undefined;
                        fill?: ("row" | "column") | undefined;
                    } | undefined;
                    _emitClasses?: boolean | undefined;
                };
                originalParams: {
                    modules?: import('swiper/types').SwiperModule[] | undefined;
                    injectStyles?: string[] | undefined;
                    injectStylesUrls?: string[] | undefined;
                    init?: boolean | undefined;
                    enabled?: boolean | undefined;
                    updateOnWindowResize?: boolean | undefined;
                    resizeObserver?: boolean | undefined;
                    initialSlide?: number | undefined;
                    direction?: ("horizontal" | "vertical") | undefined;
                    oneWayMovement?: boolean | undefined;
                    swiperElementNodeName?: string | undefined;
                    speed?: number | undefined;
                    setWrapperSize?: boolean | undefined;
                    virtualTranslate?: boolean | undefined;
                    width?: (number | null) | undefined;
                    height?: (number | null) | undefined;
                    autoHeight?: boolean | undefined;
                    roundLengths?: boolean | undefined;
                    nested?: boolean | undefined;
                    createElements?: boolean | undefined;
                    eventsPrefix?: string | undefined;
                    focusableElements?: string | undefined;
                    uniqueNavElements?: boolean | undefined;
                    effect?: ("slide" | "fade" | "cube" | "coverflow" | "flip" | "creative" | "cards" | string) | undefined;
                    runCallbacksOnInit?: boolean | undefined;
                    watchOverflow?: boolean | undefined;
                    userAgent?: (string | null) | undefined;
                    url?: (string | null) | undefined;
                    on?: {
                        init?: ((swiper: SwiperType) => any) | undefined;
                        beforeDestroy?: ((swiper: SwiperType) => void) | undefined;
                        slidesUpdated?: ((swiper: SwiperType) => void) | undefined;
                        slideChange?: ((swiper: SwiperType) => void) | undefined;
                        slideChangeTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                        slideChangeTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                        slideNextTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                        slideNextTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                        slidePrevTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                        slidePrevTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                        transitionStart?: ((swiper: SwiperType) => void) | undefined;
                        transitionEnd?: ((swiper: SwiperType) => void) | undefined;
                        touchStart?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        touchMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        touchMoveOpposite?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        sliderMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        touchEnd?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        click?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        tap?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        doubleTap?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        progress?: ((swiper: SwiperType, progress: number) => void) | undefined;
                        reachBeginning?: ((swiper: SwiperType) => void) | undefined;
                        reachEnd?: ((swiper: SwiperType) => void) | undefined;
                        toEdge?: ((swiper: SwiperType) => void) | undefined;
                        fromEdge?: ((swiper: SwiperType) => void) | undefined;
                        setTranslate?: ((swiper: SwiperType, translate: number) => void) | undefined;
                        setTransition?: ((swiper: SwiperType, transition: number) => void) | undefined;
                        resize?: ((swiper: SwiperType) => void) | undefined;
                        observerUpdate?: ((swiper: SwiperType) => void) | undefined;
                        beforeLoopFix?: ((swiper: SwiperType) => void) | undefined;
                        loopFix?: ((swiper: SwiperType) => void) | undefined;
                        breakpoint?: ((swiper: SwiperType, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                        _beforeBreakpoint?: ((swiper: SwiperType, breakpointParams: import('swiper/types').SwiperOptions) => void) | undefined;
                        _containerClasses?: ((swiper: SwiperType, classNames: string) => void) | undefined;
                        _slideClass?: ((swiper: SwiperType, slideEl: HTMLElement, classNames: string) => void) | undefined;
                        _slideClasses?: ((swiper: SwiperType, slides: {
                            slideEl: HTMLElement;
                            classNames: string;
                            index: number;
                        }[]) => void) | undefined;
                        _swiper?: ((swiper: SwiperType) => void) | undefined;
                        _freeModeNoMomentumRelease?: ((swiper: SwiperType) => void) | undefined;
                        activeIndexChange?: ((swiper: SwiperType) => void) | undefined;
                        snapIndexChange?: ((swiper: SwiperType) => void) | undefined;
                        realIndexChange?: ((swiper: SwiperType) => void) | undefined;
                        afterInit?: ((swiper: SwiperType) => void) | undefined;
                        beforeInit?: ((swiper: SwiperType) => void) | undefined;
                        beforeResize?: ((swiper: SwiperType) => void) | undefined;
                        beforeSlideChangeStart?: ((swiper: SwiperType) => void) | undefined;
                        beforeTransitionStart?: ((swiper: SwiperType, speed: number, internal: any) => void) | undefined;
                        changeDirection?: ((swiper: SwiperType) => void) | undefined;
                        doubleClick?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        destroy?: ((swiper: SwiperType) => void) | undefined;
                        momentumBounce?: ((swiper: SwiperType) => void) | undefined;
                        orientationchange?: ((swiper: SwiperType) => void) | undefined;
                        slideResetTransitionStart?: ((swiper: SwiperType) => void) | undefined;
                        slideResetTransitionEnd?: ((swiper: SwiperType) => void) | undefined;
                        sliderFirstMove?: ((swiper: SwiperType, event: TouchEvent) => void) | undefined;
                        slidesLengthChange?: ((swiper: SwiperType) => void) | undefined;
                        slidesGridLengthChange?: ((swiper: SwiperType) => void) | undefined;
                        snapGridLengthChange?: ((swiper: SwiperType) => void) | undefined;
                        update?: ((swiper: SwiperType) => void) | undefined;
                        lock?: ((swiper: SwiperType) => void) | undefined;
                        unlock?: ((swiper: SwiperType) => void) | undefined;
                        autoplayStart?: ((swiper: SwiperType) => void) | undefined;
                        autoplayStop?: ((swiper: SwiperType) => void) | undefined;
                        autoplayPause?: ((swiper: SwiperType) => void) | undefined;
                        autoplayResume?: ((swiper: SwiperType) => void) | undefined;
                        autoplayTimeLeft?: ((swiper: SwiperType, timeLeft: number, percentage: number) => void) | undefined;
                        autoplay?: ((swiper: SwiperType) => void) | undefined;
                        hashChange?: ((swiper: SwiperType) => void) | undefined;
                        hashSet?: ((swiper: SwiperType) => void) | undefined;
                        keyPress?: ((swiper: SwiperType, keyCode: string) => void) | undefined;
                        scroll?: ((swiper: SwiperType, event: WheelEvent) => void) | undefined;
                        navigationHide?: ((swiper: SwiperType) => void) | undefined;
                        navigationShow?: ((swiper: SwiperType) => void) | undefined;
                        navigationPrev?: ((swiper: SwiperType) => void) | undefined;
                        navigationNext?: ((swiper: SwiperType) => void) | undefined;
                        paginationRender?: ((swiper: SwiperType, paginationEl: HTMLElement) => void) | undefined;
                        paginationUpdate?: ((swiper: SwiperType, paginationEl: HTMLElement) => void) | undefined;
                        paginationHide?: ((swiper: SwiperType) => void) | undefined;
                        paginationShow?: ((swiper: SwiperType) => void) | undefined;
                        scrollbarDragStart?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        scrollbarDragMove?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        scrollbarDragEnd?: ((swiper: SwiperType, event: MouseEvent | TouchEvent | PointerEvent) => void) | undefined;
                        zoomChange?: ((swiper: SwiperType, scale: number, imageEl: HTMLElement, slideEl: HTMLElement) => void) | undefined;
                    } | undefined;
                    onAny?: ((handler: (eventName: string, ...args: any[]) => void) => void) | undefined;
                    cssMode?: boolean | undefined;
                    spaceBetween?: (number | string) | undefined;
                    slidesPerView?: (number | "auto") | undefined;
                    maxBackfaceHiddenSlides?: number | undefined;
                    slidesPerGroup?: number | undefined;
                    slidesPerGroupSkip?: number | undefined;
                    slidesPerGroupAuto?: boolean | undefined;
                    centeredSlides?: boolean | undefined;
                    centeredSlidesBounds?: boolean | undefined;
                    slidesOffsetBefore?: number | undefined;
                    slidesOffsetAfter?: number | undefined;
                    normalizeSlideIndex?: boolean | undefined;
                    centerInsufficientSlides?: boolean | undefined;
                    grabCursor?: boolean | undefined;
                    touchEventsTarget?: ("container" | "wrapper") | undefined;
                    touchRatio?: number | undefined;
                    touchAngle?: number | undefined;
                    simulateTouch?: boolean | undefined;
                    shortSwipes?: boolean | undefined;
                    longSwipes?: boolean | undefined;
                    longSwipesRatio?: number | undefined;
                    longSwipesMs?: number | undefined;
                    followFinger?: boolean | undefined;
                    allowTouchMove?: boolean | undefined;
                    threshold?: number | undefined;
                    touchStartPreventDefault?: boolean | undefined;
                    touchStartForcePreventDefault?: boolean | undefined;
                    touchMoveStopPropagation?: boolean | undefined;
                    edgeSwipeDetection?: (boolean | string) | undefined;
                    edgeSwipeThreshold?: number | undefined;
                    touchReleaseOnEdges?: boolean | undefined;
                    passiveListeners?: boolean | undefined;
                    resistance?: boolean | undefined;
                    resistanceRatio?: number | undefined;
                    preventInteractionOnTransition?: boolean | undefined;
                    allowSlidePrev?: boolean | undefined;
                    allowSlideNext?: boolean | undefined;
                    noSwiping?: boolean | undefined;
                    noSwipingClass?: string | undefined;
                    noSwipingSelector?: string | undefined;
                    swipeHandler?: HTMLElement | {
                        readonly [x: number]: string;
                        toString: () => string;
                        charAt: (pos: number) => string;
                        charCodeAt: (index: number) => number;
                        concat: (...strings: string[]) => string;
                        indexOf: (searchString: string, position?: number) => number;
                        lastIndexOf: (searchString: string, position?: number) => number;
                        localeCompare: {
                            (that: string): number;
                            (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                            (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                        };
                        match: {
                            (regexp: string | RegExp): RegExpMatchArray | null;
                            (matcher: {
                                [Symbol.match](string: string): RegExpMatchArray | null;
                            }): RegExpMatchArray | null;
                        };
                        replace: {
                            (searchValue: string | RegExp, replaceValue: string): string;
                            (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replaceValue: string): string;
                            }, replaceValue: string): string;
                            (searchValue: {
                                [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                            }, replacer: (substring: string, ...args: any[]) => string): string;
                        };
                        search: {
                            (regexp: string | RegExp): number;
                            (searcher: {
                                [Symbol.search](string: string): number;
                            }): number;
                        };
                        slice: (start?: number, end?: number) => string;
                        split: {
                            (separator: string | RegExp, limit?: number): string[];
                            (splitter: {
                                [Symbol.split](string: string, limit?: number): string[];
                            }, limit?: number): string[];
                        };
                        substring: (start: number, end?: number) => string;
                        toLowerCase: () => string;
                        toLocaleLowerCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        toUpperCase: () => string;
                        toLocaleUpperCase: {
                            (locales?: string | string[]): string;
                            (locales?: Intl.LocalesArgument): string;
                        };
                        trim: () => string;
                        readonly length: number;
                        substr: (from: number, length?: number) => string;
                        valueOf: () => string;
                        codePointAt: (pos: number) => number | undefined;
                        includes: (searchString: string, position?: number) => boolean;
                        endsWith: (searchString: string, endPosition?: number) => boolean;
                        normalize: {
                            (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                            (form?: string): string;
                        };
                        repeat: (count: number) => string;
                        startsWith: (searchString: string, position?: number) => boolean;
                        anchor: (name: string) => string;
                        big: () => string;
                        blink: () => string;
                        bold: () => string;
                        fixed: () => string;
                        fontcolor: (color: string) => string;
                        fontsize: {
                            (size: number): string;
                            (size: string): string;
                        };
                        italics: () => string;
                        link: (url: string) => string;
                        small: () => string;
                        strike: () => string;
                        sub: () => string;
                        sup: () => string;
                        padStart: (maxLength: number, fillString?: string) => string;
                        padEnd: (maxLength: number, fillString?: string) => string;
                        trimEnd: () => string;
                        trimStart: () => string;
                        trimLeft: () => string;
                        trimRight: () => string;
                        matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                        [Symbol.iterator]: () => StringIterator<string>;
                        at: (index: number) => string | undefined;
                    } | null | undefined;
                    preventClicks?: boolean | undefined;
                    preventClicksPropagation?: boolean | undefined;
                    slideToClickedSlide?: boolean | undefined;
                    watchSlidesProgress?: boolean | undefined;
                    loop?: boolean | undefined;
                    loopAddBlankSlides?: boolean | undefined;
                    loopAdditionalSlides?: number | undefined;
                    loopPreventsSliding?: boolean | undefined;
                    rewind?: boolean | undefined;
                    breakpoints?: {
                        [width: number]: import('swiper/types').SwiperOptions;
                        [ratio: string]: import('swiper/types').SwiperOptions;
                    } | undefined;
                    breakpointsBase?: ("window" | "container") | undefined;
                    observer?: boolean | undefined;
                    observeSlideChildren?: boolean | undefined;
                    observeParents?: boolean | undefined;
                    containerModifierClass?: string | undefined;
                    slideClass?: string | undefined;
                    slideActiveClass?: string | undefined;
                    slideVisibleClass?: string | undefined;
                    slideFullyVisibleClass?: string | undefined;
                    slideBlankClass?: string | undefined;
                    slideNextClass?: string | undefined;
                    slidePrevClass?: string | undefined;
                    wrapperClass?: string | undefined;
                    lazyPreloaderClass?: string | undefined;
                    lazyPreloadPrevNext?: number | undefined;
                    a11y?: {
                        enabled?: boolean | undefined;
                        prevSlideMessage?: string | undefined;
                        nextSlideMessage?: string | undefined;
                        firstSlideMessage?: string | undefined;
                        lastSlideMessage?: string | undefined;
                        paginationBulletMessage?: string | undefined;
                        notificationClass?: string | undefined;
                        containerMessage?: (string | null) | undefined;
                        containerRoleDescriptionMessage?: (string | null) | undefined;
                        containerRole?: (string | null) | undefined;
                        itemRoleDescriptionMessage?: (string | null) | undefined;
                        slideLabelMessage?: string | undefined;
                        slideRole?: string | undefined;
                        id?: (string | number | null) | undefined;
                        scrollOnFocus?: boolean | undefined;
                    } | undefined;
                    autoplay?: boolean | {
                        delay?: number | undefined;
                        stopOnLastSlide?: boolean | undefined;
                        disableOnInteraction?: boolean | undefined;
                        reverseDirection?: boolean | undefined;
                        waitForTransition?: boolean | undefined;
                        pauseOnMouseEnter?: boolean | undefined;
                    } | undefined;
                    controller?: {
                        control?: string | HTMLElement | any | any[] | null | undefined;
                        inverse?: boolean | undefined;
                        by?: ("slide" | "container") | undefined;
                    } | undefined;
                    coverflowEffect?: {
                        slideShadows?: boolean | undefined;
                        rotate?: number | undefined;
                        stretch?: number | undefined;
                        depth?: number | undefined;
                        scale?: number | undefined;
                        modifier?: number | undefined;
                    } | undefined;
                    cubeEffect?: {
                        slideShadows?: boolean | undefined;
                        shadow?: boolean | undefined;
                        shadowOffset?: number | undefined;
                        shadowScale?: number | undefined;
                    } | undefined;
                    fadeEffect?: {
                        crossFade?: boolean | undefined;
                    } | undefined;
                    flipEffect?: {
                        slideShadows?: boolean | undefined;
                        limitRotation?: boolean | undefined;
                    } | undefined;
                    creativeEffect?: {
                        prev?: {
                            translate?: (string | number)[] | undefined;
                            rotate?: number[] | undefined;
                            opacity?: number | undefined;
                            scale?: number | undefined;
                            shadow?: boolean | undefined;
                            origin?: string | undefined;
                        } | undefined;
                        next?: {
                            translate?: (string | number)[] | undefined;
                            rotate?: number[] | undefined;
                            opacity?: number | undefined;
                            scale?: number | undefined;
                            shadow?: boolean | undefined;
                            origin?: string | undefined;
                        } | undefined;
                        limitProgress?: number | undefined;
                        shadowPerProgress?: boolean | undefined;
                        progressMultiplier?: number | undefined;
                        perspective?: boolean | undefined;
                    } | undefined;
                    cardsEffect?: {
                        slideShadows?: boolean | undefined;
                        rotate?: boolean | undefined;
                        perSlideRotate?: number | undefined;
                        perSlideOffset?: number | undefined;
                    } | undefined;
                    hashNavigation?: boolean | {
                        watchState?: boolean | undefined;
                        replaceState?: boolean | undefined;
                        getSlideIndex?: ((swiper: SwiperType, hash: string) => number) | undefined;
                    } | undefined;
                    history?: boolean | {
                        enabled?: boolean | undefined;
                        root?: string | undefined;
                        replaceState?: boolean | undefined;
                        key?: string | undefined;
                        keepQuery?: boolean | undefined;
                    } | undefined;
                    keyboard?: boolean | {
                        enabled?: boolean | undefined;
                        onlyInViewport?: boolean | undefined;
                        pageUpDown?: boolean | undefined;
                    } | undefined;
                    mousewheel?: boolean | {
                        enabled?: boolean | undefined;
                        forceToAxis?: boolean | undefined;
                        releaseOnEdges?: boolean | undefined;
                        invert?: boolean | undefined;
                        sensitivity?: number | undefined;
                        eventsTarget?: HTMLElement | "container" | "wrapper" | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | undefined;
                        thresholdDelta?: (number | null) | undefined;
                        thresholdTime?: (number | null) | undefined;
                        noMousewheelClass?: string | undefined;
                    } | undefined;
                    navigation?: boolean | {
                        enabled?: boolean | undefined;
                        nextEl?: HTMLElement | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | null | undefined;
                        prevEl?: HTMLElement | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | null | undefined;
                        hideOnClick?: boolean | undefined;
                        disabledClass?: string | undefined;
                        hiddenClass?: string | undefined;
                        lockClass?: string | undefined;
                        navigationDisabledClass?: string | undefined;
                    } | undefined;
                    pagination?: boolean | {
                        enabled?: boolean | undefined;
                        el?: HTMLElement | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | null | undefined;
                        type?: ("bullets" | "fraction" | "progressbar" | "custom") | undefined;
                        bulletElement?: string | undefined;
                        dynamicBullets?: boolean | undefined;
                        dynamicMainBullets?: number | undefined;
                        hideOnClick?: boolean | undefined;
                        clickable?: boolean | undefined;
                        progressbarOpposite?: boolean | undefined;
                        formatFractionCurrent?: ((number: number) => number | string) | undefined;
                        formatFractionTotal?: ((number: number) => number | string) | undefined;
                        renderBullet?: ((index: number, className: string) => string) | undefined;
                        renderFraction?: ((currentClass: string, totalClass: string) => string) | undefined;
                        renderProgressbar?: ((progressbarFillClass: string) => string) | undefined;
                        renderCustom?: ((swiper: SwiperType, current: number, total: number) => string) | undefined;
                        bulletClass?: string | undefined;
                        bulletActiveClass?: string | undefined;
                        modifierClass?: string | undefined;
                        currentClass?: string | undefined;
                        totalClass?: string | undefined;
                        hiddenClass?: string | undefined;
                        progressbarFillClass?: string | undefined;
                        progressbarOppositeClass?: string | undefined;
                        clickableClass?: string | undefined;
                        lockClass?: string | undefined;
                        horizontalClass?: string | undefined;
                        verticalClass?: string | undefined;
                        paginationDisabledClass?: string | undefined;
                    } | undefined;
                    parallax?: boolean | {
                        enabled?: boolean | undefined;
                    } | undefined;
                    scrollbar?: boolean | {
                        enabled?: boolean | undefined;
                        el?: HTMLElement | {
                            readonly [x: number]: string;
                            toString: () => string;
                            charAt: (pos: number) => string;
                            charCodeAt: (index: number) => number;
                            concat: (...strings: string[]) => string;
                            indexOf: (searchString: string, position?: number) => number;
                            lastIndexOf: (searchString: string, position?: number) => number;
                            localeCompare: {
                                (that: string): number;
                                (that: string, locales?: string | string[], options?: Intl.CollatorOptions): number;
                                (that: string, locales?: Intl.LocalesArgument, options?: Intl.CollatorOptions): number;
                            };
                            match: {
                                (regexp: string | RegExp): RegExpMatchArray | null;
                                (matcher: {
                                    [Symbol.match](string: string): RegExpMatchArray | null;
                                }): RegExpMatchArray | null;
                            };
                            replace: {
                                (searchValue: string | RegExp, replaceValue: string): string;
                                (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replaceValue: string): string;
                                }, replaceValue: string): string;
                                (searchValue: {
                                    [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
                                }, replacer: (substring: string, ...args: any[]) => string): string;
                            };
                            search: {
                                (regexp: string | RegExp): number;
                                (searcher: {
                                    [Symbol.search](string: string): number;
                                }): number;
                            };
                            slice: (start?: number, end?: number) => string;
                            split: {
                                (separator: string | RegExp, limit?: number): string[];
                                (splitter: {
                                    [Symbol.split](string: string, limit?: number): string[];
                                }, limit?: number): string[];
                            };
                            substring: (start: number, end?: number) => string;
                            toLowerCase: () => string;
                            toLocaleLowerCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            toUpperCase: () => string;
                            toLocaleUpperCase: {
                                (locales?: string | string[]): string;
                                (locales?: Intl.LocalesArgument): string;
                            };
                            trim: () => string;
                            readonly length: number;
                            substr: (from: number, length?: number) => string;
                            valueOf: () => string;
                            codePointAt: (pos: number) => number | undefined;
                            includes: (searchString: string, position?: number) => boolean;
                            endsWith: (searchString: string, endPosition?: number) => boolean;
                            normalize: {
                                (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string;
                                (form?: string): string;
                            };
                            repeat: (count: number) => string;
                            startsWith: (searchString: string, position?: number) => boolean;
                            anchor: (name: string) => string;
                            big: () => string;
                            blink: () => string;
                            bold: () => string;
                            fixed: () => string;
                            fontcolor: (color: string) => string;
                            fontsize: {
                                (size: number): string;
                                (size: string): string;
                            };
                            italics: () => string;
                            link: (url: string) => string;
                            small: () => string;
                            strike: () => string;
                            sub: () => string;
                            sup: () => string;
                            padStart: (maxLength: number, fillString?: string) => string;
                            padEnd: (maxLength: number, fillString?: string) => string;
                            trimEnd: () => string;
                            trimStart: () => string;
                            trimLeft: () => string;
                            trimRight: () => string;
                            matchAll: (regexp: RegExp) => RegExpStringIterator<RegExpExecArray>;
                            [Symbol.iterator]: () => StringIterator<string>;
                            at: (index: number) => string | undefined;
                        } | null | undefined;
                        hide?: boolean | undefined;
                        draggable?: boolean | undefined;
                        snapOnRelease?: boolean | undefined;
                        dragSize?: ("auto" | number) | undefined;
                        lockClass?: string | undefined;
                        dragClass?: string | undefined;
                        scrollbarDisabledClass?: string | undefined;
                        horizontalClass?: string | undefined;
                        verticalClass?: string | undefined;
                    } | undefined;
                    thumbs?: {
                        swiper?: string | any | null | undefined;
                        slideThumbActiveClass?: string | undefined;
                        thumbsContainerClass?: string | undefined;
                        multipleActiveThumbs?: boolean | undefined;
                        autoScrollOffset?: number | undefined;
                    } | undefined;
                    virtual?: boolean | {
                        enabled?: boolean | undefined;
                        slides?: any[] | undefined;
                        cache?: boolean | undefined;
                        addSlidesBefore?: number | undefined;
                        addSlidesAfter?: number | undefined;
                        renderSlide?: ((slide: any, index: any) => any | null) | undefined;
                        renderExternal?: ((data: import('swiper/types').VirtualData<any>) => any | null) | undefined;
                        renderExternalUpdate?: boolean | undefined;
                    } | undefined;
                    zoom?: boolean | {
                        limitToOriginalSize?: boolean | undefined;
                        maxRatio?: number | undefined;
                        minRatio?: number | undefined;
                        toggle?: boolean | undefined;
                        containerClass?: string | undefined;
                        zoomedSlideClass?: string | undefined;
                    } | undefined;
                    freeMode?: boolean | {
                        enabled?: boolean | undefined;
                        momentum?: boolean | undefined;
                        momentumRatio?: number | undefined;
                        momentumVelocityRatio?: number | undefined;
                        momentumBounce?: boolean | undefined;
                        momentumBounceRatio?: number | undefined;
                        minimumVelocity?: number | undefined;
                        sticky?: boolean | undefined;
                    } | undefined;
                    grid?: {
                        rows?: number | undefined;
                        fill?: ("row" | "column") | undefined;
                    } | undefined;
                    _emitClasses?: boolean | undefined;
                };
                el: HTMLElement;
                wrapperEl: HTMLElement;
                slidesEl: HTMLElement;
                slides: HTMLElement[];
                loopedSlides: number | null;
                width: number;
                height: number;
                translate: number;
                progress: number;
                activeIndex: number;
                realIndex: number;
                previousIndex: number;
                snapIndex: number;
                snapGrid: number[];
                slidesGrid: number[];
                slidesSizesGrid: number[];
                isBeginning: boolean;
                isEnd: boolean;
                isLocked: boolean;
                animating: boolean;
                touches: {
                    startX: number;
                    startY: number;
                    currentX: number;
                    currentY: number;
                    diff: number;
                };
                clickedIndex: number;
                clickedSlide: HTMLElement;
                allowSlideNext: boolean;
                allowSlidePrev: boolean;
                allowTouchMove: boolean;
                swipeDirection: "prev" | "next";
                rtlTranslate: boolean;
                disable: () => void;
                enable: () => void;
                setProgress: (progress: number, speed?: number) => void;
                slideNext: (speed?: number, runCallbacks?: boolean) => boolean;
                slidePrev: (speed?: number, runCallbacks?: boolean) => boolean;
                slideTo: (index: number, speed?: number, runCallbacks?: boolean) => boolean;
                slideToLoop: (index: number, speed?: number, runCallbacks?: boolean) => SwiperType;
                slideReset: (speed?: number, runCallbacks?: boolean) => boolean;
                slideToClosest: (speed?: number, runCallbacks?: boolean) => boolean;
                slidesPerViewDynamic: () => number;
                updateAutoHeight: (speed?: number) => void;
                update: () => void;
                updateSize: () => void;
                updateSlides: () => void;
                updateProgress: () => void;
                updateSlidesClasses: () => void;
                changeDirection: (direction?: "horizontal" | "vertical", needUpdate?: boolean) => void;
                changeLanguageDirection: (direction: "rtl" | "ltr") => void;
                detachEvents: () => void;
                attachEvents: () => void;
                loopCreate: () => void;
                loopDestroy: () => void;
                init: (el?: HTMLElement) => SwiperType;
                destroy: (deleteInstance?: boolean, cleanStyles?: boolean) => void;
                setTranslate: (translate: any) => void;
                getTranslate: () => any;
                translateTo: (translate: number, speed: number, runCallbacks?: boolean, translateBounds?: boolean) => any;
                minTranslate: () => number;
                maxTranslate: () => number;
                unsetGrabCursor: () => void;
                setGrabCursor: () => void;
                onAny: (handler: (eventName: string, ...args: any[]) => void) => void;
                offAny: (handler: (eventName: string, ...args: any[]) => void) => void;
                isHorizontal: () => boolean;
                getBreakpoint: (breakpoints: import('swiper/types').SwiperOptions["breakpoints"]) => string;
                setBreakpoint: () => void;
                currentBreakpoint: any;
                destroyed: boolean;
                modules: Array<import('swiper/types').SwiperModule>;
                a11y: import('swiper/types').A11yMethods;
                autoplay: {
                    running: boolean;
                    paused: boolean;
                    timeLeft: number;
                    pause: () => void;
                    resume: () => void;
                    start: () => boolean;
                    stop: () => boolean;
                };
                controller: {
                    control?: any | any[] | undefined;
                };
                coverflowEffect: import('swiper/types').CoverflowEffectMethods;
                cubeEffect: import('swiper/types').CubeEffectMethods;
                fadeEffect: import('swiper/types').FadeEffectMethods;
                flipEffect: import('swiper/types').FlipEffectMethods;
                creativeEffect: import('swiper/types').CreativeEffectMethods;
                cardsEffect: import('swiper/types').CardsEffectMethods;
                hashNavigation: import('swiper/types').HashNavigationMethods;
                history: import('swiper/types').HistoryMethods;
                keyboard: {
                    enabled: boolean;
                    enable: () => void;
                    disable: () => void;
                };
                mousewheel: {
                    enabled: boolean;
                    enable: () => void;
                    disable: () => void;
                };
                navigation: {
                    nextEl: HTMLElement;
                    prevEl: HTMLElement;
                    update: () => void;
                    init: () => void;
                    destroy: () => void;
                };
                pagination: {
                    el: HTMLElement;
                    bullets: HTMLElement[];
                    render: () => void;
                    update: () => void;
                    init: () => void;
                    destroy: () => void;
                };
                parallax: import('swiper/types').ParallaxMethods;
                scrollbar: {
                    el: HTMLElement;
                    dragEl: HTMLElement;
                    updateSize: () => void;
                    setTranslate: () => void;
                    init: () => void;
                    destroy: () => void;
                };
                thumbs: {
                    swiper: any;
                    update: (initial: boolean) => void;
                    init: () => boolean;
                };
                virtual: {
                    cache: object;
                    from: number;
                    to: number;
                    slides: any[];
                    appendSlide: (slide: HTMLElement | string | HTMLElement[] | string[]) => void;
                    prependSlide: (slide: HTMLElement | string | HTMLElement[] | string[]) => void;
                    removeSlide: (slideIndexes: number[]) => void;
                    removeAllSlides: () => void;
                    update: (force: boolean) => void;
                };
                zoom: {
                    enabled: boolean;
                    scale: number;
                    enable: () => void;
                    disable: () => void;
                    in: (ratio?: number) => void;
                    out: () => void;
                    toggle: (event?: MouseEvent | TouchEvent | PointerEvent) => void;
                };
                freeMode: {
                    onTouchMove: () => void;
                    onTouchEnd: () => void;
                };
                on: <E extends keyof import('swiper/types').SwiperEvents>(event: E, handler: import('swiper/types').SwiperEvents[E]) => void;
                once: <E extends keyof import('swiper/types').SwiperEvents>(event: E, handler: import('swiper/types').SwiperEvents[E]) => void;
                off: {
                    <E extends keyof import('swiper/types').SwiperEvents>(event: E, handler: import('swiper/types').SwiperEvents[E]): void;
                    <E extends keyof import('swiper/types').SwiperEvents>(event: E): void;
                };
                emit: <E extends keyof import('swiper/types').SwiperEvents>(event: E, ...args: any[]) => void;
                appendSlide: (slides: HTMLElement | string | string[] | HTMLElement[]) => void;
                prependSlide: (slides: HTMLElement | string | string[] | HTMLElement[]) => void;
                addSlide: (index: number, slides: HTMLElement | string | string[] | HTMLElement[]) => void;
                removeSlide: (slideIndex: number | number[]) => void;
                removeAllSlides: () => void;
            } | null>;
        }> & {} & import('vue').ComponentCustomProperties & {} & {
            $slots: {
                default?(_: {
                    currentSlideIdx: number;
                    activeSlideIdx: number;
                }): any;
                prev?(_: {}): any;
                next?(_: {}): any;
            };
        }) | null;
    };
    attrs: Partial<{}>;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<{
    initialIndex?: number;
    enableMousewheelSwitch?: boolean;
    speed?: number;
    transitionFun?: string;
    transitionDelay?: number | string;
    background?: string;
    timelineData: string[];
    timelinePerView?: number;
    timelinePerViewReactScreen?: number;
    timelineOffset?: number;
    timelineColor?: string;
    timelineColorActive?: string;
    timelineTextMaxLine?: number;
    timelineSpeed?: number;
    timelineTransitionFun?: string;
    timelineTransitionDelay?: number | string;
    enableTimelineNav?: boolean;
    needReactScreenWidth?: number;
}, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
    initialIndex?: number;
    enableMousewheelSwitch?: boolean;
    speed?: number;
    transitionFun?: string;
    transitionDelay?: number | string;
    background?: string;
    timelineData: string[];
    timelinePerView?: number;
    timelinePerViewReactScreen?: number;
    timelineOffset?: number;
    timelineColor?: string;
    timelineColorActive?: string;
    timelineTextMaxLine?: number;
    timelineSpeed?: number;
    timelineTransitionFun?: string;
    timelineTransitionDelay?: number | string;
    enableTimelineNav?: boolean;
    needReactScreenWidth?: number;
}> & Readonly<{}>, {
    background: string;
    transitionDelay: number | string;
    transitionFun: string;
    speed: number;
    initialIndex: number;
    enableMousewheelSwitch: boolean;
    timelinePerView: number;
    timelinePerViewReactScreen: number;
    timelineOffset: number;
    timelineColor: string;
    timelineColorActive: string;
    timelineTextMaxLine: number;
    timelineSpeed: number;
    timelineTransitionFun: string;
    timelineTransitionDelay: number | string;
    enableTimelineNav: boolean;
    needReactScreenWidth: number;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
