declare function __VLS_template(): {
    slots: {
        default?(_: {}): any;
    };
    refs: {};
    attrs: Partial<{}>;
};
type __VLS_TemplateResult = ReturnType<typeof __VLS_template>;
declare const __VLS_component: import('vue').DefineComponent<{
    width?: string | number;
    height?: string | number;
    backgroundColor?: string;
    borderColor?: string;
    borderWidth?: string | number;
    borderRadius?: string | number;
    start?: string | number;
    speed?: string | number;
    shine?: boolean;
    shineRangeStart?: string | number;
    shineRangeEnd?: string | number;
    shineBrightnessStart?: number;
    shineBrightnessEnd?: number;
    blurBorder?: boolean;
    blurSpeed: number | string;
}, {}, {}, {}, {}, import('vue').ComponentOptionsMixin, import('vue').ComponentOptionsMixin, {}, string, import('vue').PublicProps, Readonly<{
    width?: string | number;
    height?: string | number;
    backgroundColor?: string;
    borderColor?: string;
    borderWidth?: string | number;
    borderRadius?: string | number;
    start?: string | number;
    speed?: string | number;
    shine?: boolean;
    shineRangeStart?: string | number;
    shineRangeEnd?: string | number;
    shineBrightnessStart?: number;
    shineBrightnessEnd?: number;
    blurBorder?: boolean;
    blurSpeed: number | string;
}> & Readonly<{}>, {
    width: string | number;
    height: string | number;
    backgroundColor: string;
    borderColor: string;
    borderRadius: string | number;
    borderWidth: string | number;
    start: string | number;
    speed: string | number;
    shine: boolean;
    shineRangeStart: string | number;
    shineRangeEnd: string | number;
    shineBrightnessEnd: number;
    blurBorder: boolean;
    blurSpeed: number | string;
}, {}, {}, {}, string, import('vue').ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithTemplateSlots<typeof __VLS_component, __VLS_TemplateResult["slots"]>;
export default _default;
type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
